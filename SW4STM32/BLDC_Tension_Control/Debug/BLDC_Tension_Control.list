
BLDC_Tension_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009918  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009da8  08009da8  00019da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000624  20000000  08009dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000069c  20000624  0800a3d0  00020624  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000cc0  0800a3d0  00020cc0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020624  2**0
                  CONTENTS, READONLY
 10 .debug_line   0002d912  00000000  00000000  00020654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0005a782  00000000  00000000  0004df66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008162  00000000  00000000  000a86e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ee0  00000000  00000000  000b0850  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00107069  00000000  00000000  000b2730  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004d00  00000000  00000000  001b97a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020c3c  00000000  00000000  001be4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002bf81  00000000  00000000  001df0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  0020b05d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d9c  00000000  00000000  0020b158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000624 	.word	0x20000624
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ad8 	.word	0x08009ad8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000628 	.word	0x20000628
 8000214:	08009ad8 	.word	0x08009ad8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490e      	ldr	r1, [pc, #56]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0b      	ldr	r4, [pc, #44]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000542:	f003 fa49 	bl	80039d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000546:	f009 fa9b 	bl	8009a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f000 f85b 	bl	8000604 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000624 	.word	0x20000624
  ldr r2, =_sidata
 800055c:	08009dac 	.word	0x08009dac
  ldr r2, =_sbss
 8000560:	20000624 	.word	0x20000624
  ldr r4, =_ebss
 8000564:	20000cc0 	.word	0x20000cc0

08000568 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <BusFault_Handler>
	...

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	2100      	movs	r1, #0
{
 8000570:	b0a5      	sub	sp, #148	; 0x94
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000574:	2238      	movs	r2, #56	; 0x38
 8000576:	a805      	add	r0, sp, #20
 8000578:	f009 faa6 	bl	8009ac8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	4621      	mov	r1, r4
 800057e:	2244      	movs	r2, #68	; 0x44
 8000580:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000582:	e9cd 4400 	strd	r4, r4, [sp]
 8000586:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800058a:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	f009 fa9c 	bl	8009ac8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000590:	4620      	mov	r0, r4
 8000592:	f004 fe6b 	bl	800526c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000596:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	2403      	movs	r4, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a0:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005a6:	2208      	movs	r2, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005ac:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005b4:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f004 fede 	bl	8005378 <HAL_RCC_OscConfig>
 80005bc:	b108      	cbz	r0, 80005c2 <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005be:	b672      	cpsid	i
 80005c0:	e7fe      	b.n	80005c0 <SystemClock_Config+0x54>
 80005c2:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	4668      	mov	r0, sp
 80005c8:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	e9cd 4301 	strd	r4, r3, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	9200      	str	r2, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d4:	f005 f922 	bl	800581c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	b108      	cbz	r0, 80005e0 <SystemClock_Config+0x74>
 80005dc:	b672      	cpsid	i
 80005de:	e7fe      	b.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80005e0:	f249 0402 	movw	r4, #36866	; 0x9002
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ee:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80005f0:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005f2:	911f      	str	r1, [sp, #124]	; 0x7c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005f4:	9222      	str	r2, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	f005 fae1 	bl	8005bbc <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	b108      	cbz	r0, 8000600 <SystemClock_Config+0x94>
 80005fc:	b672      	cpsid	i
 80005fe:	e7fe      	b.n	80005fe <SystemClock_Config+0x92>
  {
    Error_Handler();
  }
}
 8000600:	b025      	add	sp, #148	; 0x94
 8000602:	bd30      	pop	{r4, r5, pc}

08000604 <main>:
{
 8000604:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f04f 0800 	mov.w	r8, #0
{
 800060c:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 800060e:	f003 fa15 	bl	8003a3c <HAL_Init>
  SystemClock_Config();
 8000612:	f7ff ffab 	bl	800056c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	e9cd 881a 	strd	r8, r8, [sp, #104]	; 0x68
 800061a:	e9cd 881c 	strd	r8, r8, [sp, #112]	; 0x70

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4bab      	ldr	r3, [pc, #684]	; (80008cc <main+0x2c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 8000626:	48aa      	ldr	r0, [pc, #680]	; (80008d0 <main+0x2cc>)
  hadc1.Instance = ADC1;
 8000628:	4caa      	ldr	r4, [pc, #680]	; (80008d4 <main+0x2d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	f042 0204 	orr.w	r2, r2, #4
 800062e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000632:	f002 0204 	and.w	r2, r2, #4
 8000636:	9203      	str	r2, [sp, #12]
 8000638:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800063c:	f042 0220 	orr.w	r2, r2, #32
 8000640:	64da      	str	r2, [r3, #76]	; 0x4c
 8000642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000644:	f002 0220 	and.w	r2, r2, #32
 8000648:	9204      	str	r2, [sp, #16]
 800064a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800064e:	f042 0201 	orr.w	r2, r2, #1
 8000652:	64da      	str	r2, [r3, #76]	; 0x4c
 8000654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000656:	f002 0201 	and.w	r2, r2, #1
 800065a:	9205      	str	r2, [sp, #20]
 800065c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000660:	f042 0202 	orr.w	r2, r2, #2
 8000664:	64da      	str	r2, [r3, #76]	; 0x4c
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 800066c:	4642      	mov	r2, r8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 8000670:	f244 0140 	movw	r1, #16448	; 0x4040

  /*Configure GPIO pins : CAN_TERM_Pin STATUS_Pin */
  GPIO_InitStruct.Pin = CAN_TERM_Pin|STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 8000678:	f004 fd64 	bl	8005144 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CAN_TERM_Pin|STATUS_Pin;
 800067c:	f244 0340 	movw	r3, #16448	; 0x4040
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	a91a      	add	r1, sp, #104	; 0x68
 8000682:	4893      	ldr	r0, [pc, #588]	; (80008d0 <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068c:	951c      	str	r5, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068e:	f004 fc7d 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000692:	4b91      	ldr	r3, [pc, #580]	; (80008d8 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000694:	488e      	ldr	r0, [pc, #568]	; (80008d0 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800069a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800069e:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f004 fc72 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	4b8c      	ldr	r3, [pc, #560]	; (80008dc <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 80006aa:	488d      	ldr	r0, [pc, #564]	; (80008e0 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 80006b0:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 80006b4:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f004 fc67 	bl	8004f8c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006be:	4641      	mov	r1, r8
 80006c0:	223c      	movs	r2, #60	; 0x3c
 80006c2:	a81a      	add	r0, sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 80006c4:	e9cd 880d 	strd	r8, r8, [sp, #52]	; 0x34
 80006c8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006cc:	f009 f9fc 	bl	8009ac8 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d0:	4641      	mov	r1, r8
 80006d2:	a812      	add	r0, sp, #72	; 0x48
 80006d4:	2220      	movs	r2, #32
 80006d6:	f009 f9f7 	bl	8009ac8 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006da:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
  hadc1.Instance = ADC1;
 80006de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006e2:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	2604      	movs	r6, #4
  hadc1.Init.NbrOfConversion = 2;
 80006e8:	2702      	movs	r7, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ea:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006f0:	e9c4 8504 	strd	r8, r5, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f4:	f884 801c 	strb.w	r8, [r4, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f8:	f884 801d 	strb.w	r8, [r4, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000700:	e9c4 880b 	strd	r8, r8, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000704:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000708:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800070c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000710:	e9c4 3b00 	strd	r3, fp, [r4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000714:	f8c4 a00c 	str.w	sl, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	61a6      	str	r6, [r4, #24]
  hadc1.Init.NbrOfConversion = 2;
 800071a:	6227      	str	r7, [r4, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	f003 f9b4 	bl	8003a88 <HAL_ADC_Init>
 8000720:	b108      	cbz	r0, 8000726 <main+0x122>
 8000722:	b672      	cpsid	i
 8000724:	e7fe      	b.n	8000724 <main+0x120>
 8000726:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000728:	a90d      	add	r1, sp, #52	; 0x34
 800072a:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800072c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072e:	f003 ffbd 	bl	80046ac <HAL_ADCEx_MultiModeConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	b108      	cbz	r0, 800073a <main+0x136>
 8000736:	b672      	cpsid	i
 8000738:	e7fe      	b.n	8000738 <main+0x134>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800073a:	2201      	movs	r2, #1
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800073c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000740:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000744:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000748:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800074c:	237f      	movs	r3, #127	; 0x7f
 800074e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000752:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000914 <main+0x310>
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000756:	9722      	str	r7, [sp, #136]	; 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000758:	2204      	movs	r2, #4
 800075a:	2300      	movs	r3, #0
 800075c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000760:	f04f 0909 	mov.w	r9, #9
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000764:	2284      	movs	r2, #132	; 0x84
 8000766:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000768:	a91a      	add	r1, sp, #104	; 0x68
 800076a:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800076c:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000770:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000774:	f003 fcca 	bl	800410c <HAL_ADCEx_InjectedConfigChannel>
 8000778:	b108      	cbz	r0, 800077e <main+0x17a>
 800077a:	b672      	cpsid	i
 800077c:	e7fe      	b.n	800077c <main+0x178>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800077e:	4b59      	ldr	r3, [pc, #356]	; (80008e4 <main+0x2e0>)
 8000780:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000782:	a91a      	add	r1, sp, #104	; 0x68
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000784:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000788:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800078a:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800078c:	f003 fcbe 	bl	800410c <HAL_ADCEx_InjectedConfigChannel>
 8000790:	b108      	cbz	r0, 8000796 <main+0x192>
 8000792:	b672      	cpsid	i
 8000794:	e7fe      	b.n	8000794 <main+0x190>
  sConfig.Channel = ADC_CHANNEL_1;
 8000796:	4954      	ldr	r1, [pc, #336]	; (80008e8 <main+0x2e4>)
 8000798:	9112      	str	r1, [sp, #72]	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079a:	2206      	movs	r2, #6
  sConfig.Offset = 0;
 800079c:	e9cd 6016 	strd	r6, r0, [sp, #88]	; 0x58
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a0:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	a912      	add	r1, sp, #72	; 0x48
 80007a4:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80007a6:	9614      	str	r6, [sp, #80]	; 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a8:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007aa:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	f003 fa7a 	bl	8003ca4 <HAL_ADC_ConfigChannel>
 80007b0:	b108      	cbz	r0, 80007b6 <main+0x1b2>
 80007b2:	b672      	cpsid	i
 80007b4:	e7fe      	b.n	80007b4 <main+0x1b0>
  sConfig.Channel = ADC_CHANNEL_5;
 80007b6:	4b4d      	ldr	r3, [pc, #308]	; (80008ec <main+0x2e8>)
 80007b8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007bc:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007c0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	f003 fa6f 	bl	8003ca4 <HAL_ADC_ConfigChannel>
 80007c6:	b108      	cbz	r0, 80007cc <main+0x1c8>
 80007c8:	b672      	cpsid	i
 80007ca:	e7fe      	b.n	80007ca <main+0x1c6>
  hadc2.Instance = ADC2;
 80007cc:	4c48      	ldr	r4, [pc, #288]	; (80008f0 <main+0x2ec>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007ce:	9001      	str	r0, [sp, #4]
 80007d0:	4601      	mov	r1, r0
 80007d2:	223c      	movs	r2, #60	; 0x3c
 80007d4:	a81a      	add	r0, sp, #104	; 0x68
 80007d6:	f009 f977 	bl	8009ac8 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	9b01      	ldr	r3, [sp, #4]
  hadc2.Instance = ADC2;
 80007dc:	4a45      	ldr	r2, [pc, #276]	; (80008f4 <main+0x2f0>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007de:	7723      	strb	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e0:	4620      	mov	r0, r4
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007e2:	e9c4 3a02 	strd	r3, sl, [r4, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007e6:	e9c4 3504 	strd	r3, r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007ea:	7763      	strb	r3, [r4, #29]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007fa:	f8c4 b004 	str.w	fp, [r4, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	61a6      	str	r6, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 8000800:	6225      	str	r5, [r4, #32]
  hadc2.Instance = ADC2;
 8000802:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000804:	f003 f940 	bl	8003a88 <HAL_ADC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	b108      	cbz	r0, 8000810 <main+0x20c>
 800080c:	b672      	cpsid	i
 800080e:	e7fe      	b.n	800080e <main+0x20a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000810:	2501      	movs	r5, #1
 8000812:	267f      	movs	r6, #127	; 0x7f
 8000814:	e9cd 561c 	strd	r5, r6, [sp, #112]	; 0x70
 8000818:	2504      	movs	r5, #4
 800081a:	2600      	movs	r6, #0
 800081c:	e9cd 561e 	strd	r5, r6, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000820:	a91a      	add	r1, sp, #104	; 0x68
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000822:	2584      	movs	r5, #132	; 0x84
 8000824:	2680      	movs	r6, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000826:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000828:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  sConfigInjected.InjectedNbrOfConversion = 2;
 800082c:	9722      	str	r7, [sp, #136]	; 0x88
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800082e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000832:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000836:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800083a:	e9cd 5624 	strd	r5, r6, [sp, #144]	; 0x90
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800083e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000842:	f003 fc63 	bl	800410c <HAL_ADCEx_InjectedConfigChannel>
 8000846:	b108      	cbz	r0, 800084c <main+0x248>
 8000848:	b672      	cpsid	i
 800084a:	e7fe      	b.n	800084a <main+0x246>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <main+0x2f4>)
 800084e:	931a      	str	r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000850:	f240 120f 	movw	r2, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000854:	4620      	mov	r0, r4
 8000856:	a91a      	add	r1, sp, #104	; 0x68
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000858:	921b      	str	r2, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800085a:	f003 fc57 	bl	800410c <HAL_ADCEx_InjectedConfigChannel>
 800085e:	b108      	cbz	r0, 8000864 <main+0x260>
 8000860:	b672      	cpsid	i
 8000862:	e7fe      	b.n	8000862 <main+0x25e>
  hcomp1.Instance = COMP1;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <main+0x2f8>)
 8000866:	4926      	ldr	r1, [pc, #152]	; (8000900 <main+0x2fc>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000868:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800086a:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800086e:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000872:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000876:	4618      	mov	r0, r3
  hcomp1.Instance = COMP1;
 8000878:	6019      	str	r1, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 800087a:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800087c:	f003 ff80 	bl	8004780 <HAL_COMP_Init>
 8000880:	b108      	cbz	r0, 8000886 <main+0x282>
 8000882:	b672      	cpsid	i
 8000884:	e7fe      	b.n	8000884 <main+0x280>
  hcomp2.Instance = COMP2;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <main+0x300>)
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <main+0x304>)
 800088a:	601a      	str	r2, [r3, #0]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800088c:	4618      	mov	r0, r3
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800088e:	2200      	movs	r2, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000890:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000894:	605a      	str	r2, [r3, #4]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000896:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800089a:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 800089e:	609c      	str	r4, [r3, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80008a0:	f003 ff6e 	bl	8004780 <HAL_COMP_Init>
 80008a4:	4602      	mov	r2, r0
 80008a6:	b108      	cbz	r0, 80008ac <main+0x2a8>
 80008a8:	b672      	cpsid	i
 80008aa:	e7fe      	b.n	80008aa <main+0x2a6>
  hcomp4.Instance = COMP4;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <main+0x308>)
 80008ae:	4918      	ldr	r1, [pc, #96]	; (8000910 <main+0x30c>)
 80008b0:	6019      	str	r1, [r3, #0]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80008b2:	e9c3 0401 	strd	r0, r4, [r3, #4]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80008b6:	4618      	mov	r0, r3
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008b8:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008bc:	e9c3 2205 	strd	r2, r2, [r3, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80008c0:	f003 ff5e 	bl	8004780 <HAL_COMP_Init>
 80008c4:	b340      	cbz	r0, 8000918 <main+0x314>
 80008c6:	b672      	cpsid	i
 80008c8:	e7fe      	b.n	80008c8 <main+0x2c4>
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800
 80008d4:	20000878 	.word	0x20000878
 80008d8:	10210000 	.word	0x10210000
 80008dc:	10110000 	.word	0x10110000
 80008e0:	48000400 	.word	0x48000400
 80008e4:	32601000 	.word	0x32601000
 80008e8:	04300002 	.word	0x04300002
 80008ec:	14f00020 	.word	0x14f00020
 80008f0:	20000700 	.word	0x20000700
 80008f4:	50000100 	.word	0x50000100
 80008f8:	cb8c0000 	.word	0xcb8c0000
 80008fc:	200007a8 	.word	0x200007a8
 8000900:	40010200 	.word	0x40010200
 8000904:	200009c0 	.word	0x200009c0
 8000908:	40010204 	.word	0x40010204
 800090c:	20000854 	.word	0x20000854
 8000910:	4001020c 	.word	0x4001020c
 8000914:	0c900008 	.word	0x0c900008
  hcordic.Instance = CORDIC;
 8000918:	4895      	ldr	r0, [pc, #596]	; (8000b70 <main+0x56c>)
 800091a:	4b96      	ldr	r3, [pc, #600]	; (8000b74 <main+0x570>)
 800091c:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800091e:	f003 ffd3 	bl	80048c8 <HAL_CORDIC_Init>
 8000922:	4602      	mov	r2, r0
 8000924:	b108      	cbz	r0, 800092a <main+0x326>
 8000926:	b672      	cpsid	i
 8000928:	e7fe      	b.n	8000928 <main+0x324>
  hopamp1.Instance = OPAMP1;
 800092a:	4b93      	ldr	r3, [pc, #588]	; (8000b78 <main+0x574>)
 800092c:	4993      	ldr	r1, [pc, #588]	; (8000b7c <main+0x578>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800092e:	6058      	str	r0, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000930:	2640      	movs	r6, #64	; 0x40
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000932:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000936:	f44f 4440 	mov.w	r4, #49152	; 0xc000
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800093a:	4618      	mov	r0, r3
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800093c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 800093e:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000940:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hopamp1.Instance = OPAMP1;
 8000944:	6019      	str	r1, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000946:	609e      	str	r6, [r3, #8]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000948:	e9c3 5409 	strd	r5, r4, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800094c:	f004 fc0a 	bl	8005164 <HAL_OPAMP_Init>
 8000950:	b108      	cbz	r0, 8000956 <main+0x352>
 8000952:	b672      	cpsid	i
 8000954:	e7fe      	b.n	8000954 <main+0x350>
  hopamp2.Instance = OPAMP2;
 8000956:	4b8a      	ldr	r3, [pc, #552]	; (8000b80 <main+0x57c>)
 8000958:	4a8a      	ldr	r2, [pc, #552]	; (8000b84 <main+0x580>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800095a:	6118      	str	r0, [r3, #16]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800095c:	e9c3 0601 	strd	r0, r6, [r3, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 8000960:	7518      	strb	r0, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000962:	6198      	str	r0, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000964:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000966:	4618      	mov	r0, r3
  hopamp2.Instance = OPAMP2;
 8000968:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800096a:	e9c3 5409 	strd	r5, r4, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800096e:	f004 fbf9 	bl	8005164 <HAL_OPAMP_Init>
 8000972:	4602      	mov	r2, r0
 8000974:	b108      	cbz	r0, 800097a <main+0x376>
 8000976:	b672      	cpsid	i
 8000978:	e7fe      	b.n	8000978 <main+0x374>
  hopamp3.Instance = OPAMP3;
 800097a:	4b83      	ldr	r3, [pc, #524]	; (8000b88 <main+0x584>)
 800097c:	4983      	ldr	r1, [pc, #524]	; (8000b8c <main+0x588>)
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800097e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000980:	e9c3 0601 	strd	r0, r6, [r3, #4]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000984:	4618      	mov	r0, r3
  hopamp3.Init.InternalOutput = ENABLE;
 8000986:	2601      	movs	r6, #1
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000988:	e9c3 420a 	strd	r4, r2, [r3, #40]	; 0x28
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800098c:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800098e:	625d      	str	r5, [r3, #36]	; 0x24
  hopamp3.Instance = OPAMP3;
 8000990:	6019      	str	r1, [r3, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8000992:	751e      	strb	r6, [r3, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000994:	f004 fbe6 	bl	8005164 <HAL_OPAMP_Init>
 8000998:	4604      	mov	r4, r0
 800099a:	b108      	cbz	r0, 80009a0 <main+0x39c>
 800099c:	b672      	cpsid	i
 800099e:	e7fe      	b.n	800099e <main+0x39a>
  htim1.Instance = TIM1;
 80009a0:	4d7b      	ldr	r5, [pc, #492]	; (8000b90 <main+0x58c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009a2:	900d      	str	r0, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a4:	4601      	mov	r1, r0
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	a81a      	add	r0, sp, #104	; 0x68
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009aa:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80009ae:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	9407      	str	r4, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009b4:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 80009ba:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80009be:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80009c2:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009c8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  htim1.Instance = TIM1;
 80009cc:	4f71      	ldr	r7, [pc, #452]	; (8000b94 <main+0x590>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ce:	f009 f87b 	bl	8009ac8 <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009d2:	2120      	movs	r1, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80009d4:	f640 3211 	movw	r2, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009d8:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009dc:	4628      	mov	r0, r5
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009de:	606c      	str	r4, [r5, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80009e0:	616e      	str	r6, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 80009e4:	602f      	str	r7, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80009e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009ea:	612b      	str	r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ec:	f005 fa32 	bl	8005e54 <HAL_TIM_Base_Init>
 80009f0:	b108      	cbz	r0, 80009f6 <main+0x3f2>
 80009f2:	b672      	cpsid	i
 80009f4:	e7fe      	b.n	80009f4 <main+0x3f0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f6:	4628      	mov	r0, r5
 80009f8:	f005 fb1e 	bl	8006038 <HAL_TIM_PWM_Init>
 80009fc:	b108      	cbz	r0, 8000a02 <main+0x3fe>
 80009fe:	b672      	cpsid	i
 8000a00:	e7fe      	b.n	8000a00 <main+0x3fc>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a02:	2310      	movs	r3, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a04:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a06:	a90d      	add	r1, sp, #52	; 0x34
 8000a08:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a0a:	930e      	str	r3, [sp, #56]	; 0x38
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a0c:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a0e:	f005 ff3b 	bl	8006888 <HAL_TIM_SlaveConfigSynchro>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b108      	cbz	r0, 8000a1a <main+0x416>
 8000a16:	b672      	cpsid	i
 8000a18:	e7fe      	b.n	8000a18 <main+0x414>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a1a:	2270      	movs	r2, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1c:	a907      	add	r1, sp, #28
 8000a1e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	e9cd 3308 	strd	r3, r3, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a24:	9207      	str	r2, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a26:	f006 f8b3 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	b108      	cbz	r0, 8000a30 <main+0x42c>
 8000a2c:	b672      	cpsid	i
 8000a2e:	e7fe      	b.n	8000a2e <main+0x42a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a30:	2402      	movs	r4, #2
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a32:	2601      	movs	r6, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a36:	4621      	mov	r1, r4
 8000a38:	aa0a      	add	r2, sp, #40	; 0x28
 8000a3a:	4855      	ldr	r0, [pc, #340]	; (8000b90 <main+0x58c>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a3c:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a3e:	e9cd 460a 	strd	r4, r6, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a42:	f006 f947 	bl	8006cd4 <HAL_TIMEx_ConfigBreakInput>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x448>
 8000a48:	b672      	cpsid	i
 8000a4a:	e7fe      	b.n	8000a4a <main+0x446>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a4c:	2504      	movs	r5, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a4e:	aa0a      	add	r2, sp, #40	; 0x28
 8000a50:	4621      	mov	r1, r4
 8000a52:	484f      	ldr	r0, [pc, #316]	; (8000b90 <main+0x58c>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a54:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a56:	f006 f93d 	bl	8006cd4 <HAL_TIMEx_ConfigBreakInput>
 8000a5a:	b108      	cbz	r0, 8000a60 <main+0x45c>
 8000a5c:	b672      	cpsid	i
 8000a5e:	e7fe      	b.n	8000a5e <main+0x45a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a60:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a62:	aa0a      	add	r2, sp, #40	; 0x28
 8000a64:	4621      	mov	r1, r4
 8000a66:	484a      	ldr	r0, [pc, #296]	; (8000b90 <main+0x58c>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a68:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a6a:	f006 f933 	bl	8006cd4 <HAL_TIMEx_ConfigBreakInput>
 8000a6e:	b108      	cbz	r0, 8000a74 <main+0x470>
 8000a70:	b672      	cpsid	i
 8000a72:	e7fe      	b.n	8000a72 <main+0x46e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a74:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	4602      	mov	r2, r0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a80:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	a912      	add	r1, sp, #72	; 0x48
 8000a86:	4842      	ldr	r0, [pc, #264]	; (8000b90 <main+0x58c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a88:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	f005 fc45 	bl	8006318 <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b108      	cbz	r0, 8000a96 <main+0x492>
 8000a92:	b672      	cpsid	i
 8000a94:	e7fe      	b.n	8000a94 <main+0x490>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a96:	462a      	mov	r2, r5
 8000a98:	a912      	add	r1, sp, #72	; 0x48
 8000a9a:	483d      	ldr	r0, [pc, #244]	; (8000b90 <main+0x58c>)
  sConfigOC.Pulse = 0;
 8000a9c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9e:	f005 fc3b 	bl	8006318 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x4a6>
 8000aa6:	b672      	cpsid	i
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x4a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	a912      	add	r1, sp, #72	; 0x48
 8000aae:	4838      	ldr	r0, [pc, #224]	; (8000b90 <main+0x58c>)
  sConfigOC.Pulse = 0;
 8000ab0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ab2:	f005 fc31 	bl	8006318 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	b108      	cbz	r0, 8000abc <main+0x4b8>
 8000ab8:	b672      	cpsid	i
 8000aba:	e7fe      	b.n	8000aba <main+0x4b6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000abc:	2370      	movs	r3, #112	; 0x70
  sConfigOC.Pulse = 0;
 8000abe:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac0:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	a912      	add	r1, sp, #72	; 0x48
 8000ac6:	4832      	ldr	r0, [pc, #200]	; (8000b90 <main+0x58c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ac8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aca:	f005 fc25 	bl	8006318 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	b108      	cbz	r0, 8000ad4 <main+0x4d0>
 8000ad0:	b672      	cpsid	i
 8000ad2:	e7fe      	b.n	8000ad2 <main+0x4ce>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae0:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ae2:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae6:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aea:	911a      	str	r1, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000aec:	2044      	movs	r0, #68	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000af2:	921b      	str	r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000af4:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000afe:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b00:	911f      	str	r1, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000b02:	2703      	movs	r7, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b04:	a91a      	add	r1, sp, #104	; 0x68
 8000b06:	4822      	ldr	r0, [pc, #136]	; (8000b90 <main+0x58c>)
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000b08:	9222      	str	r2, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000b0a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0e:	f006 f893 	bl	8006c38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b12:	4604      	mov	r4, r0
 8000b14:	b108      	cbz	r0, 8000b1a <main+0x516>
 8000b16:	b672      	cpsid	i
 8000b18:	e7fe      	b.n	8000b18 <main+0x514>
  htim4.Instance = TIM4;
 8000b1a:	4d1f      	ldr	r5, [pc, #124]	; (8000b98 <main+0x594>)
  HAL_TIM_MspPostInit(&htim1);
 8000b1c:	481c      	ldr	r0, [pc, #112]	; (8000b90 <main+0x58c>)
 8000b1e:	f002 f96b 	bl	8002df8 <HAL_TIM_MspPostInit>
  htim4.Init.Period = M1_PULSE_NBR;
 8000b22:	f240 138f 	movw	r3, #399	; 0x18f
  htim4.Instance = TIM4;
 8000b26:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <main+0x598>)
  htim4.Init.Period = M1_PULSE_NBR;
 8000b28:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b2a:	4628      	mov	r0, r5
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000b2c:	230c      	movs	r3, #12
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b2e:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000b30:	931e      	str	r3, [sp, #120]	; 0x78
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000b32:	9322      	str	r3, [sp, #136]	; 0x88
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b34:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000b3a:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b3c:	971a      	str	r7, [sp, #104]	; 0x68
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b3e:	961c      	str	r6, [sp, #112]	; 0x70
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b40:	9620      	str	r6, [sp, #128]	; 0x80
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	61ac      	str	r4, [r5, #24]
  htim4.Instance = TIM4;
 8000b4a:	602a      	str	r2, [r5, #0]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b4c:	941d      	str	r4, [sp, #116]	; 0x74
 8000b4e:	941f      	str	r4, [sp, #124]	; 0x7c
 8000b50:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b52:	f005 fb0f 	bl	8006174 <HAL_TIM_Encoder_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b108      	cbz	r0, 8000b5e <main+0x55a>
 8000b5a:	b672      	cpsid	i
 8000b5c:	e7fe      	b.n	8000b5c <main+0x558>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b5e:	4628      	mov	r0, r5
 8000b60:	a912      	add	r1, sp, #72	; 0x48
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	9312      	str	r3, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b66:	f006 f813 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	b1c8      	cbz	r0, 8000ba0 <main+0x59c>
 8000b6c:	b672      	cpsid	i
 8000b6e:	e7fe      	b.n	8000b6e <main+0x56a>
 8000b70:	200008e8 	.word	0x200008e8
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	20000818 	.word	0x20000818
 8000b7c:	40010300 	.word	0x40010300
 8000b80:	20000678 	.word	0x20000678
 8000b84:	40010304 	.word	0x40010304
 8000b88:	2000076c 	.word	0x2000076c
 8000b8c:	40010308 	.word	0x40010308
 8000b90:	20000974 	.word	0x20000974
 8000b94:	40012c00 	.word	0x40012c00
 8000b98:	200006b4 	.word	0x200006b4
 8000b9c:	40000800 	.word	0x40000800
  huart2.Instance = USART2;
 8000ba0:	4c89      	ldr	r4, [pc, #548]	; (8000dc8 <main+0x7c4>)
 8000ba2:	4b8a      	ldr	r3, [pc, #552]	; (8000dcc <main+0x7c8>)
 8000ba4:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000baa:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8000bac:	6063      	str	r3, [r4, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb0:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb2:	6162      	str	r2, [r4, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb8:	6123      	str	r3, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bba:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbe:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc4:	f006 f93e 	bl	8006e44 <HAL_UART_Init>
 8000bc8:	4601      	mov	r1, r0
 8000bca:	b108      	cbz	r0, 8000bd0 <main+0x5cc>
 8000bcc:	b672      	cpsid	i
 8000bce:	e7fe      	b.n	8000bce <main+0x5ca>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f006 fb7b 	bl	80072cc <HAL_UARTEx_SetTxFifoThreshold>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	b108      	cbz	r0, 8000bde <main+0x5da>
 8000bda:	b672      	cpsid	i
 8000bdc:	e7fe      	b.n	8000bdc <main+0x5d8>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	4620      	mov	r0, r4
 8000be0:	f006 fbc6 	bl	8007370 <HAL_UARTEx_SetRxFifoThreshold>
 8000be4:	b108      	cbz	r0, 8000bea <main+0x5e6>
 8000be6:	b672      	cpsid	i
 8000be8:	e7fe      	b.n	8000be8 <main+0x5e4>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bea:	4620      	mov	r0, r4
 8000bec:	f006 fb50 	bl	8007290 <HAL_UARTEx_DisableFifoMode>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	b108      	cbz	r0, 8000bf8 <main+0x5f4>
 8000bf4:	b672      	cpsid	i
 8000bf6:	e7fe      	b.n	8000bf6 <main+0x5f2>
  MX_MotorControl_Init();
 8000bf8:	f001 fba8 	bl	800234c <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 8000bfc:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <main+0x7cc>)
 8000bfe:	4975      	ldr	r1, [pc, #468]	; (8000dd4 <main+0x7d0>)
 8000c00:	6019      	str	r1, [r3, #0]
  hfdcan1.Init.NominalPrescaler = 20;
 8000c02:	2014      	movs	r0, #20
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000c04:	220e      	movs	r2, #14
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c06:	2102      	movs	r1, #2
  hfdcan1.Init.NominalPrescaler = 20;
 8000c08:	6158      	str	r0, [r3, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000c0a:	61da      	str	r2, [r3, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c0c:	4618      	mov	r0, r3
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c0e:	2201      	movs	r2, #1
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c10:	605c      	str	r4, [r3, #4]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c12:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c16:	741c      	strb	r4, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c18:	745c      	strb	r4, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c1a:	749c      	strb	r4, [r3, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c1c:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c20:	63dc      	str	r4, [r3, #60]	; 0x3c
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c22:	6219      	str	r1, [r3, #32]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c24:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c26:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c2a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c2e:	f003 fedb 	bl	80049e8 <HAL_FDCAN_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x634>
 8000c34:	b672      	cpsid	i
 8000c36:	e7fe      	b.n	8000c36 <main+0x632>
  htim2.Instance = TIM2;
 8000c38:	4c67      	ldr	r4, [pc, #412]	; (8000dd8 <main+0x7d4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	901a      	str	r0, [sp, #104]	; 0x68
  htim2.Instance = TIM2;
 8000c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 9999;
 8000c40:	f242 730f 	movw	r3, #9999	; 0x270f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c44:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 8000c48:	901d      	str	r0, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 8000c4e:	9014      	str	r0, [sp, #80]	; 0x50
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	61a0      	str	r0, [r4, #24]
  htim2.Init.Prescaler = 1700 - 1;
 8000c56:	f240 66a3 	movw	r6, #1699	; 0x6a3
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c5a:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8000c5c:	6022      	str	r2, [r4, #0]
  htim2.Init.Period = 9999;
 8000c5e:	60e3      	str	r3, [r4, #12]
  htim2.Init.Prescaler = 1700 - 1;
 8000c60:	6066      	str	r6, [r4, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c62:	f005 f8f7 	bl	8005e54 <HAL_TIM_Base_Init>
 8000c66:	b108      	cbz	r0, 8000c6c <main+0x668>
 8000c68:	b672      	cpsid	i
 8000c6a:	e7fe      	b.n	8000c6a <main+0x666>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c70:	a91a      	add	r1, sp, #104	; 0x68
 8000c72:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	951a      	str	r5, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c76:	f005 fd41 	bl	80066fc <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b108      	cbz	r0, 8000c82 <main+0x67e>
 8000c7e:	b672      	cpsid	i
 8000c80:	e7fe      	b.n	8000c80 <main+0x67c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c82:	4620      	mov	r0, r4
 8000c84:	a912      	add	r1, sp, #72	; 0x48
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	9312      	str	r3, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8a:	f005 ff81 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	b108      	cbz	r0, 8000c94 <main+0x690>
 8000c90:	b672      	cpsid	i
 8000c92:	e7fe      	b.n	8000c92 <main+0x68e>
  htim3.Instance = TIM3;
 8000c94:	4c51      	ldr	r4, [pc, #324]	; (8000ddc <main+0x7d8>)
 8000c96:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <main+0x7dc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 8000c9e:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim3.Init.Period = 999;
 8000ca6:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb0:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 1700 - 1;
 8000cb2:	6066      	str	r6, [r4, #4]
  htim3.Instance = TIM3;
 8000cb4:	6022      	str	r2, [r4, #0]
  htim3.Init.Period = 999;
 8000cb6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb8:	f005 f8cc 	bl	8005e54 <HAL_TIM_Base_Init>
 8000cbc:	b108      	cbz	r0, 8000cc2 <main+0x6be>
 8000cbe:	b672      	cpsid	i
 8000cc0:	e7fe      	b.n	8000cc0 <main+0x6bc>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc2:	a91a      	add	r1, sp, #104	; 0x68
 8000cc4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc6:	951a      	str	r5, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f005 fd18 	bl	80066fc <HAL_TIM_ConfigClockSource>
 8000ccc:	b108      	cbz	r0, 8000cd2 <main+0x6ce>
 8000cce:	b672      	cpsid	i
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x6cc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd4:	a912      	add	r1, sp, #72	; 0x48
 8000cd6:	4841      	ldr	r0, [pc, #260]	; (8000ddc <main+0x7d8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	9312      	str	r3, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cdc:	f005 ff58 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	b108      	cbz	r0, 8000ce8 <main+0x6e4>
 8000ce4:	b672      	cpsid	i
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x6e2>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2104      	movs	r1, #4
 8000cec:	2018      	movs	r0, #24
 8000cee:	f003 fe17 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000cf2:	2018      	movs	r0, #24
 8000cf4:	f003 fe4a 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	2019      	movs	r0, #25
 8000cfe:	f003 fe0f 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d02:	2019      	movs	r0, #25
 8000d04:	f003 fe42 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000d08:	4622      	mov	r2, r4
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	2012      	movs	r0, #18
 8000d0e:	f003 fe07 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d12:	2012      	movs	r0, #18
 8000d14:	f003 fe3a 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8000d18:	4622      	mov	r2, r4
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	201e      	movs	r0, #30
 8000d1e:	f003 fdff 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d22:	201e      	movs	r0, #30
 8000d24:	f003 fe32 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000d28:	4622      	mov	r2, r4
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	2017      	movs	r0, #23
 8000d2e:	f003 fdf7 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d32:	2017      	movs	r0, #23
 8000d34:	f003 fe2a 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	2026      	movs	r0, #38	; 0x26
 8000d3e:	f003 fdef 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d42:	2026      	movs	r0, #38	; 0x26
 8000d44:	f003 fe22 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000d48:	4622      	mov	r2, r4
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	2028      	movs	r0, #40	; 0x28
 8000d4e:	f003 fde7 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d52:	2028      	movs	r0, #40	; 0x28
 8000d54:	f003 fe1a 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 10, 0);
 8000d58:	4622      	mov	r2, r4
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	2015      	movs	r0, #21
 8000d5e:	f003 fddf 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d62:	2015      	movs	r0, #21
 8000d64:	f003 fe12 	bl	800498c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 10, 0);
 8000d68:	4622      	mov	r2, r4
 8000d6a:	210a      	movs	r1, #10
 8000d6c:	2016      	movs	r0, #22
 8000d6e:	f003 fdd7 	bl	8004920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000d72:	2016      	movs	r0, #22
 8000d74:	f003 fe0a 	bl	800498c <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4819      	ldr	r0, [pc, #100]	; (8000de4 <main+0x7e0>)
 8000d80:	f004 f9e0 	bl	8005144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8000d84:	4622      	mov	r2, r4
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <main+0x7e0>)
 8000d8a:	f004 f9db 	bl	8005144 <HAL_GPIO_WritePin>
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <main+0x7cc>)
 8000d90:	f003 ff1c 	bl	8004bcc <HAL_FDCAN_Start>
 8000d94:	4602      	mov	r2, r0
 8000d96:	b108      	cbz	r0, 8000d9c <main+0x798>
 8000d98:	b672      	cpsid	i
 8000d9a:	e7fe      	b.n	8000d9a <main+0x796>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <main+0x7cc>)
 8000da0:	f003 ffa4 	bl	8004cec <HAL_FDCAN_ActivateNotification>
 8000da4:	b108      	cbz	r0, 8000daa <main+0x7a6>
 8000da6:	b672      	cpsid	i
 8000da8:	e7fe      	b.n	8000da8 <main+0x7a4>
	PID_SetKP(&PID_PosParamsM1, 500);
 8000daa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <main+0x7e4>)
 8000db0:	f006 fdd0 	bl	8007954 <PID_SetKP>
	PID_SetKI(&PID_PosParamsM1, 100);
 8000db4:	2164      	movs	r1, #100	; 0x64
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <main+0x7e4>)
 8000db8:	f006 fdce 	bl	8007958 <PID_SetKI>
	PID_SetKD(&PID_PosParamsM1, 500);
 8000dbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <main+0x7e4>)
 8000dc2:	f006 fdd9 	bl	8007978 <PID_SetKD>
 8000dc6:	e7fe      	b.n	8000dc6 <main+0x7c2>
 8000dc8:	20000a30 	.word	0x20000a30
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	20000910 	.word	0x20000910
 8000dd4:	40006400 	.word	0x40006400
 8000dd8:	200009e4 	.word	0x200009e4
 8000ddc:	200007cc 	.word	0x200007cc
 8000de0:	40000400 	.word	0x40000400
 8000de4:	48000800 	.word	0x48000800
 8000de8:	20000448 	.word	0x20000448

08000dec <Start>:

}

/* USER CODE BEGIN 4 */
void Start() {
 8000dec:	b508      	push	{r3, lr}
	MC_StartMotor1();
 8000dee:	f000 f8cb 	bl	8000f88 <MC_StartMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_SET);
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <Start+0x1c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	f004 f9a4 	bl	8005144 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <Start+0x20>)
}
 8000dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 8000e02:	f005 b8c5 	b.w	8005f90 <HAL_TIM_Base_Start_IT>
 8000e06:	bf00      	nop
 8000e08:	48000800 	.word	0x48000800
 8000e0c:	200009e4 	.word	0x200009e4

08000e10 <Stop>:

void Stop() {
 8000e10:	b508      	push	{r3, lr}
	MC_StopMotor1();
 8000e12:	f000 f8bf 	bl	8000f94 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <Stop+0x1c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	f004 f992 	bl	8005144 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <Stop+0x20>)
}
 8000e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 8000e26:	f005 b8ed 	b.w	8006004 <HAL_TIM_Base_Stop_IT>
 8000e2a:	bf00      	nop
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	200009e4 	.word	0x200009e4

08000e34 <Motor_Init>:
			}
		}
	}
}

void Motor_Init() {
 8000e34:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <Motor_Init+0x38>)
 8000e38:	f005 f8e4 	bl	8006004 <HAL_TIM_Base_Stop_IT>
	if (MC_GetSTMStateMotor1() == FAULT_NOW
 8000e3c:	f000 f8bc 	bl	8000fb8 <MC_GetSTMStateMotor1>
 8000e40:	280a      	cmp	r0, #10
 8000e42:	d009      	beq.n	8000e58 <Motor_Init+0x24>
			|| MC_GetSTMStateMotor1() == FAULT_OVER) {
 8000e44:	f000 f8b8 	bl	8000fb8 <MC_GetSTMStateMotor1>
 8000e48:	280b      	cmp	r0, #11
 8000e4a:	d005      	beq.n	8000e58 <Motor_Init+0x24>
		if (MC_AcknowledgeFaultMotor1()) {
			errorID = nominal;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <Motor_Init+0x3c>)
 8000e4e:	2100      	movs	r1, #0
			motor_ready = true;
 8000e50:	2201      	movs	r2, #1
			errorID = nominal;
 8000e52:	7019      	strb	r1, [r3, #0]
			motor_ready = true;
 8000e54:	705a      	strb	r2, [r3, #1]
		}
	}else{
		errorID = nominal;
		motor_ready = true;
	}
}
 8000e56:	bd08      	pop	{r3, pc}
		if (MC_AcknowledgeFaultMotor1()) {
 8000e58:	f000 f8a8 	bl	8000fac <MC_AcknowledgeFaultMotor1>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d1f5      	bne.n	8000e4c <Motor_Init+0x18>
			errorID = fault_yet;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <Motor_Init+0x3c>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	b672      	cpsid	i
 8000e68:	e7fe      	b.n	8000e68 <Motor_Init+0x34>
 8000e6a:	bf00      	nop
 8000e6c:	200007cc 	.word	0x200007cc
 8000e70:	20000640 	.word	0x20000640

08000e74 <HAL_FDCAN_RxFifo0Callback>:
	if (hfdcan->Instance == hfdcan1.Instance) {
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HAL_FDCAN_RxFifo0Callback+0xc8>)
 8000e76:	6802      	ldr	r2, [r0, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d000      	beq.n	8000e80 <HAL_FDCAN_RxFifo0Callback+0xc>
 8000e7e:	4770      	bx	lr
		if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000e80:	07cb      	lsls	r3, r1, #31
 8000e82:	d5fc      	bpl.n	8000e7e <HAL_FDCAN_RxFifo0Callback+0xa>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000e84:	b510      	push	{r4, lr}
 8000e86:	ed2d 8b02 	vpush	{d8}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 8000e8c:	ab02      	add	r3, sp, #8
 8000e8e:	aa04      	add	r2, sp, #16
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	f003 feb3 	bl	8004bfc <HAL_FDCAN_GetRxMessage>
 8000e96:	4604      	mov	r4, r0
 8000e98:	b108      	cbz	r0, 8000e9e <HAL_FDCAN_RxFifo0Callback+0x2a>
 8000e9a:	b672      	cpsid	i
 8000e9c:	e7fe      	b.n	8000e9c <HAL_FDCAN_RxFifo0Callback+0x28>
			switch (RxHeader.Identifier) {
 8000e9e:	9b04      	ldr	r3, [sp, #16]
 8000ea0:	2b21      	cmp	r3, #33	; 0x21
 8000ea2:	d043      	beq.n	8000f2c <HAL_FDCAN_RxFifo0Callback+0xb8>
 8000ea4:	d919      	bls.n	8000eda <HAL_FDCAN_RxFifo0Callback+0x66>
 8000ea6:	2b22      	cmp	r3, #34	; 0x22
 8000ea8:	d00b      	beq.n	8000ec2 <HAL_FDCAN_RxFifo0Callback+0x4e>
 8000eaa:	f240 7277 	movw	r2, #1911	; 0x777
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d103      	bne.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
				Stop();
 8000eb2:	f7ff ffad 	bl	8000e10 <Stop>
				motor_ready = false;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8000eb8:	705c      	strb	r4, [r3, #1]
}
 8000eba:	b00e      	add	sp, #56	; 0x38
 8000ebc:	ecbd 8b02 	vpop	{d8}
 8000ec0:	bd10      	pop	{r4, pc}
				if (RxData[0]) {
 8000ec2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000ec6:	b3b3      	cbz	r3, 8000f36 <HAL_FDCAN_RxFifo0Callback+0xc2>
					if (motor_ready) {
 8000ec8:	4c1d      	ldr	r4, [pc, #116]	; (8000f40 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8000eca:	7863      	ldrb	r3, [r4, #1]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f4      	beq.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
						Start();
 8000ed0:	f7ff ff8c 	bl	8000dec <Start>
						heartbeat = true;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	70a3      	strb	r3, [r4, #2]
 8000ed8:	e7ef      	b.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
			switch (RxHeader.Identifier) {
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	d1ed      	bne.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
				memcpy(&refPosition, &RxData[0], 4);
 8000ede:	9b02      	ldr	r3, [sp, #8]
				if (plim < refPosition) {
 8000ee0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f44 <HAL_FDCAN_RxFifo0Callback+0xd0>
				memcpy(&refPosition, &RxData[0], 4);
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	ee07 3a90 	vmov	s15, r3
				if (plim < refPosition) {
 8000eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	dc06      	bgt.n	8000f02 <HAL_FDCAN_RxFifo0Callback+0x8e>
				}else if(refPosition < nlim){
 8000ef4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f48 <HAL_FDCAN_RxFifo0Callback+0xd4>
 8000ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f00:	d501      	bpl.n	8000f06 <HAL_FDCAN_RxFifo0Callback+0x92>
					refPosition = nlim;
 8000f02:	ed8d 7a01 	vstr	s14, [sp, #4]
				refPosition = refPosition * gRatio;
 8000f06:	ed9d 8a01 	vldr	s16, [sp, #4]
				val1 = refPosition;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000f0c:	ed83 8a00 	vstr	s16, [r3]
				if (MC_GetSTMStateMotor1() == RUN) {
 8000f10:	f000 f852 	bl	8000fb8 <MC_GetSTMStateMotor1>
 8000f14:	2806      	cmp	r0, #6
 8000f16:	d105      	bne.n	8000f24 <HAL_FDCAN_RxFifo0Callback+0xb0>
					MC_ProgramPositionCommandMotor1(refPosition, 0);
 8000f18:	eeb0 0a48 	vmov.f32	s0, s16
 8000f1c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8000f50 <HAL_FDCAN_RxFifo0Callback+0xdc>
 8000f20:	f000 f83e 	bl	8000fa0 <MC_ProgramPositionCommandMotor1>
				heartbeat = true;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	709a      	strb	r2, [r3, #2]
				break;
 8000f2a:	e7c6      	b.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
				Stop();
 8000f2c:	f7ff ff70 	bl	8000e10 <Stop>
				Motor_Init();
 8000f30:	f7ff ff80 	bl	8000e34 <Motor_Init>
				break;
 8000f34:	e7c1      	b.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
					Stop();
 8000f36:	f7ff ff6b 	bl	8000e10 <Stop>
 8000f3a:	e7be      	b.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x46>
 8000f3c:	20000910 	.word	0x20000910
 8000f40:	20000640 	.word	0x20000640
 8000f44:	41490fdb 	.word	0x41490fdb
 8000f48:	c1490fdb 	.word	0xc1490fdb
 8000f4c:	20000abc 	.word	0x20000abc
 8000f50:	00000000 	.word	0x00000000

08000f54 <HAL_TIM_PeriodElapsedCallback>:
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) {
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f56:	4298      	cmp	r0, r3
 8000f58:	d003      	beq.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0xe>
//			Error_Handler();
//		}
		heartbeat = false;
	}

	if (htim == &htim3) {
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	d006      	beq.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOC, STATUS_Pin);
	}
}
 8000f60:	4770      	bx	lr
		heartbeat = false;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	709a      	strb	r2, [r3, #2]
	if (htim == &htim3) {
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d1f8      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_GPIO_TogglePin(GPIOC, STATUS_Pin);
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f72:	f004 b8ed 	b.w	8005150 <HAL_GPIO_TogglePin>
 8000f76:	bf00      	nop
 8000f78:	200009e4 	.word	0x200009e4
 8000f7c:	200007cc 	.word	0x200007cc
 8000f80:	20000640 	.word	0x20000640
 8000f84:	48000800 	.word	0x48000800

08000f88 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000f88:	4b01      	ldr	r3, [pc, #4]	; (8000f90 <MC_StartMotor1+0x8>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f000 b886 	b.w	800109c <MCI_StartMotor>
 8000f90:	20000bb0 	.word	0x20000bb0

08000f94 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <MC_StopMotor1+0x8>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f000 b88a 	b.w	80010b0 <MCI_StopMotor>
 8000f9c:	20000bb0 	.word	0x20000bb0

08000fa0 <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1( float fTargetPosition, float fDuration )
{
	MCI_ExecPositionCommand( pMCI[M1], fTargetPosition, fDuration );
 8000fa0:	4b01      	ldr	r3, [pc, #4]	; (8000fa8 <MC_ProgramPositionCommandMotor1+0x8>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f000 b840 	b.w	8001028 <MCI_ExecPositionCommand>
 8000fa8:	20000bb0 	.word	0x20000bb0

08000fac <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <MC_AcknowledgeFaultMotor1+0x8>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	f000 b882 	b.w	80010b8 <MCI_FaultAcknowledged>
 8000fb4:	20000bb0 	.word	0x20000bb0

08000fb8 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000fb8:	4b01      	ldr	r3, [pc, #4]	; (8000fc0 <MC_GetSTMStateMotor1+0x8>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f000 b8be 	b.w	800113c <MCI_GetSTMState>
 8000fc0:	20000bb0 	.word	0x20000bb0

08000fc4 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars, PosCtrl_Handle_t * pPosCtrl )
{
 8000fc4:	b410      	push	{r4}
 8000fc6:	9c01      	ldr	r4, [sp, #4]
  pHandle->pSTM = pSTM;
 8000fc8:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
  pHandle->pPosCtrl = pPosCtrl;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000fca:	2100      	movs	r1, #0
  pHandle->pPosCtrl = pPosCtrl;
 8000fcc:	60c4      	str	r4, [r0, #12]
  pHandle->pFOCVars = pFOCVars;
 8000fce:	e9c0 2301 	strd	r2, r3, [r0, #4]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000fd2:	7401      	strb	r1, [r0, #16]
  pHandle->hFinalSpeed = 0;
 8000fd4:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000fd8:	8341      	strh	r1, [r0, #26]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000fda:	7701      	strb	r1, [r0, #28]
}
 8000fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000fe4:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8000fe6:	8241      	strh	r1, [r0, #18]
  pHandle->hDurationms = hDurationms;
 8000fe8:	8342      	strh	r2, [r0, #26]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000fea:	7403      	strb	r3, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000fec:	7703      	strb	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000fee:	7743      	strb	r3, [r0, #29]
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000ff4:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000ff6:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ff8:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ffa:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ffc:	7405      	strb	r5, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ffe:	7704      	strb	r4, [r0, #28]
  pHandle->hFinalTorque = hFinalTorque;
 8001000:	8281      	strh	r1, [r0, #20]
  pHandle->hDurationms = hDurationms;
 8001002:	8342      	strh	r2, [r0, #26]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001004:	7743      	strb	r3, [r0, #29]
}
 8001006:	bc30      	pop	{r4, r5}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800100c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800100e:	2201      	movs	r2, #1
{
 8001010:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001012:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001014:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 8001016:	f8c0 1016 	str.w	r1, [r0, #22]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800101a:	7404      	strb	r4, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800101c:	7702      	strb	r2, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 800101e:	7743      	strb	r3, [r0, #29]
}
 8001020:	b003      	add	sp, #12
 8001022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001026:	4770      	bx	lr

08001028 <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand( MCI_Handle_t * pHandle, float FinalPosition, float Duration )
{
 8001028:	b510      	push	{r4, lr}
 800102a:	4604      	mov	r4, r0
 800102c:	ed2d 8b02 	vpush	{d8}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001030:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001034:	2200      	movs	r2, #0
{
 8001036:	b082      	sub	sp, #8
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 800103c:	eeb0 8a60 	vmov.f32	s16, s1
 8001040:	eef0 8a40 	vmov.f32	s17, s0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001044:	f007 ff7a 	bl	8008f3c <STC_GetSpeedSensor>
 8001048:	f007 ff1e 	bl	8008e88 <SPD_GetMecAngle>
  if (Duration > 0) {
 800104c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001054:	9001      	str	r0, [sp, #4]
  if (Duration > 0) {
 8001056:	dd14      	ble.n	8001082 <MCI_ExecPositionCommand+0x5a>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001058:	ee07 0a90 	vmov	s15, r0
 800105c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001098 <MCI_ExecPositionCommand+0x70>
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001060:	68e0      	ldr	r0, [r4, #12]
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001066:	eeb0 1a48 	vmov.f32	s2, s16
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 800106a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 800106e:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8001072:	f008 f8e9 	bl	8009248 <TC_MoveCommand>
  } else {
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
  }

  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001076:	2300      	movs	r3, #0
 8001078:	7763      	strb	r3, [r4, #29]
}
 800107a:	b002      	add	sp, #8
 800107c:	ecbd 8b02 	vpop	{d8}
 8001080:	bd10      	pop	{r4, pc}
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8001082:	eeb0 0a68 	vmov.f32	s0, s17
 8001086:	68e0      	ldr	r0, [r4, #12]
 8001088:	f008 f94c 	bl	8009324 <TC_FollowCommand>
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 800108c:	2300      	movs	r3, #0
 800108e:	7763      	strb	r3, [r4, #29]
}
 8001090:	b002      	add	sp, #8
 8001092:	ecbd 8b02 	vpop	{d8}
 8001096:	bd10      	pop	{r4, pc}
 8001098:	4622f983 	.word	0x4622f983

0800109c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800109c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800109e:	2103      	movs	r1, #3
{
 80010a0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80010a2:	6800      	ldr	r0, [r0, #0]
 80010a4:	f008 f824 	bl	80090f0 <STM_NextState>

  if ( RetVal == true )
 80010a8:	b108      	cbz	r0, 80010ae <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010aa:	2301      	movs	r3, #1
 80010ac:	7723      	strb	r3, [r4, #28]
  }

  return RetVal;
}
 80010ae:	bd10      	pop	{r4, pc}

080010b0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80010b0:	6800      	ldr	r0, [r0, #0]
 80010b2:	2107      	movs	r1, #7
 80010b4:	f008 b81c 	b.w	80090f0 <STM_NextState>

080010b8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80010b8:	6800      	ldr	r0, [r0, #0]
 80010ba:	f008 b88f 	b.w	80091dc <STM_FaultAcknowledged>
 80010be:	bf00      	nop

080010c0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80010c0:	6800      	ldr	r0, [r0, #0]
 80010c2:	2101      	movs	r1, #1
 80010c4:	f008 b814 	b.w	80090f0 <STM_NextState>

080010c8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80010c8:	b110      	cbz	r0, 80010d0 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80010ca:	7f03      	ldrb	r3, [r0, #28]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d000      	beq.n	80010d2 <MCI_ExecBufferedCommands+0xa>
 80010d0:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 80010d2:	7c01      	ldrb	r1, [r0, #16]
 80010d4:	2902      	cmp	r1, #2
{
 80010d6:	b510      	push	{r4, lr}
 80010d8:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 80010da:	d01f      	beq.n	800111c <MCI_ExecBufferedCommands+0x54>
 80010dc:	2903      	cmp	r1, #3
 80010de:	d004      	beq.n	80010ea <MCI_ExecBufferedCommands+0x22>
 80010e0:	2901      	cmp	r1, #1
 80010e2:	d00b      	beq.n	80010fc <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80010e4:	2303      	movs	r3, #3
 80010e6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
}
 80010e8:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80010ea:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80010ec:	f8d0 1016 	ldr.w	r1, [r0, #22]
 80010f0:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80010f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80010f6:	2302      	movs	r3, #2
 80010f8:	7723      	strb	r3, [r4, #28]
}
 80010fa:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80010fc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001106:	f007 ff33 	bl	8008f70 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 800110a:	8b62      	ldrh	r2, [r4, #26]
 800110c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001110:	6860      	ldr	r0, [r4, #4]
 8001112:	f007 ff31 	bl	8008f78 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001116:	2800      	cmp	r0, #0
 8001118:	d0e4      	beq.n	80010e4 <MCI_ExecBufferedCommands+0x1c>
 800111a:	e7ec      	b.n	80010f6 <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800111c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001120:	2100      	movs	r1, #0
 8001122:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001126:	f007 ff23 	bl	8008f70 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 800112a:	8b62      	ldrh	r2, [r4, #26]
 800112c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8001130:	6860      	ldr	r0, [r4, #4]
 8001132:	f007 ff21 	bl	8008f78 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001136:	2800      	cmp	r0, #0
 8001138:	d0d4      	beq.n	80010e4 <MCI_ExecBufferedCommands+0x1c>
 800113a:	e7dc      	b.n	80010f6 <MCI_ExecBufferedCommands+0x2e>

0800113c <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 800113c:	6800      	ldr	r0, [r0, #0]
 800113e:	f008 b84b 	b.w	80091d8 <STM_GetState>
 8001142:	bf00      	nop

08001144 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001144:	7f40      	ldrb	r0, [r0, #29]
 8001146:	4770      	bx	lr

08001148 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001148:	7c03      	ldrb	r3, [r0, #16]
 800114a:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 800114c:	bf0c      	ite	eq
 800114e:	f9b0 0012 	ldrsheq.w	r0, [r0, #18]
  int16_t hRetVal = 0;
 8001152:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001158:	6840      	ldr	r0, [r0, #4]
 800115a:	f007 bf57 	b.w	800900c <STC_StopRamp>
 800115e:	bf00      	nop

08001160 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001160:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001162:	6840      	ldr	r0, [r0, #4]
 8001164:	f007 feea 	bl	8008f3c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 800116c:	f007 be8e 	b.w	8008e8c <SPD_GetAvrgMecSpeedUnit>

08001170 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001170:	6840      	ldr	r0, [r0, #4]
 8001172:	f007 beed 	b.w	8008f50 <STC_GetMecSpeedRefUnit>
 8001176:	bf00      	nop

08001178 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001178:	6883      	ldr	r3, [r0, #8]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	b283      	uxth	r3, r0
{
 800117e:	b082      	sub	sp, #8
}
 8001180:	f363 000f 	bfi	r0, r3, #0, #16
 8001184:	b002      	add	sp, #8
 8001186:	4770      	bx	lr

08001188 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001188:	6883      	ldr	r3, [r0, #8]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	b283      	uxth	r3, r0
{
 800118e:	b082      	sub	sp, #8
}
 8001190:	f363 000f 	bfi	r0, r3, #0, #16
 8001194:	b002      	add	sp, #8
 8001196:	4770      	bx	lr

08001198 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001198:	6883      	ldr	r3, [r0, #8]
 800119a:	68d8      	ldr	r0, [r3, #12]
 800119c:	b283      	uxth	r3, r0
{
 800119e:	b082      	sub	sp, #8
}
 80011a0:	f363 000f 	bfi	r0, r3, #0, #16
 80011a4:	b002      	add	sp, #8
 80011a6:	4770      	bx	lr

080011a8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80011a8:	6883      	ldr	r3, [r0, #8]
 80011aa:	6918      	ldr	r0, [r3, #16]
 80011ac:	b283      	uxth	r3, r0
{
 80011ae:	b082      	sub	sp, #8
}
 80011b0:	f363 000f 	bfi	r0, r3, #0, #16
 80011b4:	b002      	add	sp, #8
 80011b6:	4770      	bx	lr

080011b8 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80011b8:	6883      	ldr	r3, [r0, #8]
 80011ba:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80011be:	b283      	uxth	r3, r0
{
 80011c0:	b082      	sub	sp, #8
}
 80011c2:	f363 000f 	bfi	r0, r3, #0, #16
 80011c6:	b002      	add	sp, #8
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80011cc:	6883      	ldr	r3, [r0, #8]
 80011ce:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80011d2:	b283      	uxth	r3, r0
{
 80011d4:	b082      	sub	sp, #8
}
 80011d6:	f363 000f 	bfi	r0, r3, #0, #16
 80011da:	b002      	add	sp, #8
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80011e0:	6883      	ldr	r3, [r0, #8]
}
 80011e2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80011e6:	4770      	bx	lr

080011e8 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80011e8:	6883      	ldr	r3, [r0, #8]
 80011ea:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 80011ec:	8299      	strh	r1, [r3, #20]
}
 80011ee:	4770      	bx	lr

080011f0 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80011f0:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80011f2:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 80011f6:	f007 ff47 	bl	8009088 <STC_GetDefaultIqdref>
 80011fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80011fe:	8220      	strh	r0, [r4, #16]
 8001200:	8263      	strh	r3, [r4, #18]
}
 8001202:	bd10      	pop	{r4, pc}

08001204 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001204:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001208:	b202      	sxth	r2, r0
 800120a:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800120e:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001212:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001216:	4240      	negs	r0, r0
 8001218:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800121c:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 800121e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8001222:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8001224:	da04      	bge.n	8001230 <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001226:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800122a:	da0c      	bge.n	8001246 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MCM_Clarke+0x48>)
 800122e:	e001      	b.n	8001234 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8001230:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8001234:	b292      	uxth	r2, r2
 8001236:	2000      	movs	r0, #0
 8001238:	b29b      	uxth	r3, r3
 800123a:	f362 000f 	bfi	r0, r2, #0, #16
 800123e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001242:	b004      	add	sp, #16
 8001244:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001246:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8001248:	d1f4      	bne.n	8001234 <MCM_Clarke+0x30>
 800124a:	e7ef      	b.n	800122c <MCM_Clarke+0x28>
 800124c:	ffff8001 	.word	0xffff8001

08001250 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MCM_Trig_Functions+0x28>)
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <MCM_Trig_Functions+0x2c>)
 8001254:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8001256:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 800125a:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800125e:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001260:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8001262:	2000      	movs	r0, #0
 8001264:	b29a      	uxth	r2, r3
 8001266:	f362 000f 	bfi	r0, r2, #0, #16
 800126a:	0c1b      	lsrs	r3, r3, #16
{
 800126c:	b082      	sub	sp, #8
  return (CosSin.Components);
 800126e:	f363 401f 	bfi	r0, r3, #16, #16

}
 8001272:	b002      	add	sp, #8
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40020c00 	.word	0x40020c00
 800127c:	00600040 	.word	0x00600040

08001280 <MCM_Park>:
{
 8001280:	b530      	push	{r4, r5, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	b204      	sxth	r4, r0
 8001286:	9001      	str	r0, [sp, #4]
 8001288:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800128a:	4608      	mov	r0, r1
 800128c:	f7ff ffe0 	bl	8001250 <MCM_Trig_Functions>
 8001290:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001292:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001296:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001298:	fb05 3310 	mls	r3, r5, r0, r3
 800129c:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 800129e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a2:	da04      	bge.n	80012ae <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 80012a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80012a8:	da1e      	bge.n	80012e8 <MCM_Park+0x68>
    Output.q = -32767;
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <MCM_Park+0x70>)
 80012ac:	e001      	b.n	80012b2 <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 80012ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80012b2:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80012b6:	fb04 1000 	mla	r0, r4, r0, r1
 80012ba:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 80012bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80012c0:	da04      	bge.n	80012cc <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 80012c2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80012c6:	da0c      	bge.n	80012e2 <MCM_Park+0x62>
    Output.d = -32767;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MCM_Park+0x70>)
 80012ca:	e001      	b.n	80012d0 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 80012cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 80012d0:	b292      	uxth	r2, r2
 80012d2:	2000      	movs	r0, #0
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	f362 000f 	bfi	r0, r2, #0, #16
 80012da:	f363 401f 	bfi	r0, r3, #16, #16
}
 80012de:	b005      	add	sp, #20
 80012e0:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 80012e2:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 80012e4:	d1f4      	bne.n	80012d0 <MCM_Park+0x50>
 80012e6:	e7ef      	b.n	80012c8 <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 80012e8:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 80012ea:	d1e2      	bne.n	80012b2 <MCM_Park+0x32>
 80012ec:	e7dd      	b.n	80012aa <MCM_Park+0x2a>
 80012ee:	bf00      	nop
 80012f0:	ffff8001 	.word	0xffff8001

080012f4 <MCM_Rev_Park>:
{
 80012f4:	b530      	push	{r4, r5, lr}
 80012f6:	b085      	sub	sp, #20
 80012f8:	b204      	sxth	r4, r0
 80012fa:	1405      	asrs	r5, r0, #16
 80012fc:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80012fe:	4608      	mov	r0, r1
 8001300:	f7ff ffa6 	bl	8001250 <MCM_Trig_Functions>
 8001304:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001306:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800130a:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 800130c:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001310:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001314:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8001318:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 800131c:	2000      	movs	r0, #0
 800131e:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001322:	f362 000f 	bfi	r0, r2, #0, #16
 8001326:	f363 401f 	bfi	r0, r3, #16, #16
}
 800132a:	b005      	add	sp, #20
 800132c:	bd30      	pop	{r4, r5, pc}
 800132e:	bf00      	nop

08001330 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001332:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <FOC_Clear+0x68>)
 8001338:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2400      	movs	r4, #0
 8001340:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8001342:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8001346:	509c      	str	r4, [r3, r2]
{
 8001348:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 800134a:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 800134e:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8001350:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001352:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8001356:	50b4      	str	r4, [r6, r2]
 8001358:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800135a:	4810      	ldr	r0, [pc, #64]	; (800139c <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 800135c:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 800135e:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001360:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001362:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001366:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001368:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 800136a:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 800136c:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800136e:	f006 fafd 	bl	800796c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <FOC_Clear+0x70>)
 8001374:	4621      	mov	r1, r4
 8001376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800137a:	f006 faf7 	bl	800796c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <FOC_Clear+0x74>)
 8001380:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001384:	f007 fddc 	bl	8008f40 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <FOC_Clear+0x78>)
 800138a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800138e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001392:	f006 bcf9 	b.w	8007d88 <PWMC_SwitchOffPWM>
 8001396:	bf00      	nop
 8001398:	20000af0 	.word	0x20000af0
 800139c:	20000ae0 	.word	0x20000ae0
 80013a0:	20000ba8 	.word	0x20000ba8
 80013a4:	20000bac 	.word	0x20000bac
 80013a8:	20000ad4 	.word	0x20000ad4

080013ac <MCboot>:
{
 80013ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b0:	b089      	sub	sp, #36	; 0x24
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80013b2:	4c6f      	ldr	r4, [pc, #444]	; (8001570 <MCboot+0x1c4>)
{
 80013b4:	9003      	str	r0, [sp, #12]
  STM_Init(&STM[M1]);
 80013b6:	486f      	ldr	r0, [pc, #444]	; (8001574 <MCboot+0x1c8>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 80013b8:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80015d8 <MCboot+0x22c>
{
 80013bc:	9104      	str	r1, [sp, #16]
  STM_Init(&STM[M1]);
 80013be:	f007 fe77 	bl	80090b0 <STM_Init>
  bMCBootCompleted = 0;
 80013c2:	496d      	ldr	r1, [pc, #436]	; (8001578 <MCboot+0x1cc>)
  pCLM[M1] = &CircleLimitationM1;
 80013c4:	4b6d      	ldr	r3, [pc, #436]	; (800157c <MCboot+0x1d0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80013c6:	486e      	ldr	r0, [pc, #440]	; (8001580 <MCboot+0x1d4>)
  pCLM[M1] = &CircleLimitationM1;
 80013c8:	4a6e      	ldr	r2, [pc, #440]	; (8001584 <MCboot+0x1d8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80013ca:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 80013cc:	2400      	movs	r4, #0
  ENC_Init (&ENCODER_M1);
 80013ce:	f8df a20c 	ldr.w	sl, [pc, #524]	; 80015dc <MCboot+0x230>
  bMCBootCompleted = 0;
 80013d2:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 80013d4:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 80013d6:	f007 f80d 	bl	80083f4 <R3_2_Init>
  startTimers();
 80013da:	f006 fb6d 	bl	8007ab8 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80013de:	4658      	mov	r0, fp
 80013e0:	f006 fab0 	bl	8007944 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80013e4:	4d68      	ldr	r5, [pc, #416]	; (8001588 <MCboot+0x1dc>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80013e6:	4f69      	ldr	r7, [pc, #420]	; (800158c <MCboot+0x1e0>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80013e8:	4b69      	ldr	r3, [pc, #420]	; (8001590 <MCboot+0x1e4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80013ea:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80015e0 <MCboot+0x234>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80013ee:	f8c3 b000 	str.w	fp, [r3]
  ENC_Init (&ENCODER_M1);
 80013f2:	4650      	mov	r0, sl
  pSTC[M1] = &SpeednTorqCtrlM1;
 80013f4:	f8c5 8000 	str.w	r8, [r5]
  ENC_Init (&ENCODER_M1);
 80013f8:	f006 f894 	bl	8007524 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80013fc:	6829      	ldr	r1, [r5, #0]
 80013fe:	4865      	ldr	r0, [pc, #404]	; (8001594 <MCboot+0x1e8>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 8001400:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80015e4 <MCboot+0x238>
  PID_HandleInit(&PIDIqHandle_M1);
 8001404:	4e64      	ldr	r6, [pc, #400]	; (8001598 <MCboot+0x1ec>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001406:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 80015e8 <MCboot+0x23c>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800140a:	4653      	mov	r3, sl
 800140c:	463a      	mov	r2, r7
 800140e:	f006 f839 	bl	8007484 <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <MCboot+0x1f0>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 8001414:	4862      	ldr	r0, [pc, #392]	; (80015a0 <MCboot+0x1f4>)
  pEAC[M1] = &EncAlignCtrlM1;
 8001416:	4a5f      	ldr	r2, [pc, #380]	; (8001594 <MCboot+0x1e8>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 8001418:	f8c9 0000 	str.w	r0, [r9]
  pEAC[M1] = &EncAlignCtrlM1;
 800141c:	601a      	str	r2, [r3, #0]
  PID_HandleInit(pPIDPosCtrl[M1]);
 800141e:	f006 fa91 	bl	8007944 <PID_HandleInit>
  pPosCtrl[M1] = &pPosCtrlM1;
 8001422:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <MCboot+0x1f8>)
 8001424:	4860      	ldr	r0, [pc, #384]	; (80015a8 <MCboot+0x1fc>)
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 8001426:	f8d9 1000 	ldr.w	r1, [r9]
  pPosCtrl[M1] = &pPosCtrlM1;
 800142a:	6010      	str	r0, [r2, #0]
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 800142c:	4653      	mov	r3, sl
 800142e:	4642      	mov	r2, r8
 8001430:	f007 fee6 	bl	8009200 <TC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001434:	4b56      	ldr	r3, [pc, #344]	; (8001590 <MCboot+0x1e4>)
 8001436:	6828      	ldr	r0, [r5, #0]
 8001438:	6819      	ldr	r1, [r3, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800143a:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80015ec <MCboot+0x240>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800143e:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80015f0 <MCboot+0x244>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001442:	4652      	mov	r2, sl
 8001444:	f007 fd64 	bl	8008f10 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8001448:	4638      	mov	r0, r7
 800144a:	f008 faab 	bl	80099a4 <VSS_Init>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800144e:	4f57      	ldr	r7, [pc, #348]	; (80015ac <MCboot+0x200>)
  PID_HandleInit(&PIDIqHandle_M1);
 8001450:	4630      	mov	r0, r6
 8001452:	f006 fa77 	bl	8007944 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001456:	4856      	ldr	r0, [pc, #344]	; (80015b0 <MCboot+0x204>)
 8001458:	f006 fa74 	bl	8007944 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800145c:	603e      	str	r6, [r7, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 800145e:	4e55      	ldr	r6, [pc, #340]	; (80015b4 <MCboot+0x208>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <MCboot+0x20c>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001462:	4f53      	ldr	r7, [pc, #332]	; (80015b0 <MCboot+0x204>)
 8001464:	6037      	str	r7, [r6, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001466:	4f55      	ldr	r7, [pc, #340]	; (80015bc <MCboot+0x210>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8001468:	4e4e      	ldr	r6, [pc, #312]	; (80015a4 <MCboot+0x1f8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800146a:	603b      	str	r3, [r7, #0]
  RVBS_Init(pBusSensorM1);
 800146c:	4618      	mov	r0, r3
 800146e:	f007 fcb1 	bl	8008dd4 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <MCboot+0x214>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001474:	683a      	ldr	r2, [r7, #0]
  NTC_Init(&TempSensorParamsM1);
 8001476:	4853      	ldr	r0, [pc, #332]	; (80015c4 <MCboot+0x218>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001478:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800147c:	f8cb 3000 	str.w	r3, [fp]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001480:	f8c3 810c 	str.w	r8, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001484:	f006 fa18 	bl	80078b8 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <MCboot+0x21c>)
 800148a:	4a50      	ldr	r2, [pc, #320]	; (80015cc <MCboot+0x220>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800148c:	484d      	ldr	r0, [pc, #308]	; (80015c4 <MCboot+0x218>)
 800148e:	f8c9 0000 	str.w	r0, [r9]
  REMNG_Init(pREMNG[M1]);
 8001492:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001494:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001496:	2701      	movs	r7, #1
  REMNG_Init(pREMNG[M1]);
 8001498:	f007 fcea 	bl	8008e70 <REMNG_Init>
  FOC_Clear(M1);
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff47 	bl	8001330 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80014a2:	f888 7024 	strb.w	r7, [r8, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80014a6:	6828      	ldr	r0, [r5, #0]
 80014a8:	f007 fdee 	bl	8009088 <STC_GetDefaultIqdref>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80014b2:	f8a8 3010 	strh.w	r3, [r8, #16]
 80014b6:	f8a8 2012 	strh.w	r2, [r8, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80014ba:	6828      	ldr	r0, [r5, #0]
 80014bc:	f007 fde4 	bl	8009088 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 80014c0:	f8df c130 	ldr.w	ip, [pc, #304]	; 80015f4 <MCboot+0x248>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80014c4:	6833      	ldr	r3, [r6, #0]
  oMCInterface[M1] = & Mci[M1];
 80014c6:	4e42      	ldr	r6, [pc, #264]	; (80015d0 <MCboot+0x224>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80014c8:	682a      	ldr	r2, [r5, #0]
 80014ca:	492a      	ldr	r1, [pc, #168]	; (8001574 <MCboot+0x1c8>)
 80014cc:	9300      	str	r3, [sp, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80014ce:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80014d2:	4643      	mov	r3, r8
  oMCInterface[M1] = & Mci[M1];
 80014d4:	f8c6 c000 	str.w	ip, [r6]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80014d8:	f8a8 0014 	strh.w	r0, [r8, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80014dc:	4660      	mov	r0, ip
 80014de:	f7ff fd71 	bl	8000fc4 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80014e2:	6828      	ldr	r0, [r5, #0]
 80014e4:	f8d6 8000 	ldr.w	r8, [r6]
 80014e8:	f007 fdc4 	bl	8009074 <STC_GetMecSpeedRefUnitDefault>
 80014ec:	4622      	mov	r2, r4
 80014ee:	4601      	mov	r1, r0
 80014f0:	4640      	mov	r0, r8
 80014f2:	f7ff fd77 	bl	8000fe4 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80014f6:	4a26      	ldr	r2, [pc, #152]	; (8001590 <MCboot+0x1e4>)
  pMCIList[M1] = oMCInterface[M1];
 80014f8:	6830      	ldr	r0, [r6, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80014fa:	f8d2 c000 	ldr.w	ip, [r2]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80014fe:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <MCboot+0x200>)
  pMCIList[M1] = oMCInterface[M1];
 8001500:	9002      	str	r0, [sp, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001502:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001504:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <MCboot+0x208>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <MCboot+0x228>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001508:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <MCboot+0x1c4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800150c:	f8db 8000 	ldr.w	r8, [fp]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001510:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001512:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001514:	f8d9 5000 	ldr.w	r5, [r9]
 8001518:	9505      	str	r5, [sp, #20]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800151a:	4d28      	ldr	r5, [pc, #160]	; (80015bc <MCboot+0x210>)
 800151c:	f8d5 e000 	ldr.w	lr, [r5]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 8001520:	4d20      	ldr	r5, [pc, #128]	; (80015a4 <MCboot+0x1f8>)
 8001522:	f8d5 9000 	ldr.w	r9, [r5]
  pMCIList[M1] = oMCInterface[M1];
 8001526:	9d03      	ldr	r5, [sp, #12]
 8001528:	46ab      	mov	fp, r5
 800152a:	9d02      	ldr	r5, [sp, #8]
 800152c:	f8cb 5000 	str.w	r5, [fp]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001532:	9a05      	ldr	r2, [sp, #20]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001534:	6119      	str	r1, [r3, #16]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001536:	e9c3 2e0b 	strd	r2, lr, [r3, #44]	; 0x2c
  MCT[M1].pStateMachine = &STM[M1];
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <MCboot+0x1c8>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pPIDIq = pPIDIq[M1];
 800153e:	e9c3 c600 	strd	ip, r6, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8001542:	6098      	str	r0, [r3, #8]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001544:	f8c3 803c 	str.w	r8, [r3, #60]	; 0x3c
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 8001548:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800154c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 800154e:	e9c3 4a05 	strd	r4, sl, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001552:	e9c3 4407 	strd	r4, r4, [r3, #28]
  bMCBootCompleted = 1;
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <MCboot+0x1cc>)
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001558:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  pMCTList[M1] = &MCT[M1];
 800155c:	9a04      	ldr	r2, [sp, #16]
  MCT[M1].pFF = MC_NULL;
 800155e:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pOTT = MC_NULL;
 8001562:	e9c3 4413 	strd	r4, r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8001566:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8001568:	700f      	strb	r7, [r1, #0]
}
 800156a:	b009      	add	sp, #36	; 0x24
 800156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001570:	20000ad4 	.word	0x20000ad4
 8001574:	20000b98 	.word	0x20000b98
 8001578:	2000065c 	.word	0x2000065c
 800157c:	20000b70 	.word	0x20000b70
 8001580:	20000328 	.word	0x20000328
 8001584:	2000013c 	.word	0x2000013c
 8001588:	20000bac 	.word	0x20000bac
 800158c:	200002f0 	.word	0x200002f0
 8001590:	20000ad8 	.word	0x20000ad8
 8001594:	20000258 	.word	0x20000258
 8001598:	200004a0 	.word	0x200004a0
 800159c:	20000adc 	.word	0x20000adc
 80015a0:	20000448 	.word	0x20000448
 80015a4:	20000b6c 	.word	0x20000b6c
 80015a8:	200003d8 	.word	0x200003d8
 80015ac:	20000ae0 	.word	0x20000ae0
 80015b0:	20000474 	.word	0x20000474
 80015b4:	20000ba8 	.word	0x20000ba8
 80015b8:	20000208 	.word	0x20000208
 80015bc:	20000b74 	.word	0x20000b74
 80015c0:	200004fc 	.word	0x200004fc
 80015c4:	20000230 	.word	0x20000230
 80015c8:	200001f0 	.word	0x200001f0
 80015cc:	20000ba0 	.word	0x20000ba0
 80015d0:	20000ae4 	.word	0x20000ae4
 80015d4:	20000b18 	.word	0x20000b18
 80015d8:	200004cc 	.word	0x200004cc
 80015dc:	20000274 	.word	0x20000274
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	20000ae8 	.word	0x20000ae8
 80015e8:	20000ba4 	.word	0x20000ba4
 80015ec:	20000af0 	.word	0x20000af0
 80015f0:	20000ad0 	.word	0x20000ad0
 80015f4:	20000b78 	.word	0x20000b78

080015f8 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop

080015fc <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <FOC_CalcCurrRef+0x24>)
{
 80015fe:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001600:	2426      	movs	r4, #38	; 0x26
 8001602:	fb04 3400 	mla	r4, r4, r0, r3
 8001606:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800160a:	b103      	cbz	r3, 800160e <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800160c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <FOC_CalcCurrRef+0x28>)
 8001610:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001614:	f007 fcfe 	bl	8009014 <STC_CalcTorqueReference>
 8001618:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800161a:	8220      	strh	r0, [r4, #16]
}
 800161c:	bd10      	pop	{r4, pc}
 800161e:	bf00      	nop
 8001620:	20000af0 	.word	0x20000af0
 8001624:	20000bac 	.word	0x20000bac

08001628 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001628:	4b01      	ldr	r3, [pc, #4]	; (8001630 <TSK_SetChargeBootCapDelayM1+0x8>)
 800162a:	8058      	strh	r0, [r3, #2]
}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000065c 	.word	0x2000065c

08001634 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001636:	8858      	ldrh	r0, [r3, #2]
 8001638:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800163a:	fab0 f080 	clz	r0, r0
 800163e:	0940      	lsrs	r0, r0, #5
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000065c 	.word	0x2000065c

08001648 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001648:	4b01      	ldr	r3, [pc, #4]	; (8001650 <TSK_SetStopPermanencyTimeM1+0x8>)
 800164a:	8098      	strh	r0, [r3, #4]
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000065c 	.word	0x2000065c

08001654 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001656:	8898      	ldrh	r0, [r3, #4]
 8001658:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800165a:	fab0 f080 	clz	r0, r0
 800165e:	0940      	lsrs	r0, r0, #5
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000065c 	.word	0x2000065c

08001668 <TSK_MediumFrequencyTaskM1>:
{
 8001668:	b510      	push	{r4, lr}
 800166a:	b082      	sub	sp, #8
  int16_t wAux = 0;
 800166c:	a902      	add	r1, sp, #8
 800166e:	2300      	movs	r3, #0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001670:	4c90      	ldr	r4, [pc, #576]	; (80018b4 <TSK_MediumFrequencyTaskM1+0x24c>)
  int16_t wAux = 0;
 8001672:	f821 3d02 	strh.w	r3, [r1, #-2]!
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001676:	4890      	ldr	r0, [pc, #576]	; (80018b8 <TSK_MediumFrequencyTaskM1+0x250>)
 8001678:	f005 ffc4 	bl	8007604 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	f006 f9e5 	bl	8007a4c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001682:	488e      	ldr	r0, [pc, #568]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001684:	f007 fda8 	bl	80091d8 <STM_GetState>
  switch ( StateM1 )
 8001688:	2812      	cmp	r0, #18
 800168a:	d818      	bhi.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
 800168c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001690:	0038002a 	.word	0x0038002a
 8001694:	00530044 	.word	0x00530044
 8001698:	006b0062 	.word	0x006b0062
 800169c:	008a007e 	.word	0x008a007e
 80016a0:	0013009d 	.word	0x0013009d
 80016a4:	00170017 	.word	0x00170017
 80016a8:	00a70017 	.word	0x00a70017
 80016ac:	00c300b6 	.word	0x00c300b6
 80016b0:	00e600d7 	.word	0x00e600d7
 80016b4:	0019      	.short	0x0019
    STM_NextState( &STM[M1], IDLE );
 80016b6:	2100      	movs	r1, #0
 80016b8:	4880      	ldr	r0, [pc, #512]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80016ba:	f007 fd19 	bl	80090f0 <STM_NextState>
}
 80016be:	b002      	add	sp, #8
 80016c0:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 80016c2:	487d      	ldr	r0, [pc, #500]	; (80018b8 <TSK_MediumFrequencyTaskM1+0x250>)
 80016c4:	f005 ff6c 	bl	80075a0 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80016c8:	2104      	movs	r1, #4
 80016ca:	487c      	ldr	r0, [pc, #496]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80016cc:	f007 fd10 	bl	80090f0 <STM_NextState>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d0f4      	beq.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
      FOC_Clear( M1 );
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fe2b 	bl	8001330 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	f006 fd69 	bl	80081b4 <R3_2_SwitchOnPWM>
 80016e2:	e7ec      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80016e4:	4877      	ldr	r0, [pc, #476]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x25c>)
 80016e6:	f005 ff1b 	bl	8007520 <EAC_GetRestartState>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d0e7      	beq.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 80016ee:	2100      	movs	r1, #0
 80016f0:	4874      	ldr	r0, [pc, #464]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x25c>)
 80016f2:	f005 ff13 	bl	800751c <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80016f6:	2103      	movs	r1, #3
 80016f8:	4870      	ldr	r0, [pc, #448]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80016fa:	f007 fcf9 	bl	80090f0 <STM_NextState>
 80016fe:	e7de      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001700:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f006 fd2e 	bl	8008164 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001708:	2014      	movs	r0, #20
 800170a:	f7ff ff8d 	bl	8001628 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 800170e:	210d      	movs	r1, #13
 8001710:	486a      	ldr	r0, [pc, #424]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001712:	f007 fced 	bl	80090f0 <STM_NextState>
    break;
 8001716:	e7d2      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 8001718:	486a      	ldr	r0, [pc, #424]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x25c>)
 800171a:	f005 fee5 	bl	80074e8 <EAC_Exec>
 800171e:	4604      	mov	r4, r0
 8001720:	2800      	cmp	r0, #0
 8001722:	f040 80b4 	bne.w	800188e <TSK_MediumFrequencyTaskM1+0x226>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x260>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	f007 fc73 	bl	8009014 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 800172e:	4b67      	ldr	r3, [pc, #412]	; (80018cc <TSK_MediumFrequencyTaskM1+0x264>)
 8001730:	8258      	strh	r0, [r3, #18]
 8001732:	821c      	strh	r4, [r3, #16]
 8001734:	e7c3      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8001736:	4863      	ldr	r0, [pc, #396]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001738:	f005 feee 	bl	8007518 <EAC_IsAligned>
 800173c:	2800      	cmp	r0, #0
 800173e:	f040 809a 	bne.w	8001876 <TSK_MediumFrequencyTaskM1+0x20e>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8001742:	2101      	movs	r1, #1
 8001744:	485f      	ldr	r0, [pc, #380]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001746:	f005 fee9 	bl	800751c <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 800174a:	2101      	movs	r1, #1
 800174c:	485b      	ldr	r0, [pc, #364]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 800174e:	f007 fccf 	bl	80090f0 <STM_NextState>
      break;
 8001752:	e7b4      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
        TC_EncAlignmentCommand(pPosCtrl[M1]);
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <TSK_MediumFrequencyTaskM1+0x268>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f007 fef0 	bl	800953c <TC_EncAlignmentCommand>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 800175c:	2105      	movs	r1, #5
 800175e:	4857      	ldr	r0, [pc, #348]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001760:	f007 fcc6 	bl	80090f0 <STM_NextState>
    break;
 8001764:	e7ab      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
	  FOC_InitAdditionalMethods(M1);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ff46 	bl	80015f8 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ff45 	bl	80015fc <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001772:	2106      	movs	r1, #6
 8001774:	4851      	ldr	r0, [pc, #324]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001776:	f007 fcbb 	bl	80090f0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x260>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f007 fc8f 	bl	80090a0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001782:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f7ff fc9f 	bl	80010c8 <MCI_ExecBufferedCommands>
    break;
 800178a:	e798      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    TC_PositionRegulation(pPosCtrl[M1]);
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <TSK_MediumFrequencyTaskM1+0x268>)
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	f007 fe0c 	bl	80093ac <TC_PositionRegulation>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	f7ff fc96 	bl	80010c8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff ff2d 	bl	80015fc <FOC_CalcCurrRef>
    break;
 80017a2:	e78c      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80017a4:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	f006 fd4c 	bl	8008244 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff fdbf 	bl	8001330 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80017b2:	6820      	ldr	r0, [r4, #0]
 80017b4:	f006 f840 	bl	8007838 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80017b8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80017bc:	f7ff ff44 	bl	8001648 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80017c0:	2108      	movs	r1, #8
 80017c2:	483e      	ldr	r0, [pc, #248]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80017c4:	f007 fc94 	bl	80090f0 <STM_NextState>
    break;
 80017c8:	e779      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80017ca:	f7ff ff43 	bl	8001654 <TSK_StopPermanencyTimeHasElapsedM1>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	f43f af75 	beq.w	80016be <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], STOP_IDLE );
 80017d4:	2109      	movs	r1, #9
 80017d6:	4839      	ldr	r0, [pc, #228]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80017d8:	f007 fc8a 	bl	80090f0 <STM_NextState>
 80017dc:	e76f      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80017de:	f7ff ff29 	bl	8001634 <TSK_ChargeBootCapDelayHasElapsedM1>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	f43f af6b 	beq.w	80016be <TSK_MediumFrequencyTaskM1+0x56>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	f006 facd 	bl	8007d8c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80017f2:	210e      	movs	r1, #14
 80017f4:	4831      	ldr	r0, [pc, #196]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80017f6:	f007 fc7b 	bl	80090f0 <STM_NextState>
 80017fa:	e760      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 80017fe:	2101      	movs	r1, #1
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f006 fac3 	bl	8007d8c <PWMC_CurrentReadingCalibr>
 8001806:	2800      	cmp	r0, #0
 8001808:	f43f af59 	beq.w	80016be <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 800180c:	210f      	movs	r1, #15
 800180e:	482b      	ldr	r0, [pc, #172]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001810:	f007 fc6e 	bl	80090f0 <STM_NextState>
 8001814:	e753      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x260>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <TSK_MediumFrequencyTaskM1+0x264>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800181a:	6810      	ldr	r0, [r2, #0]
 800181c:	492e      	ldr	r1, [pc, #184]	; (80018d8 <TSK_MediumFrequencyTaskM1+0x270>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001824:	f007 fb88 	bl	8008f38 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 8001828:	4826      	ldr	r0, [pc, #152]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x25c>)
 800182a:	f005 fe35 	bl	8007498 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 800182e:	2102      	movs	r1, #2
 8001830:	4822      	ldr	r0, [pc, #136]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001832:	f007 fc5d 	bl	80090f0 <STM_NextState>
 8001836:	2800      	cmp	r0, #0
 8001838:	f43f af41 	beq.w	80016be <TSK_MediumFrequencyTaskM1+0x56>
 800183c:	e74a      	b.n	80016d4 <TSK_MediumFrequencyTaskM1+0x6c>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800183e:	f7ff fef9 	bl	8001634 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001842:	2800      	cmp	r0, #0
 8001844:	f43f af3b 	beq.w	80016be <TSK_MediumFrequencyTaskM1+0x56>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 800184a:	2100      	movs	r1, #0
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	f006 fa9d 	bl	8007d8c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001852:	2111      	movs	r1, #17
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001856:	f007 fc4b 	bl	80090f0 <STM_NextState>
 800185a:	e730      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 800185e:	2101      	movs	r1, #1
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	f006 fa93 	bl	8007d8c <PWMC_CurrentReadingCalibr>
 8001866:	2800      	cmp	r0, #0
 8001868:	f43f af29 	beq.w	80016be <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], CLEAR );
 800186c:	2112      	movs	r1, #18
 800186e:	4813      	ldr	r0, [pc, #76]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001870:	f007 fc3e 	bl	80090f0 <STM_NextState>
 8001874:	e723      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f006 fc73 	bl	8008164 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800187e:	2014      	movs	r0, #20
 8001880:	f7ff fed2 	bl	8001628 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001884:	2110      	movs	r1, #16
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 8001888:	f007 fc32 	bl	80090f0 <STM_NextState>
    break;
 800188c:	e717      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x258>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8001890:	4c0d      	ldr	r4, [pc, #52]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x260>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f006 fcd6 	bl	8008244 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8001898:	6820      	ldr	r0, [r4, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	f007 fb68 	bl	8008f70 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 80018a0:	6820      	ldr	r0, [r4, #0]
 80018a2:	4905      	ldr	r1, [pc, #20]	; (80018b8 <TSK_MediumFrequencyTaskM1+0x250>)
 80018a4:	f007 fb48 	bl	8008f38 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 80018a8:	2107      	movs	r1, #7
 80018aa:	4804      	ldr	r0, [pc, #16]	; (80018bc <TSK_MediumFrequencyTaskM1+0x254>)
 80018ac:	f007 fc20 	bl	80090f0 <STM_NextState>
 80018b0:	e705      	b.n	80016be <TSK_MediumFrequencyTaskM1+0x56>
 80018b2:	bf00      	nop
 80018b4:	20000ba4 	.word	0x20000ba4
 80018b8:	20000274 	.word	0x20000274
 80018bc:	20000b98 	.word	0x20000b98
 80018c0:	20000ad4 	.word	0x20000ad4
 80018c4:	20000258 	.word	0x20000258
 80018c8:	20000bac 	.word	0x20000bac
 80018cc:	20000af0 	.word	0x20000af0
 80018d0:	20000b6c 	.word	0x20000b6c
 80018d4:	20000ae4 	.word	0x20000ae4
 80018d8:	200002f0 	.word	0x200002f0

080018dc <MC_Scheduler>:
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80018de:	4c10      	ldr	r4, [pc, #64]	; (8001920 <MC_Scheduler+0x44>)
 80018e0:	7825      	ldrb	r5, [r4, #0]
 80018e2:	2d01      	cmp	r5, #1
 80018e4:	d000      	beq.n	80018e8 <MC_Scheduler+0xc>
}
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80018e8:	88e3      	ldrh	r3, [r4, #6]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b1a3      	cbz	r3, 8001918 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 80018ee:	88e3      	ldrh	r3, [r4, #6]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	80e3      	strh	r3, [r4, #6]
    if(hBootCapDelayCounterM1 > 0u)
 80018f6:	8863      	ldrh	r3, [r4, #2]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b943      	cbnz	r3, 800190e <MC_Scheduler+0x32>
    if(hStopPermanencyCounterM1 > 0u)
 80018fc:	88a3      	ldrh	r3, [r4, #4]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001904:	88a3      	ldrh	r3, [r4, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	b29b      	uxth	r3, r3
 800190a:	80a3      	strh	r3, [r4, #4]
}
 800190c:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 800190e:	8863      	ldrh	r3, [r4, #2]
 8001910:	3b01      	subs	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	8063      	strh	r3, [r4, #2]
 8001916:	e7f1      	b.n	80018fc <MC_Scheduler+0x20>
      TSK_MediumFrequencyTaskM1();
 8001918:	f7ff fea6 	bl	8001668 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800191c:	80e5      	strh	r5, [r4, #6]
 800191e:	e7ea      	b.n	80018f6 <MC_Scheduler+0x1a>
 8001920:	2000065c 	.word	0x2000065c

08001924 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001928:	4833      	ldr	r0, [pc, #204]	; (80019f8 <TSK_HighFrequencyTask+0xd4>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800192a:	4f34      	ldr	r7, [pc, #208]	; (80019fc <TSK_HighFrequencyTask+0xd8>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800192c:	4c34      	ldr	r4, [pc, #208]	; (8001a00 <TSK_HighFrequencyTask+0xdc>)
{
 800192e:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001930:	f005 fe48 	bl	80075c4 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <TSK_HighFrequencyTask+0xe0>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	f007 fb00 	bl	8008f3c <STC_GetSpeedSensor>
 800193c:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800193e:	f007 fa9f 	bl	8008e80 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001942:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001944:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001946:	6838      	ldr	r0, [r7, #0]
 8001948:	f006 f910 	bl	8007b6c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 800194c:	f000 ffe0 	bl	8002910 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001950:	f000 ff9c 	bl	800288c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001954:	9803      	ldr	r0, [sp, #12]
 8001956:	f7ff fc55 	bl	8001204 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800195a:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 800195c:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800195e:	f7ff fc8f 	bl	8001280 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <TSK_HighFrequencyTask+0xe4>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001964:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001968:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800196a:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 800196c:	1a09      	subs	r1, r1, r0
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f006 f808 	bl	8007984 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001974:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <TSK_HighFrequencyTask+0xe8>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800197a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800197e:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001980:	1a89      	subs	r1, r1, r2
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f005 fffe 	bl	8007984 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <TSK_HighFrequencyTask+0xec>)
 800198a:	f8ad 8008 	strh.w	r8, [sp, #8]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001994:	9902      	ldr	r1, [sp, #8]
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fd42 	bl	8007420 <Circle_Limitation>
 800199c:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800199e:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80019a0:	fa0f f883 	sxth.w	r8, r3
 80019a4:	141d      	asrs	r5, r3, #16
 80019a6:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80019a8:	f007 fa74 	bl	8008e94 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80019ac:	4631      	mov	r1, r6
 80019ae:	9802      	ldr	r0, [sp, #8]
 80019b0:	f7ff fca0 	bl	80012f4 <MCM_Rev_Park>
 80019b4:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80019b6:	4601      	mov	r1, r0
 80019b8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80019ba:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80019bc:	f006 f8d8 	bl	8007b70 <PWMC_SetPhaseVoltage>
 80019c0:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80019c2:	9803      	ldr	r0, [sp, #12]
 80019c4:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80019c6:	9804      	ldr	r0, [sp, #16]
 80019c8:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80019ca:	9801      	ldr	r0, [sp, #4]
 80019cc:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 80019ce:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80019d0:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80019d2:	f8a4 8016 	strh.w	r8, [r4, #22]
 80019d6:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 80019d8:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80019da:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80019de:	d003      	beq.n	80019e8 <TSK_HighFrequencyTask+0xc4>
}
 80019e0:	2000      	movs	r0, #0
 80019e2:	b006      	add	sp, #24
 80019e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <TSK_HighFrequencyTask+0xf0>)
 80019ec:	f007 fb66 	bl	80090bc <STM_FaultProcessing>
}
 80019f0:	2000      	movs	r0, #0
 80019f2:	b006      	add	sp, #24
 80019f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019f8:	20000274 	.word	0x20000274
 80019fc:	20000ad4 	.word	0x20000ad4
 8001a00:	20000af0 	.word	0x20000af0
 8001a04:	20000bac 	.word	0x20000bac
 8001a08:	20000ae0 	.word	0x20000ae0
 8001a0c:	20000ba8 	.word	0x20000ba8
 8001a10:	20000b70 	.word	0x20000b70
 8001a14:	20000b98 	.word	0x20000b98

08001a18 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a1c:	4f23      	ldr	r7, [pc, #140]	; (8001aac <TSK_SafetyTask_PWMOFF+0x94>)
{
 8001a1e:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a24:	f005 ff5a 	bl	80078dc <NTC_CalcAvTemp>
 8001a28:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a2a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001a2e:	f006 f9d7 	bl	8007de0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a32:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a36:	4304      	orrs	r4, r0
 8001a38:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001a3a:	b36d      	cbz	r5, 8001a98 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001a3c:	4e1c      	ldr	r6, [pc, #112]	; (8001ab0 <TSK_SafetyTask_PWMOFF+0x98>)
 8001a3e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001a42:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8001a46:	43e2      	mvns	r2, r4
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	f007 fb35 	bl	80090bc <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001a52:	4630      	mov	r0, r6
 8001a54:	f007 fbc0 	bl	80091d8 <STM_GetState>
 8001a58:	280a      	cmp	r0, #10
 8001a5a:	d008      	beq.n	8001a6e <TSK_SafetyTask_PWMOFF+0x56>
 8001a5c:	280b      	cmp	r0, #11
 8001a5e:	d105      	bne.n	8001a6c <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001a60:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001a64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001a68:	f006 b98e 	b.w	8007d88 <PWMC_SwitchOffPWM>
}
 8001a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001a70:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001a74:	b110      	cbz	r0, 8001a7c <TSK_SafetyTask_PWMOFF+0x64>
      EAC_SetRestartState( pEAC[bMotor], false );
 8001a76:	2100      	movs	r1, #0
 8001a78:	f005 fd50 	bl	800751c <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001a7c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001a80:	f006 f982 	bl	8007d88 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001a84:	4628      	mov	r0, r5
 8001a86:	f7ff fc53 	bl	8001330 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001a8c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 8001a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001a94:	f005 bed0 	b.w	8007838 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <TSK_SafetyTask_PWMOFF+0xa4>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	f007 f9b2 	bl	8008e04 <RVBS_CalcAvVbus>
 8001aa0:	f000 000e 	and.w	r0, r0, #14
 8001aa4:	4304      	orrs	r4, r0
 8001aa6:	e7c9      	b.n	8001a3c <TSK_SafetyTask_PWMOFF+0x24>
 8001aa8:	20000ad0 	.word	0x20000ad0
 8001aac:	20000ad4 	.word	0x20000ad4
 8001ab0:	20000b98 	.word	0x20000b98
 8001ab4:	20000adc 	.word	0x20000adc
 8001ab8:	20000ba4 	.word	0x20000ba4
 8001abc:	20000b74 	.word	0x20000b74

08001ac0 <TSK_SafetyTask>:
{
 8001ac0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <TSK_SafetyTask+0x1c>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d000      	beq.n	8001acc <TSK_SafetyTask+0xc>
}
 8001aca:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff ffa3 	bl	8001a18 <TSK_SafetyTask_PWMOFF>
}
 8001ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001ad6:	f000 bdef 	b.w	80026b8 <RCM_ExecUserConv>
 8001ada:	bf00      	nop
 8001adc:	2000065c 	.word	0x2000065c

08001ae0 <MC_RunMotorControlTasks>:
{
 8001ae0:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MC_RunMotorControlTasks+0x1c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b903      	cbnz	r3, 8001aea <MC_RunMotorControlTasks+0xa>
}
 8001ae8:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001aea:	f7ff fef7 	bl	80018dc <MC_Scheduler>
    TSK_SafetyTask();
 8001aee:	f7ff ffe7 	bl	8001ac0 <TSK_SafetyTask>
}
 8001af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001af6:	f001 bb49 	b.w	800318c <UI_Scheduler>
 8001afa:	bf00      	nop
 8001afc:	2000065c 	.word	0x2000065c

08001b00 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001b00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <TSK_HardwareFaultTask+0x18>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f006 fb9d 	bl	8008244 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	4803      	ldr	r0, [pc, #12]	; (8001b1c <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001b14:	f007 bad2 	b.w	80090bc <STM_FaultProcessing>
 8001b18:	20000ad4 	.word	0x20000ad4
 8001b1c:	20000b98 	.word	0x20000b98

08001b20 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b24:	4a62      	ldr	r2, [pc, #392]	; (8001cb0 <mc_lock_pins+0x190>)
 8001b26:	4c63      	ldr	r4, [pc, #396]	; (8001cb4 <mc_lock_pins+0x194>)
 8001b28:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b2a:	f04f 0c04 	mov.w	ip, #4
 8001b2e:	b094      	sub	sp, #80	; 0x50
 8001b30:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b34:	61d4      	str	r4, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001b36:	69d3      	ldr	r3, [r2, #28]
 8001b38:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b3a:	4d5f      	ldr	r5, [pc, #380]	; (8001cb8 <mc_lock_pins+0x198>)
  (void) temp;
 8001b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b3e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b40:	f04f 0e02 	mov.w	lr, #2
 8001b44:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b48:	61d5      	str	r5, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b4a:	69d3      	ldr	r3, [r2, #28]
 8001b4c:	9312      	str	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b4e:	495b      	ldr	r1, [pc, #364]	; (8001cbc <mc_lock_pins+0x19c>)
  (void) temp;
 8001b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b52:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b54:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001b58:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b5a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b5c:	69d3      	ldr	r3, [r2, #28]
 8001b5e:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b64:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 8001b68:	9f11      	ldr	r7, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b6a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b6c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b6e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b70:	69d0      	ldr	r0, [r2, #28]
 8001b72:	9010      	str	r0, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b78:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b7c:	2701      	movs	r7, #1
  (void) temp;
 8001b7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b82:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b84:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b86:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b88:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8001b8c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  (void) temp;
 8001b90:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b94:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b96:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b98:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b9a:	69d0      	ldr	r0, [r2, #28]
 8001b9c:	900e      	str	r0, [sp, #56]	; 0x38
  (void) temp;
 8001b9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ba0:	4847      	ldr	r0, [pc, #284]	; (8001cc0 <mc_lock_pins+0x1a0>)
 8001ba2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ba4:	2780      	movs	r7, #128	; 0x80
 8001ba6:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ba8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001baa:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8001bae:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  (void) temp;
 8001bb2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bb6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bb8:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bbc:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bbe:	69dd      	ldr	r5, [r3, #28]
 8001bc0:	950c      	str	r5, [sp, #48]	; 0x30
  (void) temp;
 8001bc2:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bc6:	4d3f      	ldr	r5, [pc, #252]	; (8001cc4 <mc_lock_pins+0x1a4>)
 8001bc8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bca:	f04f 0e08 	mov.w	lr, #8
 8001bce:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bd2:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bd4:	69dd      	ldr	r5, [r3, #28]
 8001bd6:	950b      	str	r5, [sp, #44]	; 0x2c
  (void) temp;
 8001bd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bda:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bdc:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001be0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001be2:	69dc      	ldr	r4, [r3, #28]
 8001be4:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 8001be6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001be8:	4c37      	ldr	r4, [pc, #220]	; (8001cc8 <mc_lock_pins+0x1a8>)
 8001bea:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bec:	2540      	movs	r5, #64	; 0x40
 8001bee:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bf0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bf2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001bf6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  (void) temp;
 8001bfa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bfe:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8001cd0 <mc_lock_pins+0x1b0>
 8001c02:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c06:	f04f 0e20 	mov.w	lr, #32
 8001c0a:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c0e:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c12:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001c16:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 8001c1a:	f8dd c020 	ldr.w	ip, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c1e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c20:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c22:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c24:	69d4      	ldr	r4, [r2, #28]
 8001c26:	9407      	str	r4, [sp, #28]
  (void) temp;
 8001c28:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c2a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c2c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c2e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c30:	69d0      	ldr	r0, [r2, #28]
 8001c32:	9006      	str	r0, [sp, #24]
  (void) temp;
 8001c34:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c36:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c38:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c3a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c3c:	69d9      	ldr	r1, [r3, #28]
 8001c3e:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c40:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c44:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8001c48:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c4a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c4c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c4e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c50:	69d9      	ldr	r1, [r3, #28]
 8001c52:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c54:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c58:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8001c5c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c5e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c60:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c62:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c64:	69d9      	ldr	r1, [r3, #28]
 8001c66:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c6c:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8001c70:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c72:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c74:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c76:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c80:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 8001c84:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c86:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c88:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c8a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c8c:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <mc_lock_pins+0x1ac>)
  temp = READ_REG(GPIOx->LCKR);
 8001c90:	9201      	str	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c96:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8001c9a:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c9c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c9e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ca0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001ca6:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001ca8:	b014      	add	sp, #80	; 0x50
 8001caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cae:	bf00      	nop
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	00010004 	.word	0x00010004
 8001cb8:	00010002 	.word	0x00010002
 8001cbc:	00010100 	.word	0x00010100
 8001cc0:	00010080 	.word	0x00010080
 8001cc4:	00010008 	.word	0x00010008
 8001cc8:	00010040 	.word	0x00010040
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	00010020 	.word	0x00010020

08001cd4 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001cda:	2100      	movs	r1, #0
{
 8001cdc:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001cde:	0962      	lsrs	r2, r4, #5
{
 8001ce0:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001ce2:	f88d 1009 	strb.w	r1, [sp, #9]
{
 8001ce6:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 8001ce8:	d122      	bne.n	8001d30 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001cea:	2c12      	cmp	r4, #18
 8001cec:	d814      	bhi.n	8001d18 <MCP_ReceivedFrame+0x44>
 8001cee:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001cf2:	0016      	.short	0x0016
 8001cf4:	00e8004c 	.word	0x00e8004c
 8001cf8:	001300de 	.word	0x001300de
 8001cfc:	017a0013 	.word	0x017a0013
 8001d00:	01bc01a7 	.word	0x01bc01a7
 8001d04:	021101ef 	.word	0x021101ef
 8001d08:	02390222 	.word	0x02390222
 8001d0c:	00130256 	.word	0x00130256
 8001d10:	00130013 	.word	0x00130013
 8001d14:	02660013 	.word	0x02660013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001d1e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001d22:	2301      	movs	r3, #1
 8001d24:	f10d 020e 	add.w	r2, sp, #14
 8001d28:	21ff      	movs	r1, #255	; 0xff
 8001d2a:	47a0      	blx	r4
    }
  }
}
 8001d2c:	b00d      	add	sp, #52	; 0x34
 8001d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001d30:	3a01      	subs	r2, #1
 8001d32:	f001 fa73 	bl	800321c <UI_SetReg>
 8001d36:	b1c8      	cbz	r0, 8001d6c <MCP_ReceivedFrame+0x98>
  switch (Code)
 8001d38:	f004 041f 	and.w	r4, r4, #31
 8001d3c:	2c12      	cmp	r4, #18
 8001d3e:	f200 82bb 	bhi.w	80022b8 <MCP_ReceivedFrame+0x5e4>
 8001d42:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001d46:	01c2      	.short	0x01c2
 8001d48:	00be0022 	.word	0x00be0022
 8001d4c:	02b900b4 	.word	0x02b900b4
 8001d50:	015002b9 	.word	0x015002b9
 8001d54:	0192017d 	.word	0x0192017d
 8001d58:	01e701c5 	.word	0x01e701c5
 8001d5c:	020f01f8 	.word	0x020f01f8
 8001d60:	02b9022c 	.word	0x02b9022c
 8001d64:	02b902b9 	.word	0x02b902b9
 8001d68:	023c02b9 	.word	0x023c02b9
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001d6c:	230b      	movs	r3, #11
 8001d6e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001d72:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d0d1      	beq.n	8001d1e <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001d82:	21f0      	movs	r1, #240	; 0xf0
 8001d84:	47a0      	blx	r4
}
 8001d86:	b00d      	add	sp, #52	; 0x34
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001d8a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001d92:	2988      	cmp	r1, #136	; 0x88
 8001d94:	f200 8296 	bhi.w	80022c4 <MCP_ReceivedFrame+0x5f0>
 8001d98:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001d9c:	02940286 	.word	0x02940286
 8001da0:	027f0294 	.word	0x027f0294
 8001da4:	02750294 	.word	0x02750294
 8001da8:	02750275 	.word	0x02750275
 8001dac:	02750275 	.word	0x02750275
 8001db0:	02750275 	.word	0x02750275
 8001db4:	02750275 	.word	0x02750275
 8001db8:	02750275 	.word	0x02750275
 8001dbc:	02650265 	.word	0x02650265
 8001dc0:	02940294 	.word	0x02940294
 8001dc4:	02750275 	.word	0x02750275
 8001dc8:	02750275 	.word	0x02750275
 8001dcc:	02940275 	.word	0x02940275
 8001dd0:	02940294 	.word	0x02940294
 8001dd4:	014e014e 	.word	0x014e014e
 8001dd8:	02940294 	.word	0x02940294
 8001ddc:	02940294 	.word	0x02940294
 8001de0:	02940294 	.word	0x02940294
 8001de4:	02940294 	.word	0x02940294
 8001de8:	02940294 	.word	0x02940294
 8001dec:	02940294 	.word	0x02940294
 8001df0:	02940294 	.word	0x02940294
 8001df4:	02940294 	.word	0x02940294
 8001df8:	02940294 	.word	0x02940294
 8001dfc:	02940294 	.word	0x02940294
 8001e00:	02940294 	.word	0x02940294
 8001e04:	02940294 	.word	0x02940294
 8001e08:	02940294 	.word	0x02940294
 8001e0c:	02940294 	.word	0x02940294
 8001e10:	02940294 	.word	0x02940294
 8001e14:	02940294 	.word	0x02940294
 8001e18:	02940294 	.word	0x02940294
 8001e1c:	02750294 	.word	0x02750294
 8001e20:	02940294 	.word	0x02940294
 8001e24:	02940294 	.word	0x02940294
 8001e28:	02650265 	.word	0x02650265
 8001e2c:	02940265 	.word	0x02940265
 8001e30:	02940294 	.word	0x02940294
 8001e34:	02940294 	.word	0x02940294
 8001e38:	02750294 	.word	0x02750294
 8001e3c:	02940294 	.word	0x02940294
 8001e40:	02750294 	.word	0x02750294
 8001e44:	02750275 	.word	0x02750275
 8001e48:	02750275 	.word	0x02750275
 8001e4c:	02750275 	.word	0x02750275
 8001e50:	02650294 	.word	0x02650294
 8001e54:	02940294 	.word	0x02940294
 8001e58:	02940294 	.word	0x02940294
 8001e5c:	02750294 	.word	0x02750294
 8001e60:	02940294 	.word	0x02940294
 8001e64:	02750275 	.word	0x02750275
 8001e68:	02940294 	.word	0x02940294
 8001e6c:	02940294 	.word	0x02940294
 8001e70:	02940294 	.word	0x02940294
 8001e74:	02940294 	.word	0x02940294
 8001e78:	02940294 	.word	0x02940294
 8001e7c:	02940294 	.word	0x02940294
 8001e80:	02940294 	.word	0x02940294
 8001e84:	0265027f 	.word	0x0265027f
 8001e88:	02650265 	.word	0x02650265
 8001e8c:	02650265 	.word	0x02650265
 8001e90:	02940294 	.word	0x02940294
 8001e94:	02650294 	.word	0x02650294
 8001e98:	02940265 	.word	0x02940265
 8001e9c:	02940294 	.word	0x02940294
 8001ea0:	02940294 	.word	0x02940294
 8001ea4:	02940294 	.word	0x02940294
 8001ea8:	02750275 	.word	0x02750275
 8001eac:	0275      	.short	0x0275
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001eae:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 8001eb0:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001eb2:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f001 fce6 	bl	8003888 <UI_ExecCmd>
 8001ebc:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ec0:	e759      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001ec2:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001eca:	2988      	cmp	r1, #136	; 0x88
 8001ecc:	f200 80fd 	bhi.w	80020ca <MCP_ReceivedFrame+0x3f6>
 8001ed0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001ed4:	019301b7 	.word	0x019301b7
 8001ed8:	01b701b7 	.word	0x01b701b7
 8001edc:	01a50193 	.word	0x01a50193
 8001ee0:	01a501a5 	.word	0x01a501a5
 8001ee4:	01a501a5 	.word	0x01a501a5
 8001ee8:	01a501a5 	.word	0x01a501a5
 8001eec:	01a501a5 	.word	0x01a501a5
 8001ef0:	01a501a5 	.word	0x01a501a5
 8001ef4:	01a501a5 	.word	0x01a501a5
 8001ef8:	01a501a5 	.word	0x01a501a5
 8001efc:	01a501a5 	.word	0x01a501a5
 8001f00:	01a501a5 	.word	0x01a501a5
 8001f04:	01a501a5 	.word	0x01a501a5
 8001f08:	01a501a5 	.word	0x01a501a5
 8001f0c:	00fb00fb 	.word	0x00fb00fb
 8001f10:	01a50193 	.word	0x01a50193
 8001f14:	01a501a5 	.word	0x01a501a5
 8001f18:	00fb01b7 	.word	0x00fb01b7
 8001f1c:	00fb00fb 	.word	0x00fb00fb
 8001f20:	00fb00fb 	.word	0x00fb00fb
 8001f24:	00fb00fb 	.word	0x00fb00fb
 8001f28:	00fb00fb 	.word	0x00fb00fb
 8001f2c:	00fb00fb 	.word	0x00fb00fb
 8001f30:	00fb00fb 	.word	0x00fb00fb
 8001f34:	00fb00fb 	.word	0x00fb00fb
 8001f38:	00fb00fb 	.word	0x00fb00fb
 8001f3c:	00fb00fb 	.word	0x00fb00fb
 8001f40:	00fb00fb 	.word	0x00fb00fb
 8001f44:	00fb00fb 	.word	0x00fb00fb
 8001f48:	00fb00fb 	.word	0x00fb00fb
 8001f4c:	00fb00fb 	.word	0x00fb00fb
 8001f50:	00fb00fb 	.word	0x00fb00fb
 8001f54:	01a500fb 	.word	0x01a500fb
 8001f58:	00fb00fb 	.word	0x00fb00fb
 8001f5c:	00fb00fb 	.word	0x00fb00fb
 8001f60:	01930193 	.word	0x01930193
 8001f64:	01a50193 	.word	0x01a50193
 8001f68:	01a501a5 	.word	0x01a501a5
 8001f6c:	01b701a5 	.word	0x01b701a5
 8001f70:	01a50193 	.word	0x01a50193
 8001f74:	01a501a5 	.word	0x01a501a5
 8001f78:	01a501a5 	.word	0x01a501a5
 8001f7c:	01a501a5 	.word	0x01a501a5
 8001f80:	01a501a5 	.word	0x01a501a5
 8001f84:	01a501a5 	.word	0x01a501a5
 8001f88:	019301b7 	.word	0x019301b7
 8001f8c:	01a500fb 	.word	0x01a500fb
 8001f90:	01a501a5 	.word	0x01a501a5
 8001f94:	01a501a5 	.word	0x01a501a5
 8001f98:	00fb00fb 	.word	0x00fb00fb
 8001f9c:	01a501a5 	.word	0x01a501a5
 8001fa0:	01b701b7 	.word	0x01b701b7
 8001fa4:	01930193 	.word	0x01930193
 8001fa8:	01930193 	.word	0x01930193
 8001fac:	01b70193 	.word	0x01b70193
 8001fb0:	01a501a5 	.word	0x01a501a5
 8001fb4:	00fb0193 	.word	0x00fb0193
 8001fb8:	01a501a5 	.word	0x01a501a5
 8001fbc:	019301b7 	.word	0x019301b7
 8001fc0:	01930193 	.word	0x01930193
 8001fc4:	01930193 	.word	0x01930193
 8001fc8:	01930193 	.word	0x01930193
 8001fcc:	01930193 	.word	0x01930193
 8001fd0:	01930193 	.word	0x01930193
 8001fd4:	00fb01b7 	.word	0x00fb01b7
 8001fd8:	019301b7 	.word	0x019301b7
 8001fdc:	01930193 	.word	0x01930193
 8001fe0:	01a501a5 	.word	0x01a501a5
 8001fe4:	01a5      	.short	0x01a5
 8001fe6:	ac04      	add	r4, sp, #16
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4620      	mov	r0, r4
 8001fec:	2220      	movs	r2, #32
 8001fee:	f007 fd6b 	bl	8009ac8 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001ff2:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8001ff6:	f10d 0012 	add.w	r0, sp, #18
 8001ffa:	1e71      	subs	r1, r6, #1
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e005      	b.n	800200c <MCP_ReceivedFrame+0x338>
 8002000:	3301      	adds	r3, #1
 8002002:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002004:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002008:	f000 8162 	beq.w	80022d0 <MCP_ReceivedFrame+0x5fc>
 800200c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002010:	2a09      	cmp	r2, #9
 8002012:	d1f5      	bne.n	8002000 <MCP_ReceivedFrame+0x32c>
 8002014:	1d5a      	adds	r2, r3, #5
 8002016:	1dd9      	adds	r1, r3, #7
 8002018:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800201a:	5cb2      	ldrb	r2, [r6, r2]
 800201c:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002020:	5c72      	ldrb	r2, [r6, r1]
 8002022:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002026:	5cf3      	ldrb	r3, [r6, r3]
 8002028:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800202c:	4622      	mov	r2, r4
 800202e:	2320      	movs	r3, #32
 8002030:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002034:	21f0      	movs	r1, #240	; 0xf0
 8002036:	47a0      	blx	r4
      bNoError = true;
 8002038:	2301      	movs	r3, #1
 800203a:	f88d 3009 	strb.w	r3, [sp, #9]
 800203e:	e69c      	b.n	8001d7a <MCP_ReceivedFrame+0xa6>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002040:	7877      	ldrb	r7, [r6, #1]
 8002042:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002044:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002046:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002048:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800204a:	78f1      	ldrb	r1, [r6, #3]
 800204c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8002050:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002054:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002058:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800205c:	b292      	uxth	r2, r2
 800205e:	4628      	mov	r0, r5
 8002060:	f001 fc4e 	bl	8003900 <UI_ExecSpeedRamp>
 8002064:	f88d 0009 	strb.w	r0, [sp, #9]
 8002068:	e685      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800206a:	f10d 030e 	add.w	r3, sp, #14
 800206e:	7831      	ldrb	r1, [r6, #0]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	f10d 020a 	add.w	r2, sp, #10
 8002076:	ab03      	add	r3, sp, #12
 8002078:	4628      	mov	r0, r5
 800207a:	f001 fc67 	bl	800394c <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800207e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 8002082:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8002086:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 800208a:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800208e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002092:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8002094:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002096:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8002098:	f363 0207 	bfi	r2, r3, #0, #8
 800209c:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 80020a0:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 80020a2:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 80020a6:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 80020a8:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80020ac:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80020ae:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 80020b0:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80020b2:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 80020b6:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80020ba:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80020be:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80020c2:	2308      	movs	r3, #8
 80020c4:	aa04      	add	r2, sp, #16
 80020c6:	21f0      	movs	r1, #240	; 0xf0
 80020c8:	47a0      	blx	r4
 80020ca:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80020ce:	e652      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80020d0:	78b1      	ldrb	r1, [r6, #2]
 80020d2:	7873      	ldrb	r3, [r6, #1]
 80020d4:	78f2      	ldrb	r2, [r6, #3]
 80020d6:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80020d8:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80020da:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80020dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80020e0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80020e4:	4a7c      	ldr	r2, [pc, #496]	; (80022d8 <MCP_ReceivedFrame+0x604>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80020e6:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80020e8:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80020ec:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 80020f0:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80020f2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80020f6:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80020fa:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80020fc:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002100:	7831      	ldrb	r1, [r6, #0]
 8002102:	9000      	str	r0, [sp, #0]
 8002104:	b21b      	sxth	r3, r3
 8002106:	b292      	uxth	r2, r2
 8002108:	4628      	mov	r0, r5
 800210a:	f001 fc3b 	bl	8003984 <UI_SetRevupData>
 800210e:	f88d 0009 	strb.w	r0, [sp, #9]
 8002112:	e630      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002114:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002116:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002118:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 800211a:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 800211c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002120:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002124:	b212      	sxth	r2, r2
 8002126:	b209      	sxth	r1, r1
 8002128:	4628      	mov	r0, r5
 800212a:	f001 fc45 	bl	80039b8 <UI_SetCurrentReferences>
      bNoError = true;
 800212e:	2301      	movs	r3, #1
 8002130:	f88d 3009 	strb.w	r3, [sp, #9]
 8002134:	e621      	b.n	8001d7a <MCP_ReceivedFrame+0xa6>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002136:	4c69      	ldr	r4, [pc, #420]	; (80022dc <MCP_ReceivedFrame+0x608>)
      stepList.data = buffer;
 8002138:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800213a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800213c:	4621      	mov	r1, r4
 800213e:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8002140:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002144:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002148:	f001 fc44 	bl	80039d4 <UI_GetMPInfo>
 800214c:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8002150:	2800      	cmp	r0, #0
 8002152:	f43f ade4 	beq.w	8001d1e <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002156:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 800215a:	7923      	ldrb	r3, [r4, #4]
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	21f0      	movs	r1, #240	; 0xf0
 8002160:	47b0      	blx	r6
 8002162:	e5e3      	b.n	8001d2c <MCP_ReceivedFrame+0x58>
 8002164:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 8002168:	ac04      	add	r4, sp, #16
 800216a:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800216c:	4623      	mov	r3, r4
 800216e:	ae0c      	add	r6, sp, #48	; 0x30
 8002170:	e004      	b.n	800217c <MCP_ReceivedFrame+0x4a8>
        outBuff[i] = pHandle->s_fwVer[i];
 8002172:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002176:	429e      	cmp	r6, r3
 8002178:	f43f af58 	beq.w	800202c <MCP_ReceivedFrame+0x358>
 800217c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002180:	1b18      	subs	r0, r3, r4
 8002182:	b2c0      	uxtb	r0, r0
 8002184:	2900      	cmp	r1, #0
 8002186:	d1f4      	bne.n	8002172 <MCP_ReceivedFrame+0x49e>
      for (; i < 32; i++)
 8002188:	281f      	cmp	r0, #31
 800218a:	f63f af4f 	bhi.w	800202c <MCP_ReceivedFrame+0x358>
        outBuff[i] = 0;
 800218e:	f1c0 021f 	rsb	r2, r0, #31
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	3201      	adds	r2, #1
 8002196:	4420      	add	r0, r4
 8002198:	f007 fc96 	bl	8009ac8 <memset>
 800219c:	e746      	b.n	800202c <MCP_ReceivedFrame+0x358>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800219e:	7970      	ldrb	r0, [r6, #5]
 80021a0:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021a2:	7873      	ldrb	r3, [r6, #1]
 80021a4:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80021a6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021aa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80021ae:	b292      	uxth	r2, r2
 80021b0:	b209      	sxth	r1, r1
 80021b2:	4628      	mov	r0, r5
 80021b4:	f001 fbb6 	bl	8003924 <UI_ExecTorqueRamp>
 80021b8:	f88d 0009 	strb.w	r0, [sp, #9]
 80021bc:	e5db      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 80021be:	7970      	ldrb	r0, [r6, #5]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021c0:	7871      	ldrb	r1, [r6, #1]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 80021c2:	7932      	ldrb	r2, [r6, #4]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021c4:	7833      	ldrb	r3, [r6, #0]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 80021c6:	79b7      	ldrb	r7, [r6, #6]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021c8:	78b4      	ldrb	r4, [r6, #2]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 80021ca:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021ce:	eb03 2301 	add.w	r3, r3, r1, lsl #8
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 80021d2:	79f0      	ldrb	r0, [r6, #7]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021d4:	78f1      	ldrb	r1, [r6, #3]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 80021d6:	eb02 4207 	add.w	r2, r2, r7, lsl #16
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80021da:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 80021de:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80021e2:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 80021e6:	ee00 2a90 	vmov	s1, r2
 80021ea:	ee00 3a10 	vmov	s0, r3
 80021ee:	4628      	mov	r0, r5
 80021f0:	f001 fba2 	bl	8003938 <UI_ExecPositionCmd>
 80021f4:	f88d 0009 	strb.w	r0, [sp, #9]
 80021f8:	e5bd      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80021fa:	f10d 0209 	add.w	r2, sp, #9
 80021fe:	4628      	mov	r0, r5
 8002200:	f001 f8fc 	bl	80033fc <UI_GetReg>
          if ( bNoError == true )
 8002204:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002208:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800220a:	2b00      	cmp	r3, #0
 800220c:	f43f ad87 	beq.w	8001d1e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002210:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002214:	2304      	movs	r3, #4
 8002216:	aa04      	add	r2, sp, #16
 8002218:	21f0      	movs	r1, #240	; 0xf0
 800221a:	47a0      	blx	r4
 800221c:	e586      	b.n	8001d2c <MCP_ReceivedFrame+0x58>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800221e:	f10d 0209 	add.w	r2, sp, #9
 8002222:	4628      	mov	r0, r5
 8002224:	f001 f8ea 	bl	80033fc <UI_GetReg>
          if ( bNoError == true )
 8002228:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800222c:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800222e:	2b00      	cmp	r3, #0
 8002230:	f43f ad75 	beq.w	8001d1e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002234:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002238:	2302      	movs	r3, #2
 800223a:	aa04      	add	r2, sp, #16
 800223c:	21f0      	movs	r1, #240	; 0xf0
 800223e:	47a0      	blx	r4
 8002240:	e574      	b.n	8001d2c <MCP_ReceivedFrame+0x58>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002242:	f10d 0209 	add.w	r2, sp, #9
 8002246:	4628      	mov	r0, r5
 8002248:	f001 f8d8 	bl	80033fc <UI_GetReg>
           if ( bNoError == true )
 800224c:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002250:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8002252:	2b00      	cmp	r3, #0
 8002254:	f43f ad63 	beq.w	8001d1e <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002258:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800225c:	2301      	movs	r3, #1
 800225e:	aa04      	add	r2, sp, #16
 8002260:	21f0      	movs	r1, #240	; 0xf0
 8002262:	47a0      	blx	r4
 8002264:	e562      	b.n	8001d2c <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002266:	78b4      	ldrb	r4, [r6, #2]
 8002268:	7873      	ldrb	r3, [r6, #1]
 800226a:	78f0      	ldrb	r0, [r6, #3]
 800226c:	7932      	ldrb	r2, [r6, #4]
 800226e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8002272:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002276:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 800227a:	4628      	mov	r0, r5
 800227c:	f000 ffce 	bl	800321c <UI_SetReg>
 8002280:	f88d 0009 	strb.w	r0, [sp, #9]
 8002284:	e577      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002286:	78b2      	ldrb	r2, [r6, #2]
 8002288:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800228a:	4628      	mov	r0, r5
 800228c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8002290:	f000 ffc4 	bl	800321c <UI_SetReg>
 8002294:	f88d 0009 	strb.w	r0, [sp, #9]
 8002298:	e56d      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800229a:	7872      	ldrb	r2, [r6, #1]
 800229c:	4628      	mov	r0, r5
 800229e:	f000 ffbd 	bl	800321c <UI_SetReg>
 80022a2:	f88d 0009 	strb.w	r0, [sp, #9]
 80022a6:	e566      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80022a8:	7872      	ldrb	r2, [r6, #1]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4628      	mov	r0, r5
 80022ae:	f000 ffb5 	bl	800321c <UI_SetReg>
 80022b2:	f88d 0009 	strb.w	r0, [sp, #9]
 80022b6:	e55e      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
      bErrorCode = ERROR_BAD_FRAME_ID;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80022be:	f88d 300e 	strb.w	r3, [sp, #14]
 80022c2:	e558      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80022c4:	2302      	movs	r3, #2
 80022c6:	f88d 300e 	strb.w	r3, [sp, #14]
 80022ca:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80022ce:	e552      	b.n	8001d76 <MCP_ReceivedFrame+0xa2>
 80022d0:	2326      	movs	r3, #38	; 0x26
 80022d2:	2124      	movs	r1, #36	; 0x24
 80022d4:	2222      	movs	r2, #34	; 0x22
 80022d6:	e6a0      	b.n	800201a <MCP_ReceivedFrame+0x346>
 80022d8:	2aaaaaab 	.word	0x2aaaaaab
 80022dc:	20000664 	.word	0x20000664

080022e0 <MCP_WaitNextFrame>:
{
 80022e0:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80022e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80022e4:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80022e6:	6980      	ldr	r0, [r0, #24]
 80022e8:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 80022f0:	69a0      	ldr	r0, [r4, #24]
 80022f2:	6a23      	ldr	r3, [r4, #32]
}
 80022f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 80022f8:	4718      	bx	r3
 80022fa:	bf00      	nop

080022fc <MCP_Init>:
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	b083      	sub	sp, #12
 8002300:	4604      	mov	r4, r0
 8002302:	461e      	mov	r6, r3
  FCP_SetClient( pFCP, pHandle,
 8002304:	4d0a      	ldr	r5, [pc, #40]	; (8002330 <MCP_Init+0x34>)
  pHandle->s_fwVer = s_fwVer;
 8002306:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8002308:	6181      	str	r1, [r0, #24]
{
 800230a:	4617      	mov	r7, r2
  pHandle->s_fwVer = s_fwVer;
 800230c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002310:	4608      	mov	r0, r1
 8002312:	9500      	str	r5, [sp, #0]
 8002314:	4621      	mov	r1, r4
{
 8002316:	9d08      	ldr	r5, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MCP_Init+0x38>)
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <MCP_Init+0x3c>)
 800231c:	f005 fa6e 	bl	80077fc <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8002320:	e9c4 7607 	strd	r7, r6, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002324:	6265      	str	r5, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff ffda 	bl	80022e0 <MCP_WaitNextFrame>
}
 800232c:	b003      	add	sp, #12
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002330:	0800233d 	.word	0x0800233d
 8002334:	08001cd5 	.word	0x08001cd5
 8002338:	08002345 	.word	0x08002345

0800233c <MCP_OnTimeOut>:
{
 800233c:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 800233e:	f7ff ffcf 	bl	80022e0 <MCP_WaitNextFrame>
}
 8002342:	bd08      	pop	{r3, pc}

08002344 <MCP_SentFrame>:
{
 8002344:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8002346:	f7ff ffcb 	bl	80022e0 <MCP_WaitNextFrame>
}
 800234a:	bd08      	pop	{r3, pc}

0800234c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800234c:	b530      	push	{r4, r5, lr}
 800234e:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002350:	f003 fc0a 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002356:	4d0c      	ldr	r5, [pc, #48]	; (8002388 <MX_MotorControl_Init+0x3c>)
 8002358:	4c0c      	ldr	r4, [pc, #48]	; (800238c <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800235a:	fba3 3000 	umull	r3, r0, r3, r0
 800235e:	09c0      	lsrs	r0, r0, #7
 8002360:	f002 fb22 	bl	80049a8 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002364:	4629      	mov	r1, r5
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff f820 	bl	80013ac <MCboot>
  mc_lock_pins();
 800236c:	f7ff fbd8 	bl	8001b20 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_MotorControl_Init+0x44>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4622      	mov	r2, r4
 8002376:	462b      	mov	r3, r5
 8002378:	2101      	movs	r1, #1
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <MX_MotorControl_Init+0x48>)
 800237c:	f000 fec8 	bl	8003110 <UI_TaskInit>
}
 8002380:	b003      	add	sp, #12
 8002382:	bd30      	pop	{r4, r5, pc}
 8002384:	10624dd3 	.word	0x10624dd3
 8002388:	20000bb4 	.word	0x20000bb4
 800238c:	20000bb0 	.word	0x20000bb0
 8002390:	08009c20 	.word	0x08009c20
 8002394:	20000610 	.word	0x20000610

08002398 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002398:	4963      	ldr	r1, [pc, #396]	; (8002528 <RCM_RegisterRegConv+0x190>)
 800239a:	680a      	ldr	r2, [r1, #0]
{
 800239c:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800239e:	2a00      	cmp	r2, #0
 80023a0:	f000 8081 	beq.w	80024a6 <RCM_RegisterRegConv+0x10e>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80023a4:	7904      	ldrb	r4, [r0, #4]
 80023a6:	7913      	ldrb	r3, [r2, #4]
 80023a8:	429c      	cmp	r4, r3
 80023aa:	d01f      	beq.n	80023ec <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80023ac:	684b      	ldr	r3, [r1, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 808c 	beq.w	80024cc <RCM_RegisterRegConv+0x134>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80023b4:	791d      	ldrb	r5, [r3, #4]
 80023b6:	42a5      	cmp	r5, r4
  uint8_t handle=255;
 80023b8:	f04f 02ff 	mov.w	r2, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80023bc:	d07a      	beq.n	80024b4 <RCM_RegisterRegConv+0x11c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80023be:	688d      	ldr	r5, [r1, #8]
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	f000 80a2 	beq.w	800250a <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80023c6:	792b      	ldrb	r3, [r5, #4]
 80023c8:	42a3      	cmp	r3, r4
 80023ca:	d079      	beq.n	80024c0 <RCM_RegisterRegConv+0x128>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80023cc:	68cb      	ldr	r3, [r1, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8096 	beq.w	8002500 <RCM_RegisterRegConv+0x168>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80023d4:	791d      	ldrb	r5, [r3, #4]
 80023d6:	42a5      	cmp	r5, r4
 80023d8:	f000 8084 	beq.w	80024e4 <RCM_RegisterRegConv+0x14c>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80023dc:	2a03      	cmp	r2, #3
 80023de:	bf88      	it	hi
 80023e0:	22ff      	movhi	r2, #255	; 0xff
 80023e2:	f240 8097 	bls.w	8002514 <RCM_RegisterRegConv+0x17c>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80023e6:	4610      	mov	r0, r2
 80023e8:	bcf0      	pop	{r4, r5, r6, r7}
 80023ea:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d1db      	bne.n	80023ac <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 80023f4:	2200      	movs	r2, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f6:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80023f8:	4d4c      	ldr	r5, [pc, #304]	; (800252c <RCM_RegisterRegConv+0x194>)
      RCM_handle_array [handle] = regConv;
 80023fa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80023fe:	2100      	movs	r1, #0
 8002400:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
 8002404:	07e5      	lsls	r5, r4, #31
 8002406:	d422      	bmi.n	800244e <RCM_RegisterRegConv+0xb6>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002408:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800240a:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800240c:	f021 0104 	bic.w	r1, r1, #4
 8002410:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002412:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002414:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002416:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002418:	f021 0120 	bic.w	r1, r1, #32
 800241c:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800241e:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002426:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800242a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800242e:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	2900      	cmp	r1, #0
 8002434:	dbfc      	blt.n	8002430 <RCM_RegisterRegConv+0x98>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	07cc      	lsls	r4, r1, #31
 800243a:	d408      	bmi.n	800244e <RCM_RegisterRegConv+0xb6>
  MODIFY_REG(ADCx->CR,
 800243c:	4c3c      	ldr	r4, [pc, #240]	; (8002530 <RCM_RegisterRegConv+0x198>)
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	4021      	ands	r1, r4
 8002442:	f041 0101 	orr.w	r1, r1, #1
 8002446:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	07c9      	lsls	r1, r1, #31
 800244c:	d5f7      	bpl.n	800243e <RCM_RegisterRegConv+0xa6>
      RCM_NoInj_array [handle].enable = false;
 800244e:	4e39      	ldr	r6, [pc, #228]	; (8002534 <RCM_RegisterRegConv+0x19c>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002450:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002452:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002456:	0049      	lsls	r1, r1, #1
 8002458:	1875      	adds	r5, r6, r1
 800245a:	2700      	movs	r7, #0
 800245c:	5477      	strb	r7, [r6, r1]
 800245e:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 8002462:	716a      	strb	r2, [r5, #5]
      RCM_NoInj_array [handle].prev = handle;
 8002464:	712a      	strb	r2, [r5, #4]
 8002466:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002468:	7904      	ldrb	r4, [r0, #4]
 800246a:	2101      	movs	r1, #1
 800246c:	2c09      	cmp	r4, #9
 800246e:	ea4f 6684 	mov.w	r6, r4, lsl #26
 8002472:	fa01 f104 	lsl.w	r1, r1, r4
 8002476:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800247a:	d83a      	bhi.n	80024f2 <RCM_RegisterRegConv+0x15a>
 800247c:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
 8002480:	4329      	orrs	r1, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002482:	0dcc      	lsrs	r4, r1, #23
 8002484:	f004 0404 	and.w	r4, r4, #4
 8002488:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800248a:	6885      	ldr	r5, [r0, #8]
 800248c:	58e0      	ldr	r0, [r4, r3]
 800248e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002492:	2607      	movs	r6, #7
 8002494:	408e      	lsls	r6, r1
 8002496:	408d      	lsls	r5, r1
 8002498:	ea20 0106 	bic.w	r1, r0, r6
 800249c:	4329      	orrs	r1, r5
 800249e:	50e1      	str	r1, [r4, r3]
}
 80024a0:	4610      	mov	r0, r2
 80024a2:	bcf0      	pop	{r4, r5, r6, r7}
 80024a4:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80024a6:	684b      	ldr	r3, [r1, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d035      	beq.n	8002518 <RCM_RegisterRegConv+0x180>
 80024ac:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80024ae:	791d      	ldrb	r5, [r3, #4]
 80024b0:	42a5      	cmp	r5, r4
 80024b2:	d184      	bne.n	80023be <RCM_RegisterRegConv+0x26>
 80024b4:	681d      	ldr	r5, [r3, #0]
 80024b6:	6803      	ldr	r3, [r0, #0]
 80024b8:	42ab      	cmp	r3, r5
 80024ba:	d180      	bne.n	80023be <RCM_RegisterRegConv+0x26>
 80024bc:	2201      	movs	r2, #1
 80024be:	e79a      	b.n	80023f6 <RCM_RegisterRegConv+0x5e>
 80024c0:	682d      	ldr	r5, [r5, #0]
 80024c2:	6803      	ldr	r3, [r0, #0]
 80024c4:	429d      	cmp	r5, r3
 80024c6:	d181      	bne.n	80023cc <RCM_RegisterRegConv+0x34>
      i++;
 80024c8:	2202      	movs	r2, #2
 80024ca:	e794      	b.n	80023f6 <RCM_RegisterRegConv+0x5e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80024cc:	688d      	ldr	r5, [r1, #8]
      i++;
 80024ce:	2201      	movs	r2, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80024d0:	2d00      	cmp	r5, #0
 80024d2:	f47f af78 	bne.w	80023c6 <RCM_RegisterRegConv+0x2e>
 80024d6:	68cb      	ldr	r3, [r1, #12]
 80024d8:	b1e3      	cbz	r3, 8002514 <RCM_RegisterRegConv+0x17c>
 80024da:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80024dc:	791d      	ldrb	r5, [r3, #4]
 80024de:	42a5      	cmp	r5, r4
 80024e0:	f47f af7c 	bne.w	80023dc <RCM_RegisterRegConv+0x44>
 80024e4:	681c      	ldr	r4, [r3, #0]
 80024e6:	6803      	ldr	r3, [r0, #0]
 80024e8:	429c      	cmp	r4, r3
 80024ea:	f47f af77 	bne.w	80023dc <RCM_RegisterRegConv+0x44>
      i++;
 80024ee:	2203      	movs	r2, #3
 80024f0:	e781      	b.n	80023f6 <RCM_RegisterRegConv+0x5e>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80024f2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80024f6:	4331      	orrs	r1, r6
 80024f8:	3d1e      	subs	r5, #30
 80024fa:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 80024fe:	e7c0      	b.n	8002482 <RCM_RegisterRegConv+0xea>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002500:	2a04      	cmp	r2, #4
 8002502:	f67f af6b 	bls.w	80023dc <RCM_RegisterRegConv+0x44>
 8002506:	6803      	ldr	r3, [r0, #0]
 8002508:	e7f1      	b.n	80024ee <RCM_RegisterRegConv+0x156>
 800250a:	2a04      	cmp	r2, #4
 800250c:	bf8c      	ite	hi
 800250e:	2202      	movhi	r2, #2
 8002510:	2200      	movls	r2, #0
 8002512:	e7e0      	b.n	80024d6 <RCM_RegisterRegConv+0x13e>
 8002514:	6803      	ldr	r3, [r0, #0]
 8002516:	e76e      	b.n	80023f6 <RCM_RegisterRegConv+0x5e>
 8002518:	688d      	ldr	r5, [r1, #8]
 800251a:	b115      	cbz	r5, 8002522 <RCM_RegisterRegConv+0x18a>
 800251c:	461a      	mov	r2, r3
 800251e:	7904      	ldrb	r4, [r0, #4]
 8002520:	e751      	b.n	80023c6 <RCM_RegisterRegConv+0x2e>
 8002522:	462a      	mov	r2, r5
 8002524:	e7d7      	b.n	80024d6 <RCM_RegisterRegConv+0x13e>
 8002526:	bf00      	nop
 8002528:	20000bf8 	.word	0x20000bf8
 800252c:	20000bd4 	.word	0x20000bd4
 8002530:	7fffffc0 	.word	0x7fffffc0
 8002534:	20000bbc 	.word	0x20000bbc

08002538 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8002538:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 800253a:	0044      	lsls	r4, r0, #1
 800253c:	1822      	adds	r2, r4, r0
 800253e:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <RCM_ExecRegularConv+0x170>)
 8002540:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002544:	2a00      	cmp	r2, #0
 8002546:	d139      	bne.n	80025bc <RCM_ExecRegularConv+0x84>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8002548:	7819      	ldrb	r1, [r3, #0]
 800254a:	2900      	cmp	r1, #0
 800254c:	d178      	bne.n	8002640 <RCM_ExecRegularConv+0x108>
 800254e:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 8002550:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8002552:	2900      	cmp	r1, #0
 8002554:	d07a      	beq.n	800264c <RCM_ExecRegularConv+0x114>
      {
        if (RCM_NoInj_array [i].next > handle)
 8002556:	7ade      	ldrb	r6, [r3, #11]
 8002558:	4286      	cmp	r6, r0
 800255a:	f200 8097 	bhi.w	800268c <RCM_ExecRegularConv+0x154>
      if (RCM_NoInj_array [i].enable == true)
 800255e:	7b1a      	ldrb	r2, [r3, #12]
 8002560:	2a00      	cmp	r2, #0
 8002562:	f000 8096 	beq.w	8002692 <RCM_ExecRegularConv+0x15a>
        if (RCM_NoInj_array [i].next > handle)
 8002566:	7c5e      	ldrb	r6, [r3, #17]
 8002568:	42b0      	cmp	r0, r6
 800256a:	d305      	bcc.n	8002578 <RCM_ExecRegularConv+0x40>
      if (RCM_NoInj_array [i].enable == true)
 800256c:	7c9a      	ldrb	r2, [r3, #18]
 800256e:	2a00      	cmp	r2, #0
 8002570:	f040 8093 	bne.w	800269a <RCM_ExecRegularConv+0x162>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8002574:	2202      	movs	r2, #2
 8002576:	e070      	b.n	800265a <RCM_ExecRegularConv+0x122>
 8002578:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 800257a:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 800257c:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8002580:	1821      	adds	r1, r4, r0
 8002582:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002586:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 800258a:	714e      	strb	r6, [r1, #5]
 800258c:	4e47      	ldr	r6, [pc, #284]	; (80026ac <RCM_ExecRegularConv+0x174>)
          RCM_NoInj_array [handle].prev = i;
 800258e:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 8002590:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002594:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8002598:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 800259a:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 800259c:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 800259e:	1821      	adds	r1, r4, r0
 80025a0:	0049      	lsls	r1, r1, #1
 80025a2:	185d      	adds	r5, r3, r1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80025a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025a8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    RCM_NoInj_array [handle].status = notvalid;
 80025ac:	2700      	movs	r7, #0
 80025ae:	706f      	strb	r7, [r5, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80025b0:	7852      	ldrb	r2, [r2, #1]
    RCM_NoInj_array [handle].enable = true;
 80025b2:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80025b4:	42aa      	cmp	r2, r5
    RCM_NoInj_array [handle].enable = true;
 80025b6:	545d      	strb	r5, [r3, r1]
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80025b8:	bf18      	it	ne
 80025ba:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80025bc:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <RCM_ExecRegularConv+0x178>)
 80025be:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d132      	bne.n	800262c <RCM_ExecRegularConv+0xf4>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <RCM_ExecRegularConv+0x17c>)
 80025c8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80025cc:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80025ce:	6811      	ldr	r1, [r2, #0]
 80025d0:	2d09      	cmp	r5, #9
 80025d2:	f04f 0201 	mov.w	r2, #1
 80025d6:	ea4f 6785 	mov.w	r7, r5, lsl #26
 80025da:	fa02 f205 	lsl.w	r2, r2, r5
 80025de:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80025e2:	d929      	bls.n	8002638 <RCM_ExecRegularConv+0x100>
 80025e4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80025e8:	433a      	orrs	r2, r7
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80025ea:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80025ec:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  MODIFY_REG(*preg,
 80025f0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80025f2:	0d12      	lsrs	r2, r2, #20
 80025f4:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80025f8:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80025fc:	432a      	orrs	r2, r5
 80025fe:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002600:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002602:	688a      	ldr	r2, [r1, #8]
 8002604:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002608:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800260c:	f042 0204 	orr.w	r2, r2, #4
 8002610:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002612:	680a      	ldr	r2, [r1, #0]
 8002614:	0752      	lsls	r2, r2, #29
 8002616:	d5fc      	bpl.n	8002612 <RCM_ExecRegularConv+0xda>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8002618:	1822      	adds	r2, r4, r0
 800261a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800261e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002620:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002622:	4d22      	ldr	r5, [pc, #136]	; (80026ac <RCM_ExecRegularConv+0x174>)
    RCM_NoInj_array [handle].status = valid;
 8002624:	2102      	movs	r1, #2
 8002626:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002628:	7952      	ldrb	r2, [r2, #5]
 800262a:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 800262c:	4420      	add	r0, r4
 800262e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8002632:	bcf0      	pop	{r4, r5, r6, r7}
 8002634:	8858      	ldrh	r0, [r3, #2]
 8002636:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002638:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 800263c:	4332      	orrs	r2, r6
 800263e:	e7d7      	b.n	80025f0 <RCM_ExecRegularConv+0xb8>
        if (RCM_NoInj_array [i].next > handle)
 8002640:	795e      	ldrb	r6, [r3, #5]
 8002642:	42b0      	cmp	r0, r6
 8002644:	d399      	bcc.n	800257a <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 8002646:	7999      	ldrb	r1, [r3, #6]
 8002648:	2900      	cmp	r1, #0
 800264a:	d184      	bne.n	8002556 <RCM_ExecRegularConv+0x1e>
 800264c:	7b19      	ldrb	r1, [r3, #12]
 800264e:	2900      	cmp	r1, #0
 8002650:	d189      	bne.n	8002566 <RCM_ExecRegularConv+0x2e>
 8002652:	7c99      	ldrb	r1, [r3, #18]
 8002654:	bb09      	cbnz	r1, 800269a <RCM_ExecRegularConv+0x162>
       if (LastEnable != RCM_MAX_CONV )
 8002656:	2a04      	cmp	r2, #4
 8002658:	d014      	beq.n	8002684 <RCM_ExecRegularConv+0x14c>
         formerNext = RCM_NoInj_array [LastEnable].next;
 800265a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800265e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002662:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002664:	f895 c005 	ldrb.w	ip, [r5, #5]
 8002668:	4e10      	ldr	r6, [pc, #64]	; (80026ac <RCM_ExecRegularConv+0x174>)
         RCM_NoInj_array [formerNext].prev = handle;
 800266a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800266e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 8002672:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8002676:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8002678:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 800267c:	7138      	strb	r0, [r7, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 800267e:	7168      	strb	r0, [r5, #5]
 8002680:	7832      	ldrb	r2, [r6, #0]
 8002682:	e78c      	b.n	800259e <RCM_ExecRegularConv+0x66>
         RCM_currentHandle = handle;
 8002684:	4e09      	ldr	r6, [pc, #36]	; (80026ac <RCM_ExecRegularConv+0x174>)
 8002686:	4602      	mov	r2, r0
 8002688:	7030      	strb	r0, [r6, #0]
 800268a:	e788      	b.n	800259e <RCM_ExecRegularConv+0x66>
      i++;
 800268c:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 800268e:	4611      	mov	r1, r2
 8002690:	e774      	b.n	800257c <RCM_ExecRegularConv+0x44>
 8002692:	7c9a      	ldrb	r2, [r3, #18]
 8002694:	b90a      	cbnz	r2, 800269a <RCM_ExecRegularConv+0x162>
      i++;
 8002696:	2201      	movs	r2, #1
 8002698:	e7df      	b.n	800265a <RCM_ExecRegularConv+0x122>
        if (RCM_NoInj_array [i].next > handle)
 800269a:	7dde      	ldrb	r6, [r3, #23]
 800269c:	4286      	cmp	r6, r0
      i++;
 800269e:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 80026a2:	d9da      	bls.n	800265a <RCM_ExecRegularConv+0x122>
 80026a4:	e769      	b.n	800257a <RCM_ExecRegularConv+0x42>
 80026a6:	bf00      	nop
 80026a8:	20000bbc 	.word	0x20000bbc
 80026ac:	20000bb8 	.word	0x20000bb8
 80026b0:	20000328 	.word	0x20000328
 80026b4:	20000bf8 	.word	0x20000bf8

080026b8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80026ba:	4c6c      	ldr	r4, [pc, #432]	; (800286c <RCM_ExecUserConv+0x1b4>)
 80026bc:	7823      	ldrb	r3, [r4, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d000      	beq.n	80026c4 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80026c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <RCM_ExecUserConv+0x1b8>)
  if (RCM_NoInj_array [handle].enable == false)
 80026c6:	4b6b      	ldr	r3, [pc, #428]	; (8002874 <RCM_ExecUserConv+0x1bc>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80026c8:	7810      	ldrb	r0, [r2, #0]
  if (RCM_NoInj_array [handle].enable == false)
 80026ca:	0042      	lsls	r2, r0, #1
 80026cc:	1811      	adds	r1, r2, r0
 80026ce:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 80026d2:	2900      	cmp	r1, #0
 80026d4:	d150      	bne.n	8002778 <RCM_ExecUserConv+0xc0>
      if (RCM_NoInj_array [i].enable == true)
 80026d6:	781d      	ldrb	r5, [r3, #0]
 80026d8:	b1b5      	cbz	r5, 8002708 <RCM_ExecUserConv+0x50>
        if (RCM_NoInj_array [i].next > handle)
 80026da:	795e      	ldrb	r6, [r3, #5]
 80026dc:	42b0      	cmp	r0, r6
 80026de:	d214      	bcs.n	800270a <RCM_ExecUserConv+0x52>
      if (RCM_NoInj_array [i].enable == true)
 80026e0:	460d      	mov	r5, r1
          RCM_NoInj_array [i].next = handle;
 80026e2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80026e6:	1815      	adds	r5, r2, r0
 80026e8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80026ec:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80026f0:	716e      	strb	r6, [r5, #5]
          RCM_NoInj_array [i].next = handle;
 80026f2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80026f6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80026fa:	4e5f      	ldr	r6, [pc, #380]	; (8002878 <RCM_ExecUserConv+0x1c0>)
          RCM_NoInj_array [handle].prev = i;
 80026fc:	7129      	strb	r1, [r5, #4]
          RCM_NoInj_array [i].next = handle;
 80026fe:	7178      	strb	r0, [r7, #5]
 8002700:	7831      	ldrb	r1, [r6, #0]
          RCM_NoInj_array [formerNext].prev = handle;
 8002702:	f88c 0004 	strb.w	r0, [ip, #4]
 8002706:	e026      	b.n	8002756 <RCM_ExecUserConv+0x9e>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002708:	2104      	movs	r1, #4
      if (RCM_NoInj_array [i].enable == true)
 800270a:	799d      	ldrb	r5, [r3, #6]
 800270c:	2d00      	cmp	r5, #0
 800270e:	f000 808e 	beq.w	800282e <RCM_ExecUserConv+0x176>
        if (RCM_NoInj_array [i].next > handle)
 8002712:	7ade      	ldrb	r6, [r3, #11]
 8002714:	42b0      	cmp	r0, r6
 8002716:	f0c0 809c 	bcc.w	8002852 <RCM_ExecUserConv+0x19a>
      if (RCM_NoInj_array [i].enable == true)
 800271a:	7b19      	ldrb	r1, [r3, #12]
 800271c:	2900      	cmp	r1, #0
 800271e:	f040 809b 	bne.w	8002858 <RCM_ExecUserConv+0x1a0>
 8002722:	7c99      	ldrb	r1, [r3, #18]
 8002724:	2900      	cmp	r1, #0
 8002726:	f040 8086 	bne.w	8002836 <RCM_ExecUserConv+0x17e>
      i++;
 800272a:	2101      	movs	r1, #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 800272c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8002730:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002734:	1815      	adds	r5, r2, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002736:	f897 e005 	ldrb.w	lr, [r7, #5]
 800273a:	4e4f      	ldr	r6, [pc, #316]	; (8002878 <RCM_ExecUserConv+0x1c0>)
         RCM_NoInj_array [handle].next = formerNext;
 800273c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 8002740:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8002744:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8002748:	7129      	strb	r1, [r5, #4]
 800274a:	7831      	ldrb	r1, [r6, #0]
         RCM_NoInj_array [handle].next = formerNext;
 800274c:	f885 e005 	strb.w	lr, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8002750:	f88c 0004 	strb.w	r0, [ip, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 8002754:	7178      	strb	r0, [r7, #5]
    RCM_NoInj_array [handle].enable = true;
 8002756:	1815      	adds	r5, r2, r0
 8002758:	006d      	lsls	r5, r5, #1
 800275a:	195f      	adds	r7, r3, r5
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800275c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002760:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RCM_NoInj_array [handle].status = notvalid;
 8002764:	f04f 0c00 	mov.w	ip, #0
 8002768:	f887 c001 	strb.w	ip, [r7, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800276c:	7849      	ldrb	r1, [r1, #1]
    RCM_NoInj_array [handle].enable = true;
 800276e:	2701      	movs	r7, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002770:	42b9      	cmp	r1, r7
    RCM_NoInj_array [handle].enable = true;
 8002772:	555f      	strb	r7, [r3, r5]
      RCM_currentHandle = handle;
 8002774:	bf18      	it	ne
 8002776:	7030      	strbne	r0, [r6, #0]
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002778:	4940      	ldr	r1, [pc, #256]	; (800287c <RCM_ExecUserConv+0x1c4>)
 800277a:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800277e:	2900      	cmp	r1, #0
 8002780:	d143      	bne.n	800280a <RCM_ExecUserConv+0x152>
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002782:	493f      	ldr	r1, [pc, #252]	; (8002880 <RCM_ExecUserConv+0x1c8>)
 8002784:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002788:	790e      	ldrb	r6, [r1, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800278a:	680d      	ldr	r5, [r1, #0]
 800278c:	2e09      	cmp	r6, #9
 800278e:	f04f 0101 	mov.w	r1, #1
 8002792:	ea4f 6c86 	mov.w	ip, r6, lsl #26
 8002796:	fa01 f106 	lsl.w	r1, r1, r6
 800279a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 800279e:	d83e      	bhi.n	800281e <RCM_ExecUserConv+0x166>
 80027a0:	ea4c 5707 	orr.w	r7, ip, r7, lsl #20
 80027a4:	4339      	orrs	r1, r7
  MODIFY_REG(*preg,
 80027a6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80027a8:	0d09      	lsrs	r1, r1, #20
 80027aa:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 80027ae:	f426 66f8 	bic.w	r6, r6, #1984	; 0x7c0
 80027b2:	4331      	orrs	r1, r6
 80027b4:	6329      	str	r1, [r5, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80027b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80027b8:	68a9      	ldr	r1, [r5, #8]
 80027ba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80027be:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80027c2:	f041 0104 	orr.w	r1, r1, #4
 80027c6:	60a9      	str	r1, [r5, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80027c8:	6829      	ldr	r1, [r5, #0]
 80027ca:	0749      	lsls	r1, r1, #29
 80027cc:	d5fc      	bpl.n	80027c8 <RCM_ExecUserConv+0x110>
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80027ce:	4402      	add	r2, r0
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80027d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80027d2:	4d29      	ldr	r5, [pc, #164]	; (8002878 <RCM_ExecUserConv+0x1c0>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80027d4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80027d8:	b289      	uxth	r1, r1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <RCM_ExecUserConv+0x1cc>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80027dc:	8059      	strh	r1, [r3, #2]
    RCM_NoInj_array [handle].status = valid;
 80027de:	2602      	movs	r6, #2
 80027e0:	705e      	strb	r6, [r3, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80027e2:	795b      	ldrb	r3, [r3, #5]
 80027e4:	702b      	strb	r3, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80027e6:	8011      	strh	r1, [r2, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 80027e8:	2302      	movs	r3, #2
 80027ea:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <RCM_ExecUserConv+0x1d0>)
 80027ee:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 80027f2:	2d00      	cmp	r5, #0
 80027f4:	f43f af65 	beq.w	80026c2 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80027f8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80027fc:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80027fe:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002800:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002802:	462b      	mov	r3, r5
}
 8002804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002808:	4718      	bx	r3
 800280a:	4402      	add	r2, r0
 800280c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002810:	4d1c      	ldr	r5, [pc, #112]	; (8002884 <RCM_ExecUserConv+0x1cc>)
 8002812:	785a      	ldrb	r2, [r3, #1]
  retVal = RCM_NoInj_array [handle].value;
 8002814:	8859      	ldrh	r1, [r3, #2]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002816:	8029      	strh	r1, [r5, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002818:	2a00      	cmp	r2, #0
 800281a:	d0e7      	beq.n	80027ec <RCM_ExecUserConv+0x134>
 800281c:	e7e4      	b.n	80027e8 <RCM_ExecUserConv+0x130>
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800281e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002822:	ea41 010c 	orr.w	r1, r1, ip
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002826:	3f1e      	subs	r7, #30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002828:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
 800282c:	e7bb      	b.n	80027a6 <RCM_ExecUserConv+0xee>
      if (RCM_NoInj_array [i].enable == true)
 800282e:	7b1d      	ldrb	r5, [r3, #12]
 8002830:	b995      	cbnz	r5, 8002858 <RCM_ExecUserConv+0x1a0>
 8002832:	7c9d      	ldrb	r5, [r3, #18]
 8002834:	b135      	cbz	r5, 8002844 <RCM_ExecUserConv+0x18c>
        if (RCM_NoInj_array [i].next > handle)
 8002836:	7dde      	ldrb	r6, [r3, #23]
 8002838:	42b0      	cmp	r0, r6
      i++;
 800283a:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array [i].next > handle)
 800283e:	f4bf af75 	bcs.w	800272c <RCM_ExecUserConv+0x74>
 8002842:	e74d      	b.n	80026e0 <RCM_ExecUserConv+0x28>
       if (LastEnable != RCM_MAX_CONV )
 8002844:	2904      	cmp	r1, #4
 8002846:	f47f af71 	bne.w	800272c <RCM_ExecUserConv+0x74>
         RCM_currentHandle = handle;
 800284a:	4e0b      	ldr	r6, [pc, #44]	; (8002878 <RCM_ExecUserConv+0x1c0>)
 800284c:	4601      	mov	r1, r0
 800284e:	7030      	strb	r0, [r6, #0]
 8002850:	e781      	b.n	8002756 <RCM_ExecUserConv+0x9e>
      i++;
 8002852:	2101      	movs	r1, #1
      if (RCM_NoInj_array [i].enable == true)
 8002854:	460d      	mov	r5, r1
 8002856:	e744      	b.n	80026e2 <RCM_ExecUserConv+0x2a>
        if (RCM_NoInj_array [i].next > handle)
 8002858:	7c5e      	ldrb	r6, [r3, #17]
 800285a:	42b0      	cmp	r0, r6
 800285c:	d304      	bcc.n	8002868 <RCM_ExecUserConv+0x1b0>
      if (RCM_NoInj_array [i].enable == true)
 800285e:	7c99      	ldrb	r1, [r3, #18]
 8002860:	2900      	cmp	r1, #0
 8002862:	d1e8      	bne.n	8002836 <RCM_ExecUserConv+0x17e>
      i++;
 8002864:	2102      	movs	r1, #2
 8002866:	e761      	b.n	800272c <RCM_ExecUserConv+0x74>
 8002868:	2102      	movs	r1, #2
 800286a:	e739      	b.n	80026e0 <RCM_ExecUserConv+0x28>
 800286c:	20000bf4 	.word	0x20000bf4
 8002870:	20000bb9 	.word	0x20000bb9
 8002874:	20000bbc 	.word	0x20000bbc
 8002878:	20000bb8 	.word	0x20000bb8
 800287c:	20000328 	.word	0x20000328
 8002880:	20000bf8 	.word	0x20000bf8
 8002884:	20000c08 	.word	0x20000c08
 8002888:	20000bd4 	.word	0x20000bd4

0800288c <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
 800288c:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <RCM_ExecNextConv+0x78>)
 8002890:	481d      	ldr	r0, [pc, #116]	; (8002908 <RCM_ExecNextConv+0x7c>)
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	0054      	lsls	r4, r2, #1
 8002896:	18a3      	adds	r3, r4, r2
 8002898:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800289c:	b35b      	cbz	r3, 80028f6 <RCM_ExecNextConv+0x6a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <RCM_ExecNextConv+0x80>)
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80028a6:	2504      	movs	r5, #4
 80028a8:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80028aa:	791d      	ldrb	r5, [r3, #4]
 80028ac:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80028ae:	2d09      	cmp	r5, #9
 80028b0:	ea4f 6785 	mov.w	r7, r5, lsl #26
 80028b4:	fa03 f305 	lsl.w	r3, r3, r5
 80028b8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80028bc:	d91d      	bls.n	80028fa <RCM_ExecNextConv+0x6e>
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	433b      	orrs	r3, r7
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80028c4:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80028c6:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(*preg,
 80028ca:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80028cc:	0d1b      	lsrs	r3, r3, #20
 80028ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028d2:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80028d6:	432b      	orrs	r3, r5
 80028d8:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80028da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80028dc:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80028de:	4422      	add	r2, r4
 80028e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80028e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	2201      	movs	r2, #1
 80028f2:	608b      	str	r3, [r1, #8]
 80028f4:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80028f6:	bcf0      	pop	{r4, r5, r6, r7}
 80028f8:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80028fa:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 80028fe:	4333      	orrs	r3, r6
 8002900:	e7e3      	b.n	80028ca <RCM_ExecNextConv+0x3e>
 8002902:	bf00      	nop
 8002904:	20000bb8 	.word	0x20000bb8
 8002908:	20000bbc 	.word	0x20000bbc
 800290c:	20000bf8 	.word	0x20000bf8

08002910 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8002910:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8002912:	4c0e      	ldr	r4, [pc, #56]	; (800294c <RCM_ReadOngoingConv+0x3c>)
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <RCM_ReadOngoingConv+0x40>)
 8002916:	7820      	ldrb	r0, [r4, #0]
 8002918:	0042      	lsls	r2, r0, #1
 800291a:	1811      	adds	r1, r2, r0
 800291c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8002920:	784d      	ldrb	r5, [r1, #1]
 8002922:	2d01      	cmp	r5, #1
 8002924:	d006      	beq.n	8002934 <RCM_ReadOngoingConv+0x24>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002926:	4402      	add	r2, r0
 8002928:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800292c:	795b      	ldrb	r3, [r3, #5]
 800292e:	7023      	strb	r3, [r4, #0]
}
 8002930:	bc70      	pop	{r4, r5, r6}
 8002932:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8002934:	4d07      	ldr	r5, [pc, #28]	; (8002954 <RCM_ReadOngoingConv+0x44>)
 8002936:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 800293a:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800293c:	682e      	ldr	r6, [r5, #0]
 800293e:	0776      	lsls	r6, r6, #29
 8002940:	d5f1      	bpl.n	8002926 <RCM_ReadOngoingConv+0x16>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002942:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8002944:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002946:	2502      	movs	r5, #2
 8002948:	704d      	strb	r5, [r1, #1]
 800294a:	e7ec      	b.n	8002926 <RCM_ReadOngoingConv+0x16>
 800294c:	20000bb8 	.word	0x20000bb8
 8002950:	20000bbc 	.word	0x20000bbc
 8002954:	20000bf8 	.word	0x20000bf8

08002958 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_MspInit+0x3c>)
{
 800295a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	661a      	str	r2, [r3, #96]	; 0x60
 8002964:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002966:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002968:	f002 0201 	and.w	r2, r2, #1
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002972:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002976:	659a      	str	r2, [r3, #88]	; 0x58
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002980:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002984:	f001 ffba 	bl	80048fc <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002988:	b003      	add	sp, #12
 800298a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800298e:	f002 bceb 	b.w	8005368 <HAL_PWREx_DisableUCPDDeadBattery>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002998:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800299a:	6802      	ldr	r2, [r0, #0]
{
 800299c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80029a0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80029a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80029ac:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80029ae:	d01f      	beq.n	80029f0 <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_ADC_MspInit+0xe0>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80029b6:	b00a      	add	sp, #40	; 0x28
 80029b8:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80029ba:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_ADC_MspInit+0xe4>)
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029c0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80029c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029c4:	d04d      	beq.n	8002a62 <HAL_ADC_MspInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_ADC_MspInit+0xe8>)
 80029c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80029d8:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029da:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80029dc:	a905      	add	r1, sp, #20
 80029de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f002 fad0 	bl	8004f8c <HAL_GPIO_Init>
}
 80029ec:	b00a      	add	sp, #40	; 0x28
 80029ee:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_ADC_MspInit+0xe4>)
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029f6:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80029f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029fa:	d027      	beq.n	8002a4c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_ADC_MspInit+0xe8>)
 80029fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a08:	f002 0201 	and.w	r2, r2, #1
 8002a0c:	9201      	str	r2, [sp, #4]
 8002a0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a12:	f042 0202 	orr.w	r2, r2, #2
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a20:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002a22:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	a905      	add	r1, sp, #20
 8002a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a2c:	e9cd 3405 	strd	r3, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f002 faac 	bl	8004f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002a34:	f244 0202 	movw	r2, #16386	; 0x4002
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	a905      	add	r1, sp, #20
 8002a3c:	4811      	ldr	r0, [pc, #68]	; (8002a84 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002a40:	e9cd 2405 	strd	r2, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f002 faa2 	bl	8004f8c <HAL_GPIO_Init>
}
 8002a48:	b00a      	add	sp, #40	; 0x28
 8002a4a:	bd10      	pop	{r4, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_ADC_MspInit+0xe8>)
 8002a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	9b00      	ldr	r3, [sp, #0]
 8002a60:	e7cc      	b.n	80029fc <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_ADC_MspInit+0xe8>)
 8002a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a72:	9303      	str	r3, [sp, #12]
 8002a74:	9b03      	ldr	r3, [sp, #12]
 8002a76:	e7a6      	b.n	80029c6 <HAL_ADC_MspInit+0x2e>
 8002a78:	50000100 	.word	0x50000100
 8002a7c:	2000066c 	.word	0x2000066c
 8002a80:	40021000 	.word	0x40021000
 8002a84:	48000400 	.word	0x48000400

08002a88 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002a88:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8002a8a:	6802      	ldr	r2, [r0, #0]
 8002a8c:	492c      	ldr	r1, [pc, #176]	; (8002b40 <HAL_COMP_MspInit+0xb8>)
{
 8002a8e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8002a92:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002a98:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002a9c:	9307      	str	r3, [sp, #28]
  if(hcomp->Instance==COMP1)
 8002a9e:	d007      	beq.n	8002ab0 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_COMP_MspInit+0xbc>)
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d033      	beq.n	8002b0e <HAL_COMP_MspInit+0x86>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_COMP_MspInit+0xc0>)
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d019      	beq.n	8002ae0 <HAL_COMP_MspInit+0x58>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8002aac:	b008      	add	sp, #32
 8002aae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8002aca:	2202      	movs	r2, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002acc:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f002 fa58 	bl	8004f8c <HAL_GPIO_Init>
}
 8002adc:	b008      	add	sp, #32
 8002ade:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002ae4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002aea:	4818      	ldr	r0, [pc, #96]	; (8002b4c <HAL_COMP_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	f042 0202 	orr.w	r2, r2, #2
 8002af0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002afa:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002afc:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002afe:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b02:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f002 fa41 	bl	8004f8c <HAL_GPIO_Init>
}
 8002b0a:	b008      	add	sp, #32
 8002b0c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002b12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002b26:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b28:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	a903      	add	r1, sp, #12
 8002b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b32:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002b36:	f002 fa29 	bl	8004f8c <HAL_GPIO_Init>
}
 8002b3a:	b008      	add	sp, #32
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	bf00      	nop
 8002b40:	40010200 	.word	0x40010200
 8002b44:	40010204 	.word	0x40010204
 8002b48:	4001020c 	.word	0x4001020c
 8002b4c:	48000400 	.word	0x48000400

08002b50 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002b50:	6802      	ldr	r2, [r0, #0]
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_CORDIC_MspInit+0x2c>)
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d000      	beq.n	8002b5a <HAL_CORDIC_MspInit+0xa>
 8002b58:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002b5a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8002b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8002b6a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002b76:	b002      	add	sp, #8
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40020c00 	.word	0x40020c00

08002b80 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b80:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 8002b82:	6802      	ldr	r2, [r0, #0]
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_FDCAN_MspInit+0xa8>)
{
 8002b86:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 8002b8a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b90:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002b94:	9407      	str	r4, [sp, #28]
  if(hfdcan->Instance==FDCAN1)
 8002b96:	d001      	beq.n	8002b9c <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002b98:	b008      	add	sp, #32
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b9c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2602      	movs	r6, #2
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ba2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ba4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8002baa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bac:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bbe:	f002 0201 	and.w	r2, r2, #1
 8002bc2:	9201      	str	r2, [sp, #4]
 8002bc4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc8:	f042 0202 	orr.w	r2, r2, #2
 8002bcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002bd6:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	a903      	add	r1, sp, #12
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002be4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f002 f9cf 	bl	8004f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bee:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	a903      	add	r1, sp, #12
 8002bf4:	480d      	ldr	r0, [pc, #52]	; (8002c2c <HAL_FDCAN_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bf6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002bfa:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f002 f9c4 	bl	8004f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002c04:	4622      	mov	r2, r4
 8002c06:	4621      	mov	r1, r4
 8002c08:	2015      	movs	r0, #21
 8002c0a:	f001 fe89 	bl	8004920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002c0e:	2015      	movs	r0, #21
 8002c10:	f001 febc 	bl	800498c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002c14:	4622      	mov	r2, r4
 8002c16:	4621      	mov	r1, r4
 8002c18:	2016      	movs	r0, #22
 8002c1a:	f001 fe81 	bl	8004920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002c1e:	2016      	movs	r0, #22
 8002c20:	f001 feb4 	bl	800498c <HAL_NVIC_EnableIRQ>
}
 8002c24:	b008      	add	sp, #32
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	40006400 	.word	0x40006400
 8002c2c:	48000400 	.word	0x48000400

08002c30 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002c30:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8002c32:	6802      	ldr	r2, [r0, #0]
 8002c34:	492b      	ldr	r1, [pc, #172]	; (8002ce4 <HAL_OPAMP_MspInit+0xb4>)
{
 8002c36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8002c3a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002c40:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002c44:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP1)
 8002c46:	d007      	beq.n	8002c58 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_OPAMP_MspInit+0xb8>)
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d032      	beq.n	8002cb4 <HAL_OPAMP_MspInit+0x84>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_OPAMP_MspInit+0xbc>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d019      	beq.n	8002c88 <HAL_OPAMP_MspInit+0x58>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002c54:	b008      	add	sp, #32
 8002c56:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c5c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8002c72:	220e      	movs	r2, #14
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c74:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f002 f984 	bl	8004f8c <HAL_GPIO_Init>
}
 8002c84:	b008      	add	sp, #32
 8002c86:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c88:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002c8c:	33f8      	adds	r3, #248	; 0xf8
 8002c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	4817      	ldr	r0, [pc, #92]	; (8002cf0 <HAL_OPAMP_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	f042 0202 	orr.w	r2, r2, #2
 8002c96:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8002ca0:	2207      	movs	r2, #7
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f002 f96e 	bl	8004f8c <HAL_GPIO_Init>
}
 8002cb0:	b008      	add	sp, #32
 8002cb2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002cb8:	33fc      	adds	r3, #252	; 0xfc
 8002cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8002cca:	22e0      	movs	r2, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	a903      	add	r1, sp, #12
 8002cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd4:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cda:	f002 f957 	bl	8004f8c <HAL_GPIO_Init>
}
 8002cde:	b008      	add	sp, #32
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40010300 	.word	0x40010300
 8002ce8:	40010304 	.word	0x40010304
 8002cec:	40010308 	.word	0x40010308
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf4:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8002cf6:	6803      	ldr	r3, [r0, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_TIM_Base_MspInit+0x90>)
 8002cfa:	4293      	cmp	r3, r2
{
 8002cfc:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8002cfe:	d008      	beq.n	8002d12 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d027      	beq.n	8002d56 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002d06:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <HAL_TIM_Base_MspInit+0x94>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <HAL_TIM_Base_MspInit+0x38>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d0c:	b005      	add	sp, #20
 8002d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_TIM_Base_MspInit+0x98>)
 8002d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d1a:	661a      	str	r2, [r3, #96]	; 0x60
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	9b01      	ldr	r3, [sp, #4]
}
 8002d26:	b005      	add	sp, #20
 8002d28:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_TIM_Base_MspInit+0x98>)
 8002d2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d30:	f042 0202 	orr.w	r2, r2, #2
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d38:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d40:	4611      	mov	r1, r2
 8002d42:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d44:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d46:	f001 fdeb 	bl	8004920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d4a:	201d      	movs	r0, #29
}
 8002d4c:	b005      	add	sp, #20
 8002d4e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d52:	f001 be1b 	b.w	800498c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d5a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d6e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d70:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d72:	f001 fdd5 	bl	8004920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d76:	201c      	movs	r0, #28
}
 8002d78:	b005      	add	sp, #20
 8002d7a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d7e:	f001 be05 	b.w	800498c <HAL_NVIC_EnableIRQ>
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d90:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8002d92:	6801      	ldr	r1, [r0, #0]
 8002d94:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x60>)
{
 8002d96:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8002d9a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002da0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002da4:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM4)
 8002da6:	d001      	beq.n	8002dac <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002da8:	b008      	add	sp, #32
 8002daa:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002db0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	480f      	ldr	r0, [pc, #60]	; (8002df4 <HAL_TIM_Encoder_MspInit+0x64>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002db6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002db8:	f042 0204 	orr.w	r2, r2, #4
 8002dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dc0:	f002 0204 	and.w	r2, r2, #4
 8002dc4:	9201      	str	r2, [sp, #4]
 8002dc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dca:	f042 0202 	orr.w	r2, r2, #2
 8002dce:	64da      	str	r2, [r3, #76]	; 0x4c
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002dd8:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002de0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f002 f8d1 	bl	8004f8c <HAL_GPIO_Init>
}
 8002dea:	b008      	add	sp, #32
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	bf00      	nop
 8002df0:	40000800 	.word	0x40000800
 8002df4:	48000400 	.word	0x48000400

08002df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002df8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002dfa:	6801      	ldr	r1, [r0, #0]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <HAL_TIM_MspPostInit+0xa8>)
{
 8002dfe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002e02:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002e08:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002e0c:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8002e0e:	d001      	beq.n	8002e14 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e10:	b009      	add	sp, #36	; 0x24
 8002e12:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002e20:	4820      	ldr	r0, [pc, #128]	; (8002ea4 <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	f042 0204 	orr.w	r2, r2, #4
 8002e26:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e2a:	f002 0204 	and.w	r2, r2, #4
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e34:	f042 0202 	orr.w	r2, r2, #2
 8002e38:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e3c:	f002 0202 	and.w	r2, r2, #2
 8002e40:	9201      	str	r2, [sp, #4]
 8002e42:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002e54:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002e5e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e64:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f002 f890 	bl	8004f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002e70:	a903      	add	r1, sp, #12
 8002e72:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <HAL_TIM_MspPostInit+0xb0>)
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002e74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e76:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002e7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f002 f885 	bl	8004f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002e82:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002e86:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e88:	a903      	add	r1, sp, #12
 8002e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e8e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e92:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002e94:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002e96:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f002 f878 	bl	8004f8c <HAL_GPIO_Init>
}
 8002e9c:	b009      	add	sp, #36	; 0x24
 8002e9e:	bd30      	pop	{r4, r5, pc}
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	48000800 	.word	0x48000800
 8002ea8:	48000400 	.word	0x48000400

08002eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eac:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002eae:	6801      	ldr	r1, [r0, #0]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_UART_MspInit+0x60>)
{
 8002eb2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002eb6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002ebc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002ec0:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ec4:	b009      	add	sp, #36	; 0x24
 8002ec6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ecc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed0:	480f      	ldr	r0, [pc, #60]	; (8002f10 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ed2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ed4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58
 8002eda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002edc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ee6:	f042 0202 	orr.w	r2, r2, #2
 8002eea:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ef6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002efa:	2418      	movs	r4, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efc:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002efe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f04:	f002 f842 	bl	8004f8c <HAL_GPIO_Init>
}
 8002f08:	b009      	add	sp, #36	; 0x24
 8002f0a:	bd30      	pop	{r4, r5, pc}
 8002f0c:	40004400 	.word	0x40004400
 8002f10:	48000400 	.word	0x48000400

08002f14 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002f14:	4801      	ldr	r0, [pc, #4]	; (8002f1c <FDCAN1_IT0_IRQHandler+0x8>)
 8002f16:	f001 bf6f 	b.w	8004df8 <HAL_FDCAN_IRQHandler>
 8002f1a:	bf00      	nop
 8002f1c:	20000910 	.word	0x20000910

08002f20 <FDCAN1_IT1_IRQHandler>:
 8002f20:	4801      	ldr	r0, [pc, #4]	; (8002f28 <FDCAN1_IT1_IRQHandler+0x8>)
 8002f22:	f001 bf69 	b.w	8004df8 <HAL_FDCAN_IRQHandler>
 8002f26:	bf00      	nop
 8002f28:	20000910 	.word	0x20000910

08002f2c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <TIM2_IRQHandler+0x8>)
 8002f2e:	f003 bd35 	b.w	800699c <HAL_TIM_IRQHandler>
 8002f32:	bf00      	nop
 8002f34:	200009e4 	.word	0x200009e4

08002f38 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f38:	4801      	ldr	r0, [pc, #4]	; (8002f40 <TIM3_IRQHandler+0x8>)
 8002f3a:	f003 bd2f 	b.w	800699c <HAL_TIM_IRQHandler>
 8002f3e:	bf00      	nop
 8002f40:	200007cc 	.word	0x200007cc

08002f44 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8002f4c:	f7fe bcea 	b.w	8001924 <TSK_HighFrequencyTask>

08002f50 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002f52:	4804      	ldr	r0, [pc, #16]	; (8002f64 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002f54:	f06f 0201 	mvn.w	r2, #1
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	f005 bd57 	b.w	8008a0c <R3_2_TIMx_UP_IRQHandler>
 8002f5e:	bf00      	nop
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	20000328 	.word	0x20000328

08002f68 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002f68:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	0611      	lsls	r1, r2, #24
 8002f70:	d40d      	bmi.n	8002f8e <TIM1_BRK_TIM15_IRQHandler+0x26>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	05d2      	lsls	r2, r2, #23
 8002f78:	d505      	bpl.n	8002f86 <TIM1_BRK_TIM15_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f7e:	611a      	str	r2, [r3, #16]
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8002f80:	4807      	ldr	r0, [pc, #28]	; (8002fa0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002f82:	f005 fd8f 	bl	8008aa4 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002f8a:	f7fe bca7 	b.w	80018dc <MC_Scheduler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002f8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f92:	611a      	str	r2, [r3, #16]
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002f96:	f005 fda5 	bl	8008ae4 <R3_2_BRK_IRQHandler>
 8002f9a:	e7ea      	b.n	8002f72 <TIM1_BRK_TIM15_IRQHandler+0xa>
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	20000328 	.word	0x20000328

08002fa4 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002fa4:	4806      	ldr	r0, [pc, #24]	; (8002fc0 <TIM4_IRQHandler+0x1c>)
 8002fa6:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	07d1      	lsls	r1, r2, #31
 8002fac:	d502      	bpl.n	8002fb4 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	07d2      	lsls	r2, r2, #31
 8002fb2:	d400      	bmi.n	8002fb6 <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002fb4:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002fb6:	f06f 0201 	mvn.w	r2, #1
 8002fba:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8002fbc:	f004 bc06 	b.w	80077cc <ENC_IRQHandler>
 8002fc0:	20000274 	.word	0x20000274

08002fc4 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002fc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002fc6:	4c19      	ldr	r4, [pc, #100]	; (800302c <USART2_IRQHandler+0x68>)
 8002fc8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	0691      	lsls	r1, r2, #26
 8002fd0:	d417      	bmi.n	8003002 <USART2_IRQHandler+0x3e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	0612      	lsls	r2, r2, #24
 8002fd6:	d40e      	bmi.n	8002ff6 <USART2_IRQHandler+0x32>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	071b      	lsls	r3, r3, #28
 8002fdc:	d400      	bmi.n	8002fe0 <USART2_IRQHandler+0x1c>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002fde:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002fe0:	4812      	ldr	r0, [pc, #72]	; (800302c <USART2_IRQHandler+0x68>)
 8002fe2:	f006 fcb9 	bl	8009958 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002fe6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002fea:	2208      	movs	r2, #8
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002ff2:	f000 b8e7 	b.w	80031c4 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <USART2_IRQHandler+0x68>)
 8002ff8:	f006 fb78 	bl	80096ec <UFCP_TX_IRQ_Handler>
 8002ffc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003000:	e7ea      	b.n	8002fd8 <USART2_IRQHandler+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003002:	6a59      	ldr	r1, [r3, #36]	; 0x24
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8003004:	4620      	mov	r0, r4
 8003006:	b2c9      	uxtb	r1, r1
 8003008:	f006 fc44 	bl	8009894 <UFCP_RX_IRQ_Handler>
 800300c:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800300e:	2b01      	cmp	r3, #1
 8003010:	d007      	beq.n	8003022 <USART2_IRQHandler+0x5e>
    if (retVal == 2)
 8003012:	2b02      	cmp	r3, #2
 8003014:	d002      	beq.n	800301c <USART2_IRQHandler+0x58>
 8003016:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800301a:	e7da      	b.n	8002fd2 <USART2_IRQHandler+0xe>
      UI_SerialCommunicationTimeOutStop();
 800301c:	f000 f8d2 	bl	80031c4 <UI_SerialCommunicationTimeOutStop>
 8003020:	e7f9      	b.n	8003016 <USART2_IRQHandler+0x52>
      UI_SerialCommunicationTimeOutStart();
 8003022:	f000 f8d5 	bl	80031d0 <UI_SerialCommunicationTimeOutStart>
 8003026:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800302a:	e7d2      	b.n	8002fd2 <USART2_IRQHandler+0xe>
 800302c:	20000000 	.word	0x20000000

08003030 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003030:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003032:	f7fe fd65 	bl	8001b00 <TSK_HardwareFaultTask>
 8003036:	4c1a      	ldr	r4, [pc, #104]	; (80030a0 <HardFault_Handler+0x70>)
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003038:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 800303a:	4625      	mov	r5, r4
 800303c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	0712      	lsls	r2, r2, #28
 8003044:	d41d      	bmi.n	8003082 <HardFault_Handler+0x52>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	0610      	lsls	r0, r2, #24
 800304a:	d40f      	bmi.n	800306c <HardFault_Handler+0x3c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	0692      	lsls	r2, r2, #26
 8003050:	d5f6      	bpl.n	8003040 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003052:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8003054:	4628      	mov	r0, r5
 8003056:	b2c9      	uxtb	r1, r1
 8003058:	f006 fc1c 	bl	8009894 <UFCP_RX_IRQ_Handler>
 800305c:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800305e:	2b01      	cmp	r3, #1
 8003060:	d01a      	beq.n	8003098 <HardFault_Handler+0x68>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8003062:	2b02      	cmp	r3, #2
 8003064:	d1ea      	bne.n	800303c <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8003066:	f000 f8ad 	bl	80031c4 <UI_SerialCommunicationTimeOutStop>
 800306a:	e7e7      	b.n	800303c <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 800306c:	4628      	mov	r0, r5
 800306e:	f006 fb3d 	bl	80096ec <UFCP_TX_IRQ_Handler>
 8003072:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	0691      	lsls	r1, r2, #26
 800307a:	d4ea      	bmi.n	8003052 <HardFault_Handler+0x22>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	0712      	lsls	r2, r2, #28
 8003080:	d5e1      	bpl.n	8003046 <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003082:	4628      	mov	r0, r5
 8003084:	f006 fc68 	bl	8009958 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003088:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800308c:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 800308e:	f000 f899 	bl	80031c4 <UI_SerialCommunicationTimeOutStop>
 8003092:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003096:	e7d6      	b.n	8003046 <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8003098:	f000 f89a 	bl	80031d0 <UI_SerialCommunicationTimeOutStart>
 800309c:	e7ce      	b.n	800303c <HardFault_Handler+0xc>
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80030a4:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80030a6:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <SysTick_Handler+0x2c>)
 80030a8:	7823      	ldrb	r3, [r4, #0]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d009      	beq.n	80030c2 <SysTick_Handler+0x1e>
 80030ae:	3301      	adds	r3, #1
 80030b0:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80030b2:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 80030b4:	f7fe fd14 	bl	8001ae0 <MC_RunMotorControlTasks>
    TC_IncTick(&pPosCtrlM1);
 80030b8:	4806      	ldr	r0, [pc, #24]	; (80030d4 <SysTick_Handler+0x30>)

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80030ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&pPosCtrlM1);
 80030be:	f006 bb0f 	b.w	80096e0 <TC_IncTick>
    HAL_IncTick();
 80030c2:	f000 fccf 	bl	8003a64 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80030c6:	f001 fc8b 	bl	80049e0 <HAL_SYSTICK_IRQHandler>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e7f1      	b.n	80030b2 <SysTick_Handler+0xe>
 80030ce:	bf00      	nop
 80030d0:	20000614 	.word	0x20000614
 80030d4:	200003d8 	.word	0x200003d8

080030d8 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <EXTI15_10_IRQHandler+0x14>)
 80030da:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 80030dc:	0552      	lsls	r2, r2, #21
 80030de:	d400      	bmi.n	80030e2 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 80030e0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80030e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e6:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 80030e8:	f000 b878 	b.w	80031dc <UI_HandleStartStopButton_cb>
 80030ec:	40010400 	.word	0x40010400

080030f0 <EXTI9_5_IRQHandler>:
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <EXTI9_5_IRQHandler+0x18>)
 80030f2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles M1 Encoder Index IRQ on PIN PB8.
  */
void EXTI9_5_IRQHandler (void)
{
	/* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_8))
 80030f4:	05d2      	lsls	r2, r2, #23
 80030f6:	d400      	bmi.n	80030fa <EXTI9_5_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_8);
    TC_EncoderReset(&pPosCtrlM1);
  }

}
 80030f8:	4770      	bx	lr
  WRITE_REG(EXTI->PR1, ExtiLine);
 80030fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fe:	615a      	str	r2, [r3, #20]
    TC_EncoderReset(&pPosCtrlM1);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <EXTI9_5_IRQHandler+0x1c>)
 8003102:	f006 bab5 	b.w	8009670 <TC_EncoderReset>
 8003106:	bf00      	nop
 8003108:	40010400 	.word	0x40010400
 800310c:	200003d8 	.word	0x200003d8

08003110 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8003114:	4d16      	ldr	r5, [pc, #88]	; (8003170 <UI_TaskInit+0x60>)
    pMCP = &MCP_UI_Params;
 8003116:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003188 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 800311a:	4e16      	ldr	r6, [pc, #88]	; (8003174 <UI_TaskInit+0x64>)
{
 800311c:	4682      	mov	sl, r0
 800311e:	460f      	mov	r7, r1
 8003120:	4690      	mov	r8, r2
 8003122:	4699      	mov	r9, r3
    pMCP->_Super = UI_Params;
 8003124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003126:	4664      	mov	r4, ip
 8003128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800312a:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 800312e:	b083      	sub	sp, #12
    pMCP = &MCP_UI_Params;
 8003130:	4d11      	ldr	r5, [pc, #68]	; (8003178 <UI_TaskInit+0x68>)
{
 8003132:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    pMCP = &MCP_UI_Params;
 8003136:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 800313a:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 800313e:	4630      	mov	r0, r6
 8003140:	f006 fad2 	bl	80096e8 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <UI_TaskInit+0x6c>)
 8003146:	6828      	ldr	r0, [r5, #0]
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <UI_TaskInit+0x70>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	4631      	mov	r1, r6
 800314e:	f8cd b004 	str.w	fp, [sp, #4]
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <UI_TaskInit+0x74>)
 8003154:	f7ff f8d2 	bl	80022fc <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003158:	6828      	ldr	r0, [r5, #0]
 800315a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800315e:	464b      	mov	r3, r9
 8003160:	4642      	mov	r2, r8
 8003162:	4639      	mov	r1, r7

}
 8003164:	b003      	add	sp, #12
 8003166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800316a:	f000 b843 	b.w	80031f4 <UI_Init>
 800316e:	bf00      	nop
 8003170:	20000644 	.word	0x20000644
 8003174:	20000000 	.word	0x20000000
 8003178:	20000670 	.word	0x20000670
 800317c:	08009975 	.word	0x08009975
 8003180:	08009771 	.word	0x08009771
 8003184:	0800974d 	.word	0x0800974d
 8003188:	20000c0c 	.word	0x20000c0c

0800318c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <UI_Scheduler+0x30>)
 800318e:	889a      	ldrh	r2, [r3, #4]
 8003190:	b292      	uxth	r2, r2
 8003192:	b11a      	cbz	r2, 800319c <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003194:	889a      	ldrh	r2, [r3, #4]
 8003196:	3a01      	subs	r2, #1
 8003198:	b292      	uxth	r2, r2
 800319a:	809a      	strh	r2, [r3, #4]
  }

  if(bCOMTimeoutCounter > 1u)
 800319c:	88da      	ldrh	r2, [r3, #6]
 800319e:	2a01      	cmp	r2, #1
 80031a0:	d903      	bls.n	80031aa <UI_Scheduler+0x1e>
  {
    bCOMTimeoutCounter--;
 80031a2:	88da      	ldrh	r2, [r3, #6]
 80031a4:	3a01      	subs	r2, #1
 80031a6:	b292      	uxth	r2, r2
 80031a8:	80da      	strh	r2, [r3, #6]
  }

  if(bCOMATRTimeCounter > 1u)
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <UI_Scheduler+0x34>)
 80031ac:	8813      	ldrh	r3, [r2, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d903      	bls.n	80031ba <UI_Scheduler+0x2e>
  {
    bCOMATRTimeCounter--;
 80031b2:	8813      	ldrh	r3, [r2, #0]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8013      	strh	r3, [r2, #0]
  }
}
 80031ba:	4770      	bx	lr
 80031bc:	20000670 	.word	0x20000670
 80031c0:	20000616 	.word	0x20000616

080031c4 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80031c4:	4b01      	ldr	r3, [pc, #4]	; (80031cc <UI_SerialCommunicationTimeOutStop+0x8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	80da      	strh	r2, [r3, #6]
}
 80031ca:	4770      	bx	lr
 80031cc:	20000670 	.word	0x20000670

080031d0 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <UI_SerialCommunicationTimeOutStart+0x8>)
 80031d2:	224f      	movs	r2, #79	; 0x4f
 80031d4:	80da      	strh	r2, [r3, #6]
}
 80031d6:	4770      	bx	lr
 80031d8:	20000670 	.word	0x20000670

080031dc <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80031dc:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 80031de:	f7fd feeb 	bl	8000fb8 <MC_GetSTMStateMotor1>
 80031e2:	b118      	cbz	r0, 80031ec <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80031e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 80031e8:	f7fd bed4 	b.w	8000f94 <MC_StopMotor1>
}
 80031ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 80031f0:	f7fd beca 	b.w	8000f88 <MC_StartMotor1>

080031f4 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80031f4:	b430      	push	{r4, r5}
 80031f6:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80031f8:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80031fa:	2500      	movs	r5, #0
 80031fc:	7505      	strb	r5, [r0, #20]
  pHandle->bDriveNum = bMCNum;
 80031fe:	7101      	strb	r1, [r0, #4]
  pHandle->pMCT = pMCT;
 8003200:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8003204:	bc30      	pop	{r4, r5}
 8003206:	4770      	bx	lr

08003208 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8003208:	7903      	ldrb	r3, [r0, #4]
 800320a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800320c:	bf86      	itte	hi
 800320e:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8003210:	2001      	movhi	r0, #1
    retVal = false;
 8003212:	2000      	movls	r0, #0
  }
  return retVal;
}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8003218:	7d00      	ldrb	r0, [r0, #20]
 800321a:	4770      	bx	lr

0800321c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800321c:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800321e:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003222:	7d03      	ldrb	r3, [r0, #20]
{
 8003224:	b085      	sub	sp, #20
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003226:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800322a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 800322e:	2988      	cmp	r1, #136	; 0x88
 8003230:	f200 80cc 	bhi.w	80033cc <UI_SetReg+0x1b0>
 8003234:	e8df f001 	tbb	[pc, r1]
 8003238:	51caca4d 	.word	0x51caca4d
 800323c:	645e58ca 	.word	0x645e58ca
 8003240:	847e786a 	.word	0x847e786a
 8003244:	a49e988a 	.word	0xa49e988a
 8003248:	cacacaca 	.word	0xcacacaca
 800324c:	cacacaca 	.word	0xcacacaca
 8003250:	cacacaca 	.word	0xcacacaca
 8003254:	cacacaca 	.word	0xcacacaca
 8003258:	cacacaca 	.word	0xcacacaca
 800325c:	cacacaca 	.word	0xcacacaca
 8003260:	cacacaca 	.word	0xcacacaca
 8003264:	cacacaca 	.word	0xcacacaca
 8003268:	cacacaca 	.word	0xcacacaca
 800326c:	cacacaca 	.word	0xcacacaca
 8003270:	cacacaca 	.word	0xcacacaca
 8003274:	cacacaca 	.word	0xcacacaca
 8003278:	cacaaaca 	.word	0xcacaaaca
 800327c:	cacacaca 	.word	0xcacacaca
 8003280:	cacacaca 	.word	0xcacacaca
 8003284:	cacacaca 	.word	0xcacacaca
 8003288:	cacacaca 	.word	0xcacacaca
 800328c:	cacacaca 	.word	0xcacacaca
 8003290:	b0cacaca 	.word	0xb0cacaca
 8003294:	cacacaca 	.word	0xcacacaca
 8003298:	cacacaca 	.word	0xcacacaca
 800329c:	cacacaca 	.word	0xcacacaca
 80032a0:	cacacaca 	.word	0xcacacaca
 80032a4:	cacacaca 	.word	0xcacacaca
 80032a8:	cacacaca 	.word	0xcacacaca
 80032ac:	cacacaca 	.word	0xcacacaca
 80032b0:	cacacaca 	.word	0xcacacaca
 80032b4:	cacacaca 	.word	0xcacacaca
 80032b8:	cacacaca 	.word	0xcacacaca
 80032bc:	c3bccaca 	.word	0xc3bccaca
 80032c0:	45          	.byte	0x45
 80032c1:	00          	.byte	0x00
    }
    break;

  case MC_PROTOCOL_REG_POSITION_KD:
    {
      PID_SetKD(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	b211      	sxth	r1, r2
 80032c6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80032c8:	f004 fb56 	bl	8007978 <PID_SetKD>
  bool retVal = true;
 80032cc:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 80032ce:	b005      	add	sp, #20
 80032d0:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80032d2:	b2d1      	uxtb	r1, r2
 80032d4:	f7ff ff98 	bl	8003208 <UI_SelectMC>
    break;
 80032d8:	e7f9      	b.n	80032ce <UI_SetReg+0xb2>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80032da:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 80032de:	d077      	beq.n	80033d0 <UI_SetReg+0x1b4>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80032e0:	2c01      	cmp	r4, #1
 80032e2:	d07f      	beq.n	80033e4 <UI_SetReg+0x1c8>
  bool retVal = true;
 80032e4:	2001      	movs	r0, #1
 80032e6:	e7f2      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	b211      	sxth	r1, r2
 80032ec:	f004 fb32 	bl	8007954 <PID_SetKP>
  bool retVal = true;
 80032f0:	2001      	movs	r0, #1
    break;
 80032f2:	e7ec      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	b211      	sxth	r1, r2
 80032f8:	f004 fb2e 	bl	8007958 <PID_SetKI>
  bool retVal = true;
 80032fc:	2001      	movs	r0, #1
    break;
 80032fe:	e7e6      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	b211      	sxth	r1, r2
 8003304:	f004 fb38 	bl	8007978 <PID_SetKD>
  bool retVal = true;
 8003308:	2001      	movs	r0, #1
    break;
 800330a:	e7e0      	b.n	80032ce <UI_SetReg+0xb2>
      currComp = MCI_GetIqdref(pMCI);
 800330c:	4628      	mov	r0, r5
 800330e:	9201      	str	r2, [sp, #4]
 8003310:	f7fd ff4a 	bl	80011a8 <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 8003314:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 8003316:	9003      	str	r0, [sp, #12]
      currComp.q = (int16_t)wValue;
 8003318:	f8ad 200c 	strh.w	r2, [sp, #12]
      MCI_SetCurrentReferences(pMCI,currComp);
 800331c:	4628      	mov	r0, r5
 800331e:	9903      	ldr	r1, [sp, #12]
 8003320:	f7fd fe74 	bl	800100c <MCI_SetCurrentReferences>
  bool retVal = true;
 8003324:	2001      	movs	r0, #1
    break;
 8003326:	e7d2      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003328:	6858      	ldr	r0, [r3, #4]
 800332a:	b211      	sxth	r1, r2
 800332c:	f004 fb12 	bl	8007954 <PID_SetKP>
  bool retVal = true;
 8003330:	2001      	movs	r0, #1
    break;
 8003332:	e7cc      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003334:	6858      	ldr	r0, [r3, #4]
 8003336:	b211      	sxth	r1, r2
 8003338:	f004 fb0e 	bl	8007958 <PID_SetKI>
  bool retVal = true;
 800333c:	2001      	movs	r0, #1
    break;
 800333e:	e7c6      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003340:	6858      	ldr	r0, [r3, #4]
 8003342:	b211      	sxth	r1, r2
 8003344:	f004 fb18 	bl	8007978 <PID_SetKD>
  bool retVal = true;
 8003348:	2001      	movs	r0, #1
    break;
 800334a:	e7c0      	b.n	80032ce <UI_SetReg+0xb2>
      currComp = MCI_GetIqdref(pMCI);
 800334c:	4628      	mov	r0, r5
 800334e:	9201      	str	r2, [sp, #4]
 8003350:	f7fd ff2a 	bl	80011a8 <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 8003354:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 8003356:	9003      	str	r0, [sp, #12]
      currComp.d = (int16_t)wValue;
 8003358:	f8ad 200e 	strh.w	r2, [sp, #14]
      MCI_SetCurrentReferences(pMCI,currComp);
 800335c:	4628      	mov	r0, r5
 800335e:	9903      	ldr	r1, [sp, #12]
 8003360:	f7fd fe54 	bl	800100c <MCI_SetCurrentReferences>
  bool retVal = true;
 8003364:	2001      	movs	r0, #1
    break;
 8003366:	e7b2      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003368:	6898      	ldr	r0, [r3, #8]
 800336a:	b211      	sxth	r1, r2
 800336c:	f004 faf2 	bl	8007954 <PID_SetKP>
  bool retVal = true;
 8003370:	2001      	movs	r0, #1
    break;
 8003372:	e7ac      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003374:	6898      	ldr	r0, [r3, #8]
 8003376:	b211      	sxth	r1, r2
 8003378:	f004 faee 	bl	8007958 <PID_SetKI>
  bool retVal = true;
 800337c:	2001      	movs	r0, #1
    break;
 800337e:	e7a6      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8003380:	6898      	ldr	r0, [r3, #8]
 8003382:	b211      	sxth	r1, r2
 8003384:	f004 faf8 	bl	8007978 <PID_SetKD>
  bool retVal = true;
 8003388:	2001      	movs	r0, #1
    break;
 800338a:	e7a0      	b.n	80032ce <UI_SetReg+0xb2>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 800338c:	4628      	mov	r0, r5
 800338e:	b211      	sxth	r1, r2
 8003390:	f7fd ff2a 	bl	80011e8 <MCI_SetIdref>
  bool retVal = true;
 8003394:	2001      	movs	r0, #1
    break;
 8003396:	e79a      	b.n	80032ce <UI_SetReg+0xb2>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8003398:	4917      	ldr	r1, [pc, #92]	; (80033f8 <UI_SetReg+0x1dc>)
 800339a:	fb81 3102 	smull	r3, r1, r1, r2
 800339e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80033a2:	4628      	mov	r0, r5
 80033a4:	b209      	sxth	r1, r1
 80033a6:	2200      	movs	r2, #0
 80033a8:	f7fd fe1c 	bl	8000fe4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80033ac:	2001      	movs	r0, #1
    break;
 80033ae:	e78e      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKP(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 80033b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b2:	b211      	sxth	r1, r2
 80033b4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80033b6:	f004 facd 	bl	8007954 <PID_SetKP>
  bool retVal = true;
 80033ba:	2001      	movs	r0, #1
    break;
 80033bc:	e787      	b.n	80032ce <UI_SetReg+0xb2>
      PID_SetKI(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	b211      	sxth	r1, r2
 80033c2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80033c4:	f004 fac8 	bl	8007958 <PID_SetKI>
  bool retVal = true;
 80033c8:	2001      	movs	r0, #1
    break;
 80033ca:	e780      	b.n	80032ce <UI_SetReg+0xb2>
    retVal = false;
 80033cc:	2000      	movs	r0, #0
 80033ce:	e77e      	b.n	80032ce <UI_SetReg+0xb2>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80033d0:	4628      	mov	r0, r5
 80033d2:	f7fd ff05 	bl	80011e0 <MCI_GetTeref>
 80033d6:	4622      	mov	r2, r4
 80033d8:	4601      	mov	r1, r0
 80033da:	4628      	mov	r0, r5
 80033dc:	f7fd fe0a 	bl	8000ff4 <MCI_ExecTorqueRamp>
  bool retVal = true;
 80033e0:	2001      	movs	r0, #1
 80033e2:	e774      	b.n	80032ce <UI_SetReg+0xb2>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7fd fec3 	bl	8001170 <MCI_GetMecSpeedRefUnit>
 80033ea:	2200      	movs	r2, #0
 80033ec:	4601      	mov	r1, r0
 80033ee:	4628      	mov	r0, r5
 80033f0:	f7fd fdf8 	bl	8000fe4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80033f4:	4620      	mov	r0, r4
 80033f6:	e76a      	b.n	80032ce <UI_SetReg+0xb2>
 80033f8:	2aaaaaab 	.word	0x2aaaaaab

080033fc <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80033fe:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003402:	7d03      	ldrb	r3, [r0, #20]
{
 8003404:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003406:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800340a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 800340e:	2a00      	cmp	r2, #0
 8003410:	f000 8090 	beq.w	8003534 <UI_GetReg+0x138>
  {
    *success = true;
 8003414:	2401      	movs	r4, #1
 8003416:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 8003418:	2988      	cmp	r1, #136	; 0x88
 800341a:	f200 821f 	bhi.w	800385c <UI_GetReg+0x460>
 800341e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003422:	0218      	.short	0x0218
 8003424:	020e0212 	.word	0x020e0212
 8003428:	0203020a 	.word	0x0203020a
 800342c:	01fb01ff 	.word	0x01fb01ff
 8003430:	011f01f7 	.word	0x011f01f7
 8003434:	01ea01ee 	.word	0x01ea01ee
 8003438:	011701a1 	.word	0x011701a1
 800343c:	01bc01c0 	.word	0x01bc01c0
 8003440:	021d01b8 	.word	0x021d01b8
 8003444:	021d021d 	.word	0x021d021d
 8003448:	021d021d 	.word	0x021d021d
 800344c:	021d021d 	.word	0x021d021d
 8003450:	021d021d 	.word	0x021d021d
 8003454:	01b001b4 	.word	0x01b001b4
 8003458:	021d01ac 	.word	0x021d01ac
 800345c:	01a5021d 	.word	0x01a5021d
 8003460:	01d501da 	.word	0x01d501da
 8003464:	01ce021d 	.word	0x01ce021d
 8003468:	012c01c9 	.word	0x012c01c9
 800346c:	01310127 	.word	0x01310127
 8003470:	01d501da 	.word	0x01d501da
 8003474:	0117011f 	.word	0x0117011f
 8003478:	0197019c 	.word	0x0197019c
 800347c:	018d0192 	.word	0x018d0192
 8003480:	015f0173 	.word	0x015f0173
 8003484:	021d021d 	.word	0x021d021d
 8003488:	021d021d 	.word	0x021d021d
 800348c:	021d021d 	.word	0x021d021d
 8003490:	021d021d 	.word	0x021d021d
 8003494:	021d021d 	.word	0x021d021d
 8003498:	021d021d 	.word	0x021d021d
 800349c:	021d021d 	.word	0x021d021d
 80034a0:	01510158 	.word	0x01510158
 80034a4:	021d0117 	.word	0x021d0117
 80034a8:	021d021d 	.word	0x021d021d
 80034ac:	021d021d 	.word	0x021d021d
 80034b0:	021d021d 	.word	0x021d021d
 80034b4:	021d021d 	.word	0x021d021d
 80034b8:	021d021d 	.word	0x021d021d
 80034bc:	021d021d 	.word	0x021d021d
 80034c0:	021d021d 	.word	0x021d021d
 80034c4:	021d021d 	.word	0x021d021d
 80034c8:	021d021d 	.word	0x021d021d
 80034cc:	021d021d 	.word	0x021d021d
 80034d0:	021d021d 	.word	0x021d021d
 80034d4:	021d021d 	.word	0x021d021d
 80034d8:	021d013e 	.word	0x021d013e
 80034dc:	021d021d 	.word	0x021d021d
 80034e0:	021d021d 	.word	0x021d021d
 80034e4:	021d021d 	.word	0x021d021d
 80034e8:	021d021d 	.word	0x021d021d
 80034ec:	021d021d 	.word	0x021d021d
 80034f0:	021d021d 	.word	0x021d021d
 80034f4:	021d021d 	.word	0x021d021d
 80034f8:	021d021d 	.word	0x021d021d
 80034fc:	013a021d 	.word	0x013a021d
 8003500:	021b0136 	.word	0x021b0136
 8003504:	0124021d 	.word	0x0124021d
 8003508:	021d0124 	.word	0x021d0124
 800350c:	021d021d 	.word	0x021d021d
 8003510:	021d021d 	.word	0x021d021d
 8003514:	021d021d 	.word	0x021d021d
 8003518:	021d021d 	.word	0x021d021d
 800351c:	021d021d 	.word	0x021d021d
 8003520:	021d021d 	.word	0x021d021d
 8003524:	021d011d 	.word	0x021d011d
 8003528:	018701df 	.word	0x018701df
 800352c:	01c4014b 	.word	0x01c4014b
 8003530:	01e501f2 	.word	0x01e501f2
 8003534:	2988      	cmp	r1, #136	; 0x88
 8003536:	f200 8091 	bhi.w	800365c <UI_GetReg+0x260>
 800353a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800353e:	018a      	.short	0x018a
 8003540:	01800184 	.word	0x01800184
 8003544:	0175017c 	.word	0x0175017c
 8003548:	016d0171 	.word	0x016d0171
 800354c:	00910169 	.word	0x00910169
 8003550:	015c0160 	.word	0x015c0160
 8003554:	00890113 	.word	0x00890113
 8003558:	012e0132 	.word	0x012e0132
 800355c:	008f012a 	.word	0x008f012a
 8003560:	008f008f 	.word	0x008f008f
 8003564:	008f008f 	.word	0x008f008f
 8003568:	008f008f 	.word	0x008f008f
 800356c:	008f008f 	.word	0x008f008f
 8003570:	01220126 	.word	0x01220126
 8003574:	008f011e 	.word	0x008f011e
 8003578:	0117008f 	.word	0x0117008f
 800357c:	0147014c 	.word	0x0147014c
 8003580:	0140008f 	.word	0x0140008f
 8003584:	009e013b 	.word	0x009e013b
 8003588:	00a30099 	.word	0x00a30099
 800358c:	0147014c 	.word	0x0147014c
 8003590:	00890091 	.word	0x00890091
 8003594:	0109010e 	.word	0x0109010e
 8003598:	00ff0104 	.word	0x00ff0104
 800359c:	00d100e5 	.word	0x00d100e5
 80035a0:	008f008f 	.word	0x008f008f
 80035a4:	008f008f 	.word	0x008f008f
 80035a8:	008f008f 	.word	0x008f008f
 80035ac:	008f008f 	.word	0x008f008f
 80035b0:	008f008f 	.word	0x008f008f
 80035b4:	008f008f 	.word	0x008f008f
 80035b8:	008f008f 	.word	0x008f008f
 80035bc:	00c300ca 	.word	0x00c300ca
 80035c0:	008f0089 	.word	0x008f0089
 80035c4:	008f008f 	.word	0x008f008f
 80035c8:	008f008f 	.word	0x008f008f
 80035cc:	008f008f 	.word	0x008f008f
 80035d0:	008f008f 	.word	0x008f008f
 80035d4:	008f008f 	.word	0x008f008f
 80035d8:	008f008f 	.word	0x008f008f
 80035dc:	008f008f 	.word	0x008f008f
 80035e0:	008f008f 	.word	0x008f008f
 80035e4:	008f008f 	.word	0x008f008f
 80035e8:	008f008f 	.word	0x008f008f
 80035ec:	008f008f 	.word	0x008f008f
 80035f0:	008f008f 	.word	0x008f008f
 80035f4:	008f00b0 	.word	0x008f00b0
 80035f8:	008f008f 	.word	0x008f008f
 80035fc:	008f008f 	.word	0x008f008f
 8003600:	008f008f 	.word	0x008f008f
 8003604:	008f008f 	.word	0x008f008f
 8003608:	008f008f 	.word	0x008f008f
 800360c:	008f008f 	.word	0x008f008f
 8003610:	008f008f 	.word	0x008f008f
 8003614:	008f008f 	.word	0x008f008f
 8003618:	00ac008f 	.word	0x00ac008f
 800361c:	018d00a8 	.word	0x018d00a8
 8003620:	0096008f 	.word	0x0096008f
 8003624:	008f0096 	.word	0x008f0096
 8003628:	008f008f 	.word	0x008f008f
 800362c:	008f008f 	.word	0x008f008f
 8003630:	008f008f 	.word	0x008f008f
 8003634:	008f008f 	.word	0x008f008f
 8003638:	008f008f 	.word	0x008f008f
 800363c:	008f008f 	.word	0x008f008f
 8003640:	008f008f 	.word	0x008f008f
 8003644:	00f90151 	.word	0x00f90151
 8003648:	013600bd 	.word	0x013600bd
 800364c:	01570164 	.word	0x01570164
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003650:	4630      	mov	r0, r6
 8003652:	f7fd fda9 	bl	80011a8 <MCI_GetIqdref>
 8003656:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 8003658:	b00c      	add	sp, #48	; 0x30
 800365a:	bd70      	pop	{r4, r5, r6, pc}
  int32_t bRetVal = 0;
 800365c:	2000      	movs	r0, #0
 800365e:	e7fb      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003660:	4630      	mov	r0, r6
 8003662:	f7fd fda1 	bl	80011a8 <MCI_GetIqdref>
 8003666:	b200      	sxth	r0, r0
    break;
 8003668:	e7f6      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = CTRBDID;
 800366a:	f242 701f 	movw	r0, #10015	; 0x271f
 800366e:	e7f3      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003670:	4630      	mov	r0, r6
 8003672:	f7fd fd89 	bl	8001188 <MCI_GetIalphabeta>
 8003676:	b200      	sxth	r0, r0
    break;
 8003678:	e7ee      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).b;
 800367a:	4630      	mov	r0, r6
 800367c:	f7fd fd7c 	bl	8001178 <MCI_GetIab>
 8003680:	1400      	asrs	r0, r0, #16
    break;
 8003682:	e7e9      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003684:	4630      	mov	r0, r6
 8003686:	f7fd fd7f 	bl	8001188 <MCI_GetIalphabeta>
 800368a:	1400      	asrs	r0, r0, #16
    break;
 800368c:	e7e4      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800368e:	6828      	ldr	r0, [r5, #0]
 8003690:	f004 f970 	bl	8007974 <PID_GetKIDivisor>
    break;
 8003694:	e7e0      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003696:	6828      	ldr	r0, [r5, #0]
 8003698:	f004 f96a 	bl	8007970 <PID_GetKPDivisor>
    break;
 800369c:	e7dc      	b.n	8003658 <UI_GetReg+0x25c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800369e:	4630      	mov	r0, r6
 80036a0:	f7fd fd50 	bl	8001144 <MCI_GetControlMode>
 80036a4:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80036a6:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80036a8:	f000 80e5 	beq.w	8003876 <UI_GetReg+0x47a>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80036ac:	f7fd fd60 	bl	8001170 <MCI_GetMecSpeedRefUnit>
 80036b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036b4:	0040      	lsls	r0, r0, #1
 80036b6:	e7cf      	b.n	8003658 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetMoveDuration(pMCT->pPosCtrl);
 80036b8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80036ba:	f006 f80d 	bl	80096d8 <TC_GetMoveDuration>
        bRetVal = ReadVal.U32_Val;
 80036be:	ee10 0a10 	vmov	r0, s0
      break;
 80036c2:	e7c9      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80036c4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80036c6:	f005 fcdb 	bl	8009080 <STC_GetMinAppNegativeMecSpeedUnit>
 80036ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036ce:	0040      	lsls	r0, r0, #1
    break;
 80036d0:	e7c2      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80036d2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80036d4:	f005 fcd2 	bl	800907c <STC_GetMaxAppPositiveMecSpeedUnit>
 80036d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036dc:	0040      	lsls	r0, r0, #1
    break;
 80036de:	e7bb      	b.n	8003658 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80036e0:	6902      	ldr	r2, [r0, #16]
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036e6:	0f1a      	lsrs	r2, r3, #28
 80036e8:	3a01      	subs	r2, #1
 80036ea:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80036f4:	f240 80ba 	bls.w	800386c <UI_GetReg+0x470>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d8af      	bhi.n	800365c <UI_GetReg+0x260>
        pSPD = pMCT->pSpeedSensorAux;
 80036fc:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80036fe:	2800      	cmp	r0, #0
 8003700:	d0ac      	beq.n	800365c <UI_GetReg+0x260>
        bRetVal = SPD_GetS16Speed(pSPD);
 8003702:	f005 fbfb 	bl	8008efc <SPD_GetS16Speed>
 8003706:	e7a7      	b.n	8003658 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003708:	6902      	ldr	r2, [r0, #16]
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800370e:	0f1a      	lsrs	r2, r3, #28
 8003710:	3a01      	subs	r2, #1
 8003712:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003716:	2a01      	cmp	r2, #1
 8003718:	f103 33ff 	add.w	r3, r3, #4294967295
 800371c:	f240 80a1 	bls.w	8003862 <UI_GetReg+0x466>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003720:	2b01      	cmp	r3, #1
 8003722:	d89b      	bhi.n	800365c <UI_GetReg+0x260>
        pSPD = pMCT->pSpeedSensorAux;
 8003724:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003726:	2800      	cmp	r0, #0
 8003728:	d098      	beq.n	800365c <UI_GetReg+0x260>
        bRetVal = SPD_GetElAngle(pSPD);
 800372a:	f005 fba9 	bl	8008e80 <SPD_GetElAngle>
 800372e:	e793      	b.n	8003658 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetTargetPosition(pMCT->pPosCtrl);
 8003730:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8003732:	f005 ffcd 	bl	80096d0 <TC_GetTargetPosition>
        bRetVal = ReadVal.U32_Val;
 8003736:	ee10 0a10 	vmov	r0, s0
      break;
 800373a:	e78d      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800373c:	4630      	mov	r0, r6
 800373e:	f7fd fd45 	bl	80011cc <MCI_GetValphabeta>
 8003742:	1400      	asrs	r0, r0, #16
    break;
 8003744:	e788      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003746:	4630      	mov	r0, r6
 8003748:	f7fd fd40 	bl	80011cc <MCI_GetValphabeta>
 800374c:	b200      	sxth	r0, r0
    break;
 800374e:	e783      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003750:	4630      	mov	r0, r6
 8003752:	f7fd fd31 	bl	80011b8 <MCI_GetVqd>
 8003756:	1400      	asrs	r0, r0, #16
    break;
 8003758:	e77e      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).q;
 800375a:	4630      	mov	r0, r6
 800375c:	f7fd fd2c 	bl	80011b8 <MCI_GetVqd>
 8003760:	b200      	sxth	r0, r0
    break;
 8003762:	e779      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003764:	6868      	ldr	r0, [r5, #4]
 8003766:	f004 f909 	bl	800797c <PID_GetKD>
    break;
 800376a:	e775      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800376c:	4630      	mov	r0, r6
 800376e:	f7fd fcf7 	bl	8001160 <MCI_GetAvrgMecSpeedUnit>
 8003772:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003776:	0040      	lsls	r0, r0, #1
    break;
 8003778:	e76e      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800377a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800377c:	f004 f886 	bl	800788c <MPM_GetAvrgElMotorPowerW>
    break;
 8003780:	e76a      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003782:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003784:	f004 f8c8 	bl	8007918 <NTC_GetAvTemp_C>
    break;
 8003788:	e766      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 800378a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800378c:	f003 fe42 	bl	8007414 <VBS_GetAvBusVoltage_V>
    break;
 8003790:	e762      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003792:	68a8      	ldr	r0, [r5, #8]
 8003794:	f004 f8f2 	bl	800797c <PID_GetKD>
    break;
 8003798:	e75e      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800379a:	68a8      	ldr	r0, [r5, #8]
 800379c:	f004 f8e2 	bl	8007964 <PID_GetKI>
    break;
 80037a0:	e75a      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80037a2:	68a8      	ldr	r0, [r5, #8]
 80037a4:	f004 f8da 	bl	800795c <PID_GetKP>
    break;
 80037a8:	e756      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKP( pMCT->pPosCtrl->PIDPosRegulator );
 80037aa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80037ac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80037ae:	f004 f8d5 	bl	800795c <PID_GetKP>
      break;
 80037b2:	e751      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).a;
 80037b4:	4630      	mov	r0, r6
 80037b6:	f7fd fcdf 	bl	8001178 <MCI_GetIab>
 80037ba:	b200      	sxth	r0, r0
    break;
 80037bc:	e74c      	b.n	8003658 <UI_GetReg+0x25c>
      if (pMCT->pRevupCtrl)
 80037be:	6968      	ldr	r0, [r5, #20]
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f43f af4b 	beq.w	800365c <UI_GetReg+0x260>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80037c6:	f006 f957 	bl	8009a78 <RUC_GetNumberOfPhases>
 80037ca:	e745      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).d;
 80037cc:	4630      	mov	r0, r6
 80037ce:	f7fd fce3 	bl	8001198 <MCI_GetIqd>
 80037d2:	1400      	asrs	r0, r0, #16
    break;
 80037d4:	e740      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).q;
 80037d6:	4630      	mov	r0, r6
 80037d8:	f7fd fcde 	bl	8001198 <MCI_GetIqd>
 80037dc:	b200      	sxth	r0, r0
    break;
 80037de:	e73b      	b.n	8003658 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetCurrentPosition(pMCT->pPosCtrl);
 80037e0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80037e2:	f005 ff63 	bl	80096ac <TC_GetCurrentPosition>
        bRetVal = ReadVal.U32_Val;
 80037e6:	ee10 0a10 	vmov	r0, s0
      break;
 80037ea:	e735      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKD( pMCT->pPosCtrl->PIDPosRegulator );
 80037ec:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80037ee:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80037f0:	f004 f8c4 	bl	800797c <PID_GetKD>
      break;
 80037f4:	e730      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80037f6:	6868      	ldr	r0, [r5, #4]
 80037f8:	f004 f8b4 	bl	8007964 <PID_GetKI>
    break;
 80037fc:	e72c      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80037fe:	6868      	ldr	r0, [r5, #4]
 8003800:	f004 f8ac 	bl	800795c <PID_GetKP>
    break;
 8003804:	e728      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKI( pMCT->pPosCtrl->PIDPosRegulator );
 8003806:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003808:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800380a:	f004 f8ab 	bl	8007964 <PID_GetKI>
      break;
 800380e:	e723      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003810:	6828      	ldr	r0, [r5, #0]
 8003812:	f004 f8b3 	bl	800797c <PID_GetKD>
    break;
 8003816:	e71f      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003818:	6828      	ldr	r0, [r5, #0]
 800381a:	f004 f8a3 	bl	8007964 <PID_GetKI>
    break;
 800381e:	e71b      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003820:	6828      	ldr	r0, [r5, #0]
 8003822:	f004 f89b 	bl	800795c <PID_GetKP>
    break;
 8003826:	e717      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003828:	4630      	mov	r0, r6
 800382a:	f7fd fca1 	bl	8001170 <MCI_GetMecSpeedRefUnit>
 800382e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003832:	0040      	lsls	r0, r0, #1
    break;
 8003834:	e710      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003836:	4630      	mov	r0, r6
 8003838:	f7fd fc84 	bl	8001144 <MCI_GetControlMode>
    break;
 800383c:	e70c      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 800383e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003840:	f005 fcca 	bl	80091d8 <STM_GetState>
	break;
 8003844:	e708      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003846:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8003848:	b00c      	add	sp, #48	; 0x30
 800384a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800384e:	f005 bcd1 	b.w	80091f4 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003852:	f7ff fce1 	bl	8003218 <UI_GetSelectedMC>
    break;
 8003856:	e6ff      	b.n	8003658 <UI_GetReg+0x25c>
      bRetVal = (int32_t)(MC_UID);
 8003858:	480a      	ldr	r0, [pc, #40]	; (8003884 <UI_GetReg+0x488>)
 800385a:	e6fd      	b.n	8003658 <UI_GetReg+0x25c>
        *success = false;
 800385c:	2000      	movs	r0, #0
 800385e:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8003860:	e6fa      	b.n	8003658 <UI_GetReg+0x25c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003862:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003864:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003866:	f63f af5e 	bhi.w	8003726 <UI_GetReg+0x32a>
 800386a:	e75b      	b.n	8003724 <UI_GetReg+0x328>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800386c:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800386e:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003870:	f63f af45 	bhi.w	80036fe <UI_GetReg+0x302>
 8003874:	e742      	b.n	80036fc <UI_GetReg+0x300>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003876:	f7fd fc67 	bl	8001148 <MCI_GetLastRampFinalSpeed>
 800387a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800387e:	0040      	lsls	r0, r0, #1
 8003880:	e6ea      	b.n	8003658 <UI_GetReg+0x25c>
 8003882:	bf00      	nop
 8003884:	34a6847a 	.word	0x34a6847a

08003888 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003888:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800388a:	6883      	ldr	r3, [r0, #8]
 800388c:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 800388e:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003890:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8003894:	290d      	cmp	r1, #13
 8003896:	d82c      	bhi.n	80038f2 <UI_ExecCmd+0x6a>
 8003898:	e8df f001 	tbb	[pc, r1]
 800389c:	0c071217 	.word	0x0c071217
 80038a0:	261c0e0c 	.word	0x261c0e0c
 80038a4:	2b2b2b21 	.word	0x2b2b2b21
 80038a8:	122b      	.short	0x122b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7fd fc46 	bl	800113c <MCI_GetSTMState>
 80038b0:	2806      	cmp	r0, #6
 80038b2:	d020      	beq.n	80038f6 <UI_ExecCmd+0x6e>
  bool retVal = true;
 80038b4:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80038b6:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7fd fc3f 	bl	800113c <MCI_GetSTMState>
 80038be:	b120      	cbz	r0, 80038ca <UI_ExecCmd+0x42>
        MCI_StopMotor(pMCI);
 80038c0:	4620      	mov	r0, r4
 80038c2:	f7fd fbf5 	bl	80010b0 <MCI_StopMotor>
  bool retVal = true;
 80038c6:	2001      	movs	r0, #1
}
 80038c8:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7fd fbe6 	bl	800109c <MCI_StartMotor>
  bool retVal = true;
 80038d0:	2001      	movs	r0, #1
}
 80038d2:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7fd fbef 	bl	80010b8 <MCI_FaultAcknowledged>
  bool retVal = true;
 80038da:	2001      	movs	r0, #1
}
 80038dc:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 80038de:	4620      	mov	r0, r4
 80038e0:	f7fd fc86 	bl	80011f0 <MCI_Clear_Iqdref>
  bool retVal = true;
 80038e4:	2001      	movs	r0, #1
}
 80038e6:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7fd fbe9 	bl	80010c0 <MCI_EncoderAlign>
  bool retVal = true;
 80038ee:	2001      	movs	r0, #1
}
 80038f0:	bd10      	pop	{r4, pc}
    retVal = false;
 80038f2:	2000      	movs	r0, #0
}
 80038f4:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fd fc2e 	bl	8001158 <MCI_StopRamp>
  bool retVal = true;
 80038fc:	2001      	movs	r0, #1
}
 80038fe:	bd10      	pop	{r4, pc}

08003900 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003900:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003904:	7d04      	ldrb	r4, [r0, #20]
 8003906:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003908:	fb83 c301 	smull	ip, r3, r3, r1
 800390c:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003910:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003914:	b209      	sxth	r1, r1
 8003916:	f7fd fb65 	bl	8000fe4 <MCI_ExecSpeedRamp>
  return true;
}
 800391a:	2001      	movs	r0, #1
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	2aaaaaab 	.word	0x2aaaaaab

08003924 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003924:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003926:	6883      	ldr	r3, [r0, #8]
 8003928:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 800392a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800392e:	f7fd fb61 	bl	8000ff4 <MCI_ExecTorqueRamp>
  return true;
}
 8003932:	2001      	movs	r0, #1
 8003934:	bd10      	pop	{r4, pc}
 8003936:	bf00      	nop

08003938 <UI_ExecPositionCmd>:
  * @param  fTargetPosition: final position value.
  * @param  fDuration: duration alllowed to complete the positioning (expressed in seconds).
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_ExecPositionCmd(UI_Handle_t *pHandle, float fTargetPosition, float fDuration)
{
 8003938:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800393a:	6883      	ldr	r3, [r0, #8]
 800393c:	7d02      	ldrb	r2, [r0, #20]

  /* Call MCI Position Command */
  MCI_ExecPositionCommand(pMCI,fTargetPosition,fDuration);
 800393e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003942:	f7fd fb71 	bl	8001028 <MCI_ExecPositionCommand>
  return true;
}
 8003946:	2001      	movs	r0, #1
 8003948:	bd08      	pop	{r3, pc}
 800394a:	bf00      	nop

0800394c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800394e:	7d04      	ldrb	r4, [r0, #20]
 8003950:	68c0      	ldr	r0, [r0, #12]
 8003952:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003956:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8003958:	b194      	cbz	r4, 8003980 <UI_GetRevupData+0x34>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800395a:	4620      	mov	r0, r4
 800395c:	461e      	mov	r6, r3
 800395e:	4617      	mov	r7, r2
 8003960:	460d      	mov	r5, r1
 8003962:	f006 f873 	bl	8009a4c <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003966:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003968:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800396a:	4620      	mov	r0, r4
 800396c:	f006 f874 	bl	8009a58 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003970:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003972:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003974:	4620      	mov	r0, r4
 8003976:	f006 f877 	bl	8009a68 <RUC_GetPhaseFinalTorque>
 800397a:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 800397c:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800397e:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8003980:	4620      	mov	r0, r4
 8003982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003984 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003988:	7d04      	ldrb	r4, [r0, #20]
 800398a:	68c3      	ldr	r3, [r0, #12]
{
 800398c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003990:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003994:	695c      	ldr	r4, [r3, #20]
{
 8003996:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003998:	4620      	mov	r0, r4
 800399a:	f006 f845 	bl	8009a28 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800399e:	463a      	mov	r2, r7
 80039a0:	4629      	mov	r1, r5
 80039a2:	4620      	mov	r0, r4
 80039a4:	f006 f846 	bl	8009a34 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80039a8:	4620      	mov	r0, r4
 80039aa:	4632      	mov	r2, r6
 80039ac:	4629      	mov	r1, r5
 80039ae:	f006 f847 	bl	8009a40 <RUC_SetPhaseFinalTorque>
  return true;
}
 80039b2:	2001      	movs	r0, #1
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b6:	bf00      	nop

080039b8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80039b8:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80039ba:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 80039bc:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80039c0:	7d01      	ldrb	r1, [r0, #20]
  currComp.d = hIdRef;
 80039c2:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80039c6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 80039ca:	9901      	ldr	r1, [sp, #4]
}
 80039cc:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80039ce:	f7fd bb1d 	b.w	800100c <MCI_SetCurrentReferences>
 80039d2:	bf00      	nop

080039d4 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80039d4:	2000      	movs	r0, #0
 80039d6:	4770      	bx	lr

080039d8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SystemInit+0x18>)
 80039da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039ea:	6099      	str	r1, [r3, #8]
#endif
}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80039f6:	4e0f      	ldr	r6, [pc, #60]	; (8003a34 <HAL_InitTick+0x40>)
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	b90b      	cbnz	r3, 8003a00 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a00:	490d      	ldr	r1, [pc, #52]	; (8003a38 <HAL_InitTick+0x44>)
 8003a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a06:	4605      	mov	r5, r0
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	6808      	ldr	r0, [r1, #0]
 8003a0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a12:	f000 ffc9 	bl	80049a8 <HAL_SYSTICK_Config>
 8003a16:	4604      	mov	r4, r0
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d1ef      	bne.n	80039fc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1c:	2d0f      	cmp	r5, #15
 8003a1e:	d8ed      	bhi.n	80039fc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	4602      	mov	r2, r0
 8003a22:	4629      	mov	r1, r5
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f000 ff7a 	bl	8004920 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a2c:	6075      	str	r5, [r6, #4]
 8003a2e:	4620      	mov	r0, r4
}
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
 8003a32:	bf00      	nop
 8003a34:	2000061c 	.word	0x2000061c
 8003a38:	20000618 	.word	0x20000618

08003a3c <HAL_Init>:
{
 8003a3c:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3e:	2003      	movs	r0, #3
{
 8003a40:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a42:	f000 ff5b 	bl	80048fc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a46:	2004      	movs	r0, #4
 8003a48:	f7ff ffd4 	bl	80039f4 <HAL_InitTick>
 8003a4c:	b118      	cbz	r0, 8003a56 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8003a4e:	2001      	movs	r0, #1
}
 8003a50:	b003      	add	sp, #12
 8003a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a56:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8003a58:	f7fe ff7e 	bl	8002958 <HAL_MspInit>
 8003a5c:	9801      	ldr	r0, [sp, #4]
}
 8003a5e:	b003      	add	sp, #12
 8003a60:	f85d fb04 	ldr.w	pc, [sp], #4

08003a64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a64:	4a03      	ldr	r2, [pc, #12]	; (8003a74 <HAL_IncTick+0x10>)
 8003a66:	4904      	ldr	r1, [pc, #16]	; (8003a78 <HAL_IncTick+0x14>)
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	6809      	ldr	r1, [r1, #0]
 8003a6c:	440b      	add	r3, r1
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000cbc 	.word	0x20000cbc
 8003a78:	2000061c 	.word	0x2000061c

08003a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <HAL_GetTick+0x8>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000cbc 	.word	0x20000cbc

08003a88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a90:	2800      	cmp	r0, #0
 8003a92:	f000 80a1 	beq.w	8003bd8 <HAL_ADC_Init+0x150>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a96:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003a98:	4604      	mov	r4, r0
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	f000 8091 	beq.w	8003bc2 <HAL_ADC_Init+0x13a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003aa0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aa2:	6893      	ldr	r3, [r2, #8]
 8003aa4:	009d      	lsls	r5, r3, #2
 8003aa6:	d505      	bpl.n	8003ab4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003aa8:	6893      	ldr	r3, [r2, #8]
 8003aaa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003aae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ab2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ab4:	6893      	ldr	r3, [r2, #8]
 8003ab6:	00d8      	lsls	r0, r3, #3
 8003ab8:	d417      	bmi.n	8003aea <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003aba:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8003abc:	6891      	ldr	r1, [r2, #8]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4874      	ldr	r0, [pc, #464]	; (8003c94 <HAL_ADC_Init+0x20c>)
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003ac8:	fba0 0303 	umull	r0, r3, r0, r3
 8003acc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003ad6:	6091      	str	r1, [r2, #8]
 8003ad8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	b12b      	cbz	r3, 8003aea <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8003ade:	9b01      	ldr	r3, [sp, #4]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003ae4:	9b01      	ldr	r3, [sp, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f9      	bne.n	8003ade <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003aea:	6893      	ldr	r3, [r2, #8]
 8003aec:	00d9      	lsls	r1, r3, #3
 8003aee:	d45a      	bmi.n	8003ba6 <HAL_ADC_Init+0x11e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003af2:	f043 0310 	orr.w	r3, r3, #16
 8003af6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b00:	6893      	ldr	r3, [r2, #8]
 8003b02:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8003b06:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b0c:	d152      	bne.n	8003bb4 <HAL_ADC_Init+0x12c>
 8003b0e:	06db      	lsls	r3, r3, #27
 8003b10:	d450      	bmi.n	8003bb4 <HAL_ADC_Init+0x12c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b1e:	6893      	ldr	r3, [r2, #8]
 8003b20:	07de      	lsls	r6, r3, #31
 8003b22:	d409      	bmi.n	8003b38 <HAL_ADC_Init+0xb0>
 8003b24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b28:	495b      	ldr	r1, [pc, #364]	; (8003c98 <HAL_ADC_Init+0x210>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	6889      	ldr	r1, [r1, #8]
 8003b2e:	07cd      	lsls	r5, r1, #31
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	f140 8083 	bpl.w	8003c3e <HAL_ADC_Init+0x1b6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003b38:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8003b3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b3e:	432b      	orrs	r3, r5
 8003b40:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b42:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b44:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003b48:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b4c:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b52:	d103      	bne.n	8003b5c <HAL_ADC_Init+0xd4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003b56:	3901      	subs	r1, #1
 8003b58:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b5e:	b121      	cbz	r1, 8003b6a <HAL_ADC_Init+0xe2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003b60:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b62:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b66:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b68:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b6a:	68d6      	ldr	r6, [r2, #12]
 8003b6c:	494b      	ldr	r1, [pc, #300]	; (8003c9c <HAL_ADC_Init+0x214>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b6e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b70:	4031      	ands	r1, r6
 8003b72:	430b      	orrs	r3, r1
 8003b74:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b76:	6913      	ldr	r3, [r2, #16]
 8003b78:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003b7c:	432b      	orrs	r3, r5
 8003b7e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	0759      	lsls	r1, r3, #29
 8003b84:	d52b      	bpl.n	8003bde <HAL_ADC_Init+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b86:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b88:	6963      	ldr	r3, [r4, #20]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d04f      	beq.n	8003c2e <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b96:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b98:	f023 0303 	bic.w	r3, r3, #3
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ba6:	6893      	ldr	r3, [r2, #8]
 8003ba8:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bac:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bb2:	d0ac      	beq.n	8003b0e <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb8:	f043 0310 	orr.w	r3, r3, #16
 8003bbc:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003bc2:	f7fe fee9 	bl	8002998 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bc6:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	6625      	str	r5, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bca:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8003bcc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003bd0:	009d      	lsls	r5, r3, #2
 8003bd2:	f57f af6f 	bpl.w	8003ab4 <HAL_ADC_Init+0x2c>
 8003bd6:	e767      	b.n	8003aa8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003bd8:	2001      	movs	r0, #1
}
 8003bda:	b002      	add	sp, #8
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bde:	6893      	ldr	r3, [r2, #8]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	d4d1      	bmi.n	8003b88 <HAL_ADC_Init+0x100>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003be4:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003be6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bea:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8003bec:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bee:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bf2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bf4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bf8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c00:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003c02:	b33d      	cbz	r5, 8003c54 <HAL_ADC_Init+0x1cc>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c0a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003c0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c16:	432b      	orrs	r3, r5
 8003c18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003c1c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d023      	beq.n	8003c6c <HAL_ADC_Init+0x1e4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c24:	6913      	ldr	r3, [r2, #16]
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	6113      	str	r3, [r2, #16]
 8003c2c:	e7ac      	b.n	8003b88 <HAL_ADC_Init+0x100>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c30:	6a23      	ldr	r3, [r4, #32]
 8003c32:	f021 010f 	bic.w	r1, r1, #15
 8003c36:	3b01      	subs	r3, #1
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3c:	e7ab      	b.n	8003b96 <HAL_ADC_Init+0x10e>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f47f af7a 	bne.w	8003b38 <HAL_ADC_Init+0xb0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c44:	4916      	ldr	r1, [pc, #88]	; (8003ca0 <HAL_ADC_Init+0x218>)
 8003c46:	6865      	ldr	r5, [r4, #4]
 8003c48:	688b      	ldr	r3, [r1, #8]
 8003c4a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003c4e:	432b      	orrs	r3, r5
 8003c50:	608b      	str	r3, [r1, #8]
 8003c52:	e771      	b.n	8003b38 <HAL_ADC_Init+0xb0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c5a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003c5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c66:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003c6a:	e7d7      	b.n	8003c1c <HAL_ADC_Init+0x194>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c6c:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 8003c70:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8003c72:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6911      	ldr	r1, [r2, #16]
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	4333      	orrs	r3, r6
 8003c7e:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003c82:	432b      	orrs	r3, r5
 8003c84:	f021 0104 	bic.w	r1, r1, #4
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6113      	str	r3, [r2, #16]
 8003c8c:	e77c      	b.n	8003b88 <HAL_ADC_Init+0x100>
 8003c8e:	bf00      	nop
 8003c90:	20000618 	.word	0x20000618
 8003c94:	053e2d63 	.word	0x053e2d63
 8003c98:	50000100 	.word	0x50000100
 8003c9c:	fff04007 	.word	0xfff04007
 8003ca0:	50000300 	.word	0x50000300

08003ca4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca8:	4603      	mov	r3, r0
 8003caa:	b082      	sub	sp, #8
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
 8003cb0:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003cb2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8003cb4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003cb6:	f000 8111 	beq.w	8003edc <HAL_ADC_ConfigChannel+0x238>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cba:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cbc:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	0765      	lsls	r5, r4, #29
 8003cc2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8003cc6:	d44f      	bmi.n	8003d68 <HAL_ADC_ConfigChannel+0xc4>
  MODIFY_REG(*preg,
 8003cc8:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ccc:	09a6      	lsrs	r6, r4, #6
 8003cce:	f006 060c 	and.w	r6, r6, #12
 8003cd2:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8003cd6:	f004 041f 	and.w	r4, r4, #31
 8003cda:	5977      	ldr	r7, [r6, r5]
 8003cdc:	f04f 0c1f 	mov.w	ip, #31
 8003ce0:	fa0c fc04 	lsl.w	ip, ip, r4
 8003ce4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003ce8:	40a0      	lsls	r0, r4
 8003cea:	ea27 070c 	bic.w	r7, r7, ip
 8003cee:	4338      	orrs	r0, r7
 8003cf0:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cf2:	6890      	ldr	r0, [r2, #8]
 8003cf4:	0744      	lsls	r4, r0, #29
 8003cf6:	d549      	bpl.n	8003d8c <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cf8:	6890      	ldr	r0, [r2, #8]
 8003cfa:	680c      	ldr	r4, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cfc:	6890      	ldr	r0, [r2, #8]
 8003cfe:	07c0      	lsls	r0, r0, #31
 8003d00:	d413      	bmi.n	8003d2a <HAL_ADC_ConfigChannel+0x86>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d02:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003d04:	48c6      	ldr	r0, [pc, #792]	; (8004020 <HAL_ADC_ConfigChannel+0x37c>)
 8003d06:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d0a:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8004048 <HAL_ADC_ConfigChannel+0x3a4>
 8003d0e:	f006 0718 	and.w	r7, r6, #24
 8003d12:	40f8      	lsrs	r0, r7
 8003d14:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8003d18:	4020      	ands	r0, r4
 8003d1a:	ea25 0507 	bic.w	r5, r5, r7
 8003d1e:	4328      	orrs	r0, r5
 8003d20:	4566      	cmp	r6, ip
 8003d22:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003d26:	f000 808b 	beq.w	8003e40 <HAL_ADC_ConfigChannel+0x19c>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d2a:	49be      	ldr	r1, [pc, #760]	; (8004024 <HAL_ADC_ConfigChannel+0x380>)
 8003d2c:	420c      	tst	r4, r1
 8003d2e:	d02b      	beq.n	8003d88 <HAL_ADC_ConfigChannel+0xe4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d30:	4dbd      	ldr	r5, [pc, #756]	; (8004028 <HAL_ADC_ConfigChannel+0x384>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d32:	49be      	ldr	r1, [pc, #760]	; (800402c <HAL_ADC_ConfigChannel+0x388>)
 8003d34:	68a8      	ldr	r0, [r5, #8]
 8003d36:	428c      	cmp	r4, r1
 8003d38:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003d3c:	d01e      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0xd8>
 8003d3e:	49bc      	ldr	r1, [pc, #752]	; (8004030 <HAL_ADC_ConfigChannel+0x38c>)
 8003d40:	428c      	cmp	r4, r1
 8003d42:	d01b      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0xd8>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d44:	49bb      	ldr	r1, [pc, #748]	; (8004034 <HAL_ADC_ConfigChannel+0x390>)
 8003d46:	428c      	cmp	r4, r1
 8003d48:	f040 80cc 	bne.w	8003ee4 <HAL_ADC_ConfigChannel+0x240>
 8003d4c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003d50:	d11a      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0xe4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d52:	49b9      	ldr	r1, [pc, #740]	; (8004038 <HAL_ADC_ConfigChannel+0x394>)
 8003d54:	428a      	cmp	r2, r1
 8003d56:	d017      	beq.n	8003d88 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d58:	68aa      	ldr	r2, [r5, #8]
 8003d5a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003d5e:	4316      	orrs	r6, r2
 8003d60:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8003d64:	60ae      	str	r6, [r5, #8]
 8003d66:	e003      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xcc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003d76:	b002      	add	sp, #8
 8003d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d7c:	0201      	lsls	r1, r0, #8
 8003d7e:	d403      	bmi.n	8003d88 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d80:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003d84:	f000 80d3 	beq.w	8003f2e <HAL_ADC_ConfigChannel+0x28a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e7f1      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xcc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d8c:	6895      	ldr	r5, [r2, #8]
 8003d8e:	680c      	ldr	r4, [r1, #0]
 8003d90:	f015 0508 	ands.w	r5, r5, #8
 8003d94:	d1b2      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x58>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d96:	688e      	ldr	r6, [r1, #8]
 8003d98:	f3c4 5e04 	ubfx	lr, r4, #20, #5
 8003d9c:	2007      	movs	r0, #7
 8003d9e:	0de4      	lsrs	r4, r4, #23
 8003da0:	fa00 f00e 	lsl.w	r0, r0, lr
 8003da4:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003da8:	f004 0404 	and.w	r4, r4, #4
 8003dac:	ea6f 0000 	mvn.w	r0, r0
 8003db0:	f102 0c14 	add.w	ip, r2, #20
 8003db4:	f000 80d9 	beq.w	8003f6a <HAL_ADC_ConfigChannel+0x2c6>
  MODIFY_REG(*preg,
 8003db8:	f854 700c 	ldr.w	r7, [r4, ip]
 8003dbc:	fa06 f60e 	lsl.w	r6, r6, lr
 8003dc0:	4038      	ands	r0, r7
 8003dc2:	4306      	orrs	r6, r0
 8003dc4:	f844 600c 	str.w	r6, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003dc8:	6950      	ldr	r0, [r2, #20]
 8003dca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003dce:	6150      	str	r0, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd0:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dd4:	68d7      	ldr	r7, [r2, #12]
 8003dd6:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd8:	f1bc 0f04 	cmp.w	ip, #4
 8003ddc:	f102 0060 	add.w	r0, r2, #96	; 0x60
 8003de0:	f000 80cd 	beq.w	8003f7e <HAL_ADC_ConfigChannel+0x2da>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003de4:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(*preg,
 8003de6:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 8003dea:	f8df e260 	ldr.w	lr, [pc, #608]	; 800404c <HAL_ADC_ConfigChannel+0x3a8>
 8003dee:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8003df2:	007f      	lsls	r7, r7, #1
 8003df4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003df8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003dfc:	40be      	lsls	r6, r7
 8003dfe:	4326      	orrs	r6, r4
 8003e00:	ea08 0e0e 	and.w	lr, r8, lr
 8003e04:	ea46 060e 	orr.w	r6, r6, lr
 8003e08:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e0c:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003e0e:	698e      	ldr	r6, [r1, #24]
 8003e10:	f850 4027 	ldr.w	r4, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e14:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8003e18:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003e1c:	4334      	orrs	r4, r6
 8003e1e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 8003e22:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(*preg,
 8003e24:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8003e28:	f1bc 0f01 	cmp.w	ip, #1
 8003e2c:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003e30:	bf08      	it	eq
 8003e32:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8003e36:	4325      	orrs	r5, r4
 8003e38:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
 8003e3c:	680c      	ldr	r4, [r1, #0]
 8003e3e:	e75d      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x58>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e40:	2f00      	cmp	r7, #0
 8003e42:	d063      	beq.n	8003f0c <HAL_ADC_ConfigChannel+0x268>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	fa94 f0a4 	rbit	r0, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f000 8121 	beq.w	8004090 <HAL_ADC_ConfigChannel+0x3ec>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003e4e:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e52:	3001      	adds	r0, #1
 8003e54:	f000 001f 	and.w	r0, r0, #31
 8003e58:	2809      	cmp	r0, #9
 8003e5a:	f240 8119 	bls.w	8004090 <HAL_ADC_ConfigChannel+0x3ec>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f000 813f 	beq.w	80040e6 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8003e68:	fab0 f080 	clz	r0, r0
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	0680      	lsls	r0, r0, #26
 8003e70:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	f000 8139 	beq.w	80040f0 <HAL_ADC_ConfigChannel+0x44c>
  return __builtin_clz(value);
 8003e7e:	fab5 f585 	clz	r5, r5
 8003e82:	3501      	adds	r5, #1
 8003e84:	f005 051f 	and.w	r5, r5, #31
 8003e88:	2601      	movs	r6, #1
 8003e8a:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e8e:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003e94:	2c00      	cmp	r4, #0
 8003e96:	f000 8129 	beq.w	80040ec <HAL_ADC_ConfigChannel+0x448>
  return __builtin_clz(value);
 8003e9a:	fab4 f484 	clz	r4, r4
 8003e9e:	3401      	adds	r4, #1
 8003ea0:	f004 041f 	and.w	r4, r4, #31
 8003ea4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003ea8:	3c1e      	subs	r4, #30
 8003eaa:	0524      	lsls	r4, r4, #20
 8003eac:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb0:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003eb2:	0dc7      	lsrs	r7, r0, #23
 8003eb4:	f007 0704 	and.w	r7, r7, #4
 8003eb8:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003ebc:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003ec0:	597c      	ldr	r4, [r7, r5]
 8003ec2:	688e      	ldr	r6, [r1, #8]
 8003ec4:	f04f 0c07 	mov.w	ip, #7
 8003ec8:	fa0c fc00 	lsl.w	ip, ip, r0
 8003ecc:	ea24 040c 	bic.w	r4, r4, ip
 8003ed0:	fa06 f000 	lsl.w	r0, r6, r0
 8003ed4:	4320      	orrs	r0, r4
 8003ed6:	5178      	str	r0, [r7, r5]
 8003ed8:	680c      	ldr	r4, [r1, #0]
 8003eda:	e726      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x86>
  __HAL_LOCK(hadc);
 8003edc:	2002      	movs	r0, #2
}
 8003ede:	b002      	add	sp, #8
 8003ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ee4:	4955      	ldr	r1, [pc, #340]	; (800403c <HAL_ADC_ConfigChannel+0x398>)
 8003ee6:	428c      	cmp	r4, r1
 8003ee8:	f47f af4e 	bne.w	8003d88 <HAL_ADC_ConfigChannel+0xe4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eec:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003ef0:	f47f af4a 	bne.w	8003d88 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ef4:	4950      	ldr	r1, [pc, #320]	; (8004038 <HAL_ADC_ConfigChannel+0x394>)
 8003ef6:	428a      	cmp	r2, r1
 8003ef8:	f43f af46 	beq.w	8003d88 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003efc:	68aa      	ldr	r2, [r5, #8]
 8003efe:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f02:	4332      	orrs	r2, r6
 8003f04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003f08:	60aa      	str	r2, [r5, #8]
 8003f0a:	e731      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xcc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f0c:	0ea4      	lsrs	r4, r4, #26
 8003f0e:	3401      	adds	r4, #1
 8003f10:	f004 051f 	and.w	r5, r4, #31
 8003f14:	06a0      	lsls	r0, r4, #26
 8003f16:	2401      	movs	r4, #1
 8003f18:	40ac      	lsls	r4, r5
 8003f1a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1e:	2d09      	cmp	r5, #9
 8003f20:	ea40 0004 	orr.w	r0, r0, r4
 8003f24:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8003f28:	d8be      	bhi.n	8003ea8 <HAL_ADC_ConfigChannel+0x204>
 8003f2a:	0524      	lsls	r4, r4, #20
 8003f2c:	e7c0      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x20c>
 8003f2e:	483e      	ldr	r0, [pc, #248]	; (8004028 <HAL_ADC_ConfigChannel+0x384>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003f30:	4a43      	ldr	r2, [pc, #268]	; (8004040 <HAL_ADC_ConfigChannel+0x39c>)
 8003f32:	6881      	ldr	r1, [r0, #8]
 8003f34:	4c43      	ldr	r4, [pc, #268]	; (8004044 <HAL_ADC_ConfigChannel+0x3a0>)
 8003f36:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003f3a:	430e      	orrs	r6, r1
 8003f3c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003f40:	6086      	str	r6, [r0, #8]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	0992      	lsrs	r2, r2, #6
 8003f46:	fba4 1202 	umull	r1, r2, r4, r2
 8003f4a:	0992      	lsrs	r2, r2, #6
 8003f4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003f50:	0092      	lsls	r2, r2, #2
 8003f52:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003f54:	9a01      	ldr	r2, [sp, #4]
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	f43f af16 	beq.w	8003d88 <HAL_ADC_ConfigChannel+0xe4>
            wait_loop_index--;
 8003f5c:	9a01      	ldr	r2, [sp, #4]
 8003f5e:	3a01      	subs	r2, #1
 8003f60:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003f62:	9a01      	ldr	r2, [sp, #4]
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d1f9      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x2b8>
 8003f68:	e70e      	b.n	8003d88 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(*preg,
 8003f6a:	f854 600c 	ldr.w	r6, [r4, ip]
 8003f6e:	4030      	ands	r0, r6
 8003f70:	f844 000c 	str.w	r0, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f74:	6950      	ldr	r0, [r2, #20]
 8003f76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003f7a:	6150      	str	r0, [r2, #20]
 8003f7c:	e728      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x12c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f7e:	6e15      	ldr	r5, [r2, #96]	; 0x60
 8003f80:	6e15      	ldr	r5, [r2, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f82:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8003f86:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003f8a:	2f00      	cmp	r7, #0
 8003f8c:	d141      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x36e>
 8003f8e:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8003f92:	42b5      	cmp	r5, r6
 8003f94:	d106      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x300>
  MODIFY_REG(*preg,
 8003f96:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003f98:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003f9c:	6614      	str	r4, [r2, #96]	; 0x60
 8003f9e:	680c      	ldr	r4, [r1, #0]
 8003fa0:	f3c4 0712 	ubfx	r7, r4, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fa4:	6845      	ldr	r5, [r0, #4]
 8003fa6:	6846      	ldr	r6, [r0, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fa8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003fac:	2f00      	cmp	r7, #0
 8003fae:	d14f      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x3ac>
 8003fb0:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8003fb4:	42ae      	cmp	r6, r5
 8003fb6:	f040 809d 	bne.w	80040f4 <HAL_ADC_ConfigChannel+0x450>
  MODIFY_REG(*preg,
 8003fba:	6844      	ldr	r4, [r0, #4]
 8003fbc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003fc0:	6044      	str	r4, [r0, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fc2:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fc4:	6885      	ldr	r5, [r0, #8]
 8003fc6:	6886      	ldr	r6, [r0, #8]
 8003fc8:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8003fcc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	d148      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x3c2>
 8003fd4:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8003fd8:	42ae      	cmp	r6, r5
 8003fda:	f100 070c 	add.w	r7, r0, #12
 8003fde:	f040 808e 	bne.w	80040fe <HAL_ADC_ConfigChannel+0x45a>
  MODIFY_REG(*preg,
 8003fe2:	6884      	ldr	r4, [r0, #8]
 8003fe4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003fe8:	6084      	str	r4, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fea:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fec:	6838      	ldr	r0, [r7, #0]
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8003ff4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003ff8:	2d00      	cmp	r5, #0
 8003ffa:	d141      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x3dc>
 8003ffc:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8004000:	4285      	cmp	r5, r0
 8004002:	f47f ae7b 	bne.w	8003cfc <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800400c:	6038      	str	r0, [r7, #0]
 800400e:	680c      	ldr	r4, [r1, #0]
 8004010:	e674      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x58>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004016:	2e00      	cmp	r6, #0
 8004018:	d0c4      	beq.n	8003fa4 <HAL_ADC_ConfigChannel+0x300>
  return __builtin_clz(value);
 800401a:	fab6 f686 	clz	r6, r6
 800401e:	e7b8      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x2ee>
 8004020:	0007ffff 	.word	0x0007ffff
 8004024:	80080000 	.word	0x80080000
 8004028:	50000300 	.word	0x50000300
 800402c:	c3210000 	.word	0xc3210000
 8004030:	90c00010 	.word	0x90c00010
 8004034:	c7520000 	.word	0xc7520000
 8004038:	50000100 	.word	0x50000100
 800403c:	cb840000 	.word	0xcb840000
 8004040:	20000618 	.word	0x20000618
 8004044:	053e2d63 	.word	0x053e2d63
 8004048:	407f0000 	.word	0x407f0000
 800404c:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004054:	b11d      	cbz	r5, 800405e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004056:	fab5 f585 	clz	r5, r5
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800405a:	42ae      	cmp	r6, r5
 800405c:	d0ad      	beq.n	8003fba <HAL_ADC_ConfigChannel+0x316>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800405e:	6885      	ldr	r5, [r0, #8]
 8004060:	6886      	ldr	r6, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004062:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800406a:	b38d      	cbz	r5, 80040d0 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 800406c:	fab5 f585 	clz	r5, r5
 8004070:	42ae      	cmp	r6, r5
 8004072:	f100 070c 	add.w	r7, r0, #12
 8004076:	d0b4      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x33e>
 8004078:	6838      	ldr	r0, [r7, #0]
 800407a:	6838      	ldr	r0, [r7, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800407c:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004084:	2d00      	cmp	r5, #0
 8004086:	f43f ae39 	beq.w	8003cfc <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 800408a:	fab5 f585 	clz	r5, r5
 800408e:	e7b7      	b.n	8004000 <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004094:	b320      	cbz	r0, 80040e0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004096:	fab0 f080 	clz	r0, r0
 800409a:	3001      	adds	r0, #1
 800409c:	0680      	lsls	r0, r0, #26
 800409e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80040a6:	b1cd      	cbz	r5, 80040dc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80040a8:	fab5 f585 	clz	r5, r5
 80040ac:	3501      	adds	r5, #1
 80040ae:	f005 051f 	and.w	r5, r5, #31
 80040b2:	2601      	movs	r6, #1
 80040b4:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80040be:	b154      	cbz	r4, 80040d6 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80040c0:	fab4 f484 	clz	r4, r4
 80040c4:	3401      	adds	r4, #1
 80040c6:	f004 041f 	and.w	r4, r4, #31
 80040ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80040ce:	e72c      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x286>
 80040d0:	f100 070c 	add.w	r7, r0, #12
 80040d4:	e7d0      	b.n	8004078 <HAL_ADC_ConfigChannel+0x3d4>
  if (value == 0U)
 80040d6:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 80040da:	e6e9      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x20c>
 80040dc:	2502      	movs	r5, #2
 80040de:	e7eb      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x414>
 80040e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80040e4:	e7dd      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x3fe>
 80040e6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80040ea:	e6c3      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x1d0>
 80040ec:	4c06      	ldr	r4, [pc, #24]	; (8004108 <HAL_ADC_ConfigChannel+0x464>)
 80040ee:	e6df      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x20c>
 80040f0:	2502      	movs	r5, #2
 80040f2:	e6cc      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x1ea>
 80040f4:	6886      	ldr	r6, [r0, #8]
 80040f6:	6886      	ldr	r6, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040f8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80040fc:	e76c      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x334>
 80040fe:	68c6      	ldr	r6, [r0, #12]
 8004100:	68c0      	ldr	r0, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004102:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004106:	e77b      	b.n	8004000 <HAL_ADC_ConfigChannel+0x35c>
 8004108:	fe500000 	.word	0xfe500000

0800410c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800410c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004110:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004114:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004116:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004118:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800411a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800411c:	f000 815e 	beq.w	80043dc <HAL_ADCEx_InjectedConfigChannel+0x2d0>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004120:	6943      	ldr	r3, [r0, #20]
  __HAL_LOCK(hadc);
 8004122:	2201      	movs	r2, #1
 8004124:	4604      	mov	r4, r0
 8004126:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d072      	beq.n	8004214 <HAL_ADCEx_InjectedConfigChannel+0x108>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800412e:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004130:	4293      	cmp	r3, r2
 8004132:	d06f      	beq.n	8004214 <HAL_ADCEx_InjectedConfigChannel+0x108>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004134:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004136:	2800      	cmp	r0, #0
 8004138:	f040 8129 	bne.w	800438e <HAL_ADCEx_InjectedConfigChannel+0x282>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800413c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	2800      	cmp	r0, #0
 8004142:	f000 823e 	beq.w	80045c2 <HAL_ADCEx_InjectedConfigChannel+0x4b6>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004146:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800414a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800414c:	4318      	orrs	r0, r3
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800414e:	4310      	orrs	r0, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004150:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004154:	66a3      	str	r3, [r4, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004156:	f005 051f 	and.w	r5, r5, #31
 800415a:	f3c2 6384 	ubfx	r3, r2, #26, #5
 800415e:	40ab      	lsls	r3, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004160:	4318      	orrs	r0, r3
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	6660      	str	r0, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004166:	6898      	ldr	r0, [r3, #8]
 8004168:	0700      	lsls	r0, r0, #28
 800416a:	d410      	bmi.n	800418e <HAL_ADCEx_InjectedConfigChannel+0x82>
 800416c:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004170:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
 8004174:	0540      	lsls	r0, r0, #21
 8004176:	2d00      	cmp	r5, #0
 8004178:	f040 80fe 	bne.w	8004378 <HAL_ADCEx_InjectedConfigChannel+0x26c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800417c:	68dd      	ldr	r5, [r3, #12]
 800417e:	f891 6024 	ldrb.w	r6, [r1, #36]	; 0x24
 8004182:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004186:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 800418a:	4328      	orrs	r0, r5
 800418c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800418e:	6898      	ldr	r0, [r3, #8]
 8004190:	f010 0004 	ands.w	r0, r0, #4
 8004194:	d057      	beq.n	8004246 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004196:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800419a:	689d      	ldr	r5, [r3, #8]
 800419c:	07ef      	lsls	r7, r5, #31
 800419e:	d414      	bmi.n	80041ca <HAL_ADCEx_InjectedConfigChannel+0xbe>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80041a0:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80041a2:	4dc7      	ldr	r5, [pc, #796]	; (80044c0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80041a4:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041a8:	f8df e340 	ldr.w	lr, [pc, #832]	; 80044ec <HAL_ADCEx_InjectedConfigChannel+0x3e0>
 80041ac:	f007 0c18 	and.w	ip, r7, #24
 80041b0:	fa25 f50c 	lsr.w	r5, r5, ip
 80041b4:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80041b8:	4015      	ands	r5, r2
 80041ba:	ea26 060c 	bic.w	r6, r6, ip
 80041be:	4335      	orrs	r5, r6
 80041c0:	4577      	cmp	r7, lr
 80041c2:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80041c6:	f000 810d 	beq.w	80043e4 <HAL_ADCEx_InjectedConfigChannel+0x2d8>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80041ca:	49be      	ldr	r1, [pc, #760]	; (80044c4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80041cc:	420a      	tst	r2, r1
 80041ce:	d01b      	beq.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041d0:	4dbd      	ldr	r5, [pc, #756]	; (80044c8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80041d2:	4ebe      	ldr	r6, [pc, #760]	; (80044cc <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80041d4:	68a9      	ldr	r1, [r5, #8]
 80041d6:	42b2      	cmp	r2, r6
 80041d8:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 80041dc:	f000 80a7 	beq.w	800432e <HAL_ADCEx_InjectedConfigChannel+0x222>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80041e0:	4ebb      	ldr	r6, [pc, #748]	; (80044d0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 80041e2:	42b2      	cmp	r2, r6
 80041e4:	f000 80a3 	beq.w	800432e <HAL_ADCEx_InjectedConfigChannel+0x222>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80041e8:	4eba      	ldr	r6, [pc, #744]	; (80044d4 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80041ea:	42b2      	cmp	r2, r6
 80041ec:	f040 8155 	bne.w	800449a <HAL_ADCEx_InjectedConfigChannel+0x38e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041f0:	01ce      	lsls	r6, r1, #7
 80041f2:	d409      	bmi.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041f4:	4ab8      	ldr	r2, [pc, #736]	; (80044d8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d006      	beq.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041fa:	68ab      	ldr	r3, [r5, #8]
 80041fc:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004200:	431f      	orrs	r7, r3
 8004202:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8004206:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004208:	2300      	movs	r3, #0
 800420a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800420e:	b003      	add	sp, #12
 8004210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004214:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004218:	2809      	cmp	r0, #9
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	d1a3      	bne.n	8004166 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800421e:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004220:	0c55      	lsrs	r5, r2, #17
 8004222:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004226:	b120      	cbz	r0, 8004232 <HAL_ADCEx_InjectedConfigChannel+0x126>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004228:	6ace      	ldr	r6, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800422a:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800422e:	4330      	orrs	r0, r6
 8004230:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004232:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004234:	4ea9      	ldr	r6, [pc, #676]	; (80044dc <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 8004236:	4030      	ands	r0, r6
 8004238:	4328      	orrs	r0, r5
 800423a:	64d8      	str	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800423c:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800423e:	6665      	str	r5, [r4, #100]	; 0x64
 8004240:	0700      	lsls	r0, r0, #28
 8004242:	d4a4      	bmi.n	800418e <HAL_ADCEx_InjectedConfigChannel+0x82>
 8004244:	e792      	b.n	800416c <HAL_ADCEx_InjectedConfigChannel+0x60>
 8004246:	689d      	ldr	r5, [r3, #8]
 8004248:	f015 0508 	ands.w	r5, r5, #8
 800424c:	d1a5      	bne.n	800419a <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800424e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004250:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004254:	2e00      	cmp	r6, #0
 8004256:	f040 80b4 	bne.w	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x2b6>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800425a:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800425c:	68d8      	ldr	r0, [r3, #12]
 800425e:	bf0c      	ite	eq
 8004260:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004264:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 8004268:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800426a:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800426c:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004270:	2e01      	cmp	r6, #1
 8004272:	f000 8147 	beq.w	8004504 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004276:	691e      	ldr	r6, [r3, #16]
 8004278:	f026 0602 	bic.w	r6, r6, #2
 800427c:	611e      	str	r6, [r3, #16]
 800427e:	f3c2 5804 	ubfx	r8, r2, #20, #5
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004282:	688f      	ldr	r7, [r1, #8]
 8004284:	0dd2      	lsrs	r2, r2, #23
 8004286:	2607      	movs	r6, #7
 8004288:	f002 0e04 	and.w	lr, r2, #4
 800428c:	f103 0c14 	add.w	ip, r3, #20
 8004290:	fa06 f608 	lsl.w	r6, r6, r8
 8004294:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8004298:	ea6f 0606 	mvn.w	r6, r6
  MODIFY_REG(*preg,
 800429c:	f85e 200c 	ldr.w	r2, [lr, ip]
 80042a0:	f000 8128 	beq.w	80044f4 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 80042a4:	4016      	ands	r6, r2
 80042a6:	fa07 f708 	lsl.w	r7, r7, r8
 80042aa:	4337      	orrs	r7, r6
 80042ac:	f84e 700c 	str.w	r7, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042b6:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80042b8:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80042bc:	68df      	ldr	r7, [r3, #12]
 80042be:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80042c0:	f1be 0f04 	cmp.w	lr, #4
 80042c4:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80042c8:	f000 8128 	beq.w	800451c <HAL_ADCEx_InjectedConfigChannel+0x410>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80042cc:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80042d0:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(*preg,
 80042d2:	f856 902e 	ldr.w	r9, [r6, lr, lsl #2]
 80042d6:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80044f0 <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 80042da:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80042de:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80042e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80042ea:	4317      	orrs	r7, r2
 80042ec:	ea09 0808 	and.w	r8, r9, r8
 80042f0:	ea47 0708 	orr.w	r7, r7, r8
 80042f4:	f846 702e 	str.w	r7, [r6, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f8:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 80042fc:	698f      	ldr	r7, [r1, #24]
 80042fe:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004302:	f891 e01c 	ldrb.w	lr, [r1, #28]
 8004306:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800430a:	433a      	orrs	r2, r7
 800430c:	f846 202c 	str.w	r2, [r6, ip, lsl #2]
 8004310:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004312:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8004316:	f1be 0f01 	cmp.w	lr, #1
 800431a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800431e:	bf08      	it	eq
 8004320:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004324:	4315      	orrs	r5, r2
 8004326:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
 800432a:	680a      	ldr	r2, [r1, #0]
 800432c:	e735      	b.n	800419a <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800432e:	020a      	lsls	r2, r1, #8
 8004330:	f53f af6a 	bmi.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004338:	f47f af66 	bne.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800433c:	4a62      	ldr	r2, [pc, #392]	; (80044c8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800433e:	4968      	ldr	r1, [pc, #416]	; (80044e0 <HAL_ADCEx_InjectedConfigChannel+0x3d4>)
 8004340:	6893      	ldr	r3, [r2, #8]
 8004342:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004346:	431f      	orrs	r7, r3
 8004348:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 800434c:	6097      	str	r7, [r2, #8]
 800434e:	680b      	ldr	r3, [r1, #0]
 8004350:	4a64      	ldr	r2, [pc, #400]	; (80044e4 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004362:	9b01      	ldr	r3, [sp, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f43f af4f 	beq.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
          wait_loop_index--;
 800436a:	9b01      	ldr	r3, [sp, #4]
 800436c:	3b01      	subs	r3, #1
 800436e:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004370:	9b01      	ldr	r3, [sp, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f9      	bne.n	800436a <HAL_ADCEx_InjectedConfigChannel+0x25e>
 8004376:	e747      	b.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->CFGR,
 8004378:	68dd      	ldr	r5, [r3, #12]
 800437a:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800437e:	4328      	orrs	r0, r5
 8004380:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004382:	6898      	ldr	r0, [r3, #8]
 8004384:	f010 0004 	ands.w	r0, r0, #4
 8004388:	f47f af05 	bne.w	8004196 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 800438c:	e75b      	b.n	8004246 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800438e:	e9d1 2600 	ldrd	r2, r6, [r1]
 8004392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004394:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004398:	f006 061f 	and.w	r6, r6, #31
 800439c:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800439e:	431d      	orrs	r5, r3
 80043a0:	3801      	subs	r0, #1
 80043a2:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
 80043a6:	6823      	ldr	r3, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80043a8:	2800      	cmp	r0, #0
 80043aa:	f47f aedc 	bne.w	8004166 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80043ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80043b0:	4e4a      	ldr	r6, [pc, #296]	; (80044dc <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 80043b2:	4030      	ands	r0, r6
 80043b4:	4305      	orrs	r5, r0
 80043b6:	64dd      	str	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043b8:	6898      	ldr	r0, [r3, #8]
 80043ba:	0700      	lsls	r0, r0, #28
 80043bc:	f53f aee7 	bmi.w	800418e <HAL_ADCEx_InjectedConfigChannel+0x82>
 80043c0:	e6d4      	b.n	800416c <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80043c2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80043c4:	2e00      	cmp	r6, #0
 80043c6:	f43f af48 	beq.w	800425a <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80043ca:	2801      	cmp	r0, #1
 80043cc:	f000 8128 	beq.w	8004620 <HAL_ADCEx_InjectedConfigChannel+0x514>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80043d0:	68d8      	ldr	r0, [r3, #12]
 80043d2:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80043d6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d8:	4628      	mov	r0, r5
 80043da:	e747      	b.n	800426c <HAL_ADCEx_InjectedConfigChannel+0x160>
  __HAL_LOCK(hadc);
 80043dc:	2002      	movs	r0, #2
}
 80043de:	b003      	add	sp, #12
 80043e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80043e4:	f1bc 0f00 	cmp.w	ip, #0
 80043e8:	d12b      	bne.n	8004442 <HAL_ADCEx_InjectedConfigChannel+0x336>
 80043ea:	0e92      	lsrs	r2, r2, #26
 80043ec:	3201      	adds	r2, #1
 80043ee:	f002 061f 	and.w	r6, r2, #31
 80043f2:	2501      	movs	r5, #1
 80043f4:	0692      	lsls	r2, r2, #26
 80043f6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80043fa:	40b5      	lsls	r5, r6
 80043fc:	2e09      	cmp	r6, #9
 80043fe:	ea45 0502 	orr.w	r5, r5, r2
 8004402:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004406:	d946      	bls.n	8004496 <HAL_ADCEx_InjectedConfigChannel+0x38a>
 8004408:	3a1e      	subs	r2, #30
 800440a:	0512      	lsls	r2, r2, #20
 800440c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004410:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004412:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004416:	f00c 0c04 	and.w	ip, ip, #4
 800441a:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800441e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004422:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004426:	688e      	ldr	r6, [r1, #8]
 8004428:	f04f 0e07 	mov.w	lr, #7
 800442c:	fa0e fe02 	lsl.w	lr, lr, r2
 8004430:	ea25 050e 	bic.w	r5, r5, lr
 8004434:	fa06 f202 	lsl.w	r2, r6, r2
 8004438:	432a      	orrs	r2, r5
 800443a:	f84c 2007 	str.w	r2, [ip, r7]
 800443e:	680a      	ldr	r2, [r1, #0]
 8004440:	e6c3      	b.n	80041ca <HAL_ADCEx_InjectedConfigChannel+0xbe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004446:	2d00      	cmp	r5, #0
 8004448:	f040 80bd 	bne.w	80045c6 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004450:	2d00      	cmp	r5, #0
 8004452:	f000 8113 	beq.w	800467c <HAL_ADCEx_InjectedConfigChannel+0x570>
  return __builtin_clz(value);
 8004456:	fab5 f585 	clz	r5, r5
 800445a:	3501      	adds	r5, #1
 800445c:	06ad      	lsls	r5, r5, #26
 800445e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004466:	2e00      	cmp	r6, #0
 8004468:	f000 8106 	beq.w	8004678 <HAL_ADCEx_InjectedConfigChannel+0x56c>
  return __builtin_clz(value);
 800446c:	fab6 f686 	clz	r6, r6
 8004470:	3601      	adds	r6, #1
 8004472:	f006 061f 	and.w	r6, r6, #31
 8004476:	2701      	movs	r7, #1
 8004478:	fa07 f606 	lsl.w	r6, r7, r6
 800447c:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004482:	2a00      	cmp	r2, #0
 8004484:	f000 80f5 	beq.w	8004672 <HAL_ADCEx_InjectedConfigChannel+0x566>
  return __builtin_clz(value);
 8004488:	fab2 f282 	clz	r2, r2
 800448c:	3201      	adds	r2, #1
 800448e:	f002 021f 	and.w	r2, r2, #31
 8004492:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004496:	0512      	lsls	r2, r2, #20
 8004498:	e7ba      	b.n	8004410 <HAL_ADCEx_InjectedConfigChannel+0x304>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800449a:	4e13      	ldr	r6, [pc, #76]	; (80044e8 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 800449c:	42b2      	cmp	r2, r6
 800449e:	f47f aeb3 	bne.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044a2:	0249      	lsls	r1, r1, #9
 80044a4:	f53f aeb0 	bmi.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      if (ADC_VREFINT_INSTANCE(hadc))
 80044a8:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f43f aeac 	beq.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80044b0:	68ab      	ldr	r3, [r5, #8]
 80044b2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80044b6:	431f      	orrs	r7, r3
 80044b8:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 80044bc:	60af      	str	r7, [r5, #8]
 80044be:	e6a3      	b.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0xfc>
 80044c0:	0007ffff 	.word	0x0007ffff
 80044c4:	80080000 	.word	0x80080000
 80044c8:	50000300 	.word	0x50000300
 80044cc:	c3210000 	.word	0xc3210000
 80044d0:	90c00010 	.word	0x90c00010
 80044d4:	c7520000 	.word	0xc7520000
 80044d8:	50000100 	.word	0x50000100
 80044dc:	04104000 	.word	0x04104000
 80044e0:	20000618 	.word	0x20000618
 80044e4:	053e2d63 	.word	0x053e2d63
 80044e8:	cb840000 	.word	0xcb840000
 80044ec:	407f0000 	.word	0x407f0000
 80044f0:	03fff000 	.word	0x03fff000
  MODIFY_REG(*preg,
 80044f4:	4016      	ands	r6, r2
 80044f6:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004500:	615a      	str	r2, [r3, #20]
 8004502:	e6d9      	b.n	80042b8 <HAL_ADCEx_InjectedConfigChannel+0x1ac>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004504:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8004506:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004508:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800450c:	433e      	orrs	r6, r7
 800450e:	f046 0602 	orr.w	r6, r6, #2
 8004512:	f42c 77ff 	bic.w	r7, ip, #510	; 0x1fe
 8004516:	433e      	orrs	r6, r7
 8004518:	611e      	str	r6, [r3, #16]
 800451a:	e6b0      	b.n	800427e <HAL_ADCEx_InjectedConfigChannel+0x172>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800451c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800451e:	6e1d      	ldr	r5, [r3, #96]	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004520:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8004524:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004528:	f1bc 0f00 	cmp.w	ip, #0
 800452c:	d075      	beq.n	800461a <HAL_ADCEx_InjectedConfigChannel+0x50e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004532:	b157      	cbz	r7, 800454a <HAL_ADCEx_InjectedConfigChannel+0x43e>
  return __builtin_clz(value);
 8004534:	fab7 f787 	clz	r7, r7
 8004538:	42bd      	cmp	r5, r7
 800453a:	d106      	bne.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x43e>
  MODIFY_REG(*preg,
 800453c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800453e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004542:	661a      	str	r2, [r3, #96]	; 0x60
 8004544:	680a      	ldr	r2, [r1, #0]
 8004546:	f3c2 0c12 	ubfx	ip, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800454a:	6875      	ldr	r5, [r6, #4]
 800454c:	6877      	ldr	r7, [r6, #4]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800454e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004552:	f1bc 0f00 	cmp.w	ip, #0
 8004556:	d168      	bne.n	800462a <HAL_ADCEx_InjectedConfigChannel+0x51e>
 8004558:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800455c:	42af      	cmp	r7, r5
 800455e:	f040 809d 	bne.w	800469c <HAL_ADCEx_InjectedConfigChannel+0x590>
  MODIFY_REG(*preg,
 8004562:	6872      	ldr	r2, [r6, #4]
 8004564:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004568:	6072      	str	r2, [r6, #4]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800456a:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800456c:	68b5      	ldr	r5, [r6, #8]
 800456e:	68b7      	ldr	r7, [r6, #8]
 8004570:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004574:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004578:	2d00      	cmp	r5, #0
 800457a:	d161      	bne.n	8004640 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800457c:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004580:	42af      	cmp	r7, r5
 8004582:	f106 0c0c 	add.w	ip, r6, #12
 8004586:	f040 8084 	bne.w	8004692 <HAL_ADCEx_InjectedConfigChannel+0x586>
  MODIFY_REG(*preg,
 800458a:	68b2      	ldr	r2, [r6, #8]
 800458c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004590:	60b2      	str	r2, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004592:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004594:	f8dc 5000 	ldr.w	r5, [ip]
 8004598:	f8dc 6000 	ldr.w	r6, [ip]
 800459c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80045a0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80045a4:	2d00      	cmp	r5, #0
 80045a6:	d15a      	bne.n	800465e <HAL_ADCEx_InjectedConfigChannel+0x552>
 80045a8:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80045ac:	42b5      	cmp	r5, r6
 80045ae:	f47f adf4 	bne.w	800419a <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80045b2:	f8dc 2000 	ldr.w	r2, [ip]
 80045b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ba:	f8cc 2000 	str.w	r2, [ip]
 80045be:	680a      	ldr	r2, [r1, #0]
 80045c0:	e5eb      	b.n	800419a <HAL_ADCEx_InjectedConfigChannel+0x8e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80045c2:	4618      	mov	r0, r3
 80045c4:	e5c4      	b.n	8004150 <HAL_ADCEx_InjectedConfigChannel+0x44>
 80045c6:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80045ca:	3501      	adds	r5, #1
 80045cc:	f005 051f 	and.w	r5, r5, #31
 80045d0:	2d09      	cmp	r5, #9
 80045d2:	f67f af3b 	bls.w	800444c <HAL_ADCEx_InjectedConfigChannel+0x340>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80045da:	2d00      	cmp	r5, #0
 80045dc:	d053      	beq.n	8004686 <HAL_ADCEx_InjectedConfigChannel+0x57a>
  return __builtin_clz(value);
 80045de:	fab5 f585 	clz	r5, r5
 80045e2:	3501      	adds	r5, #1
 80045e4:	06ad      	lsls	r5, r5, #26
 80045e6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	d047      	beq.n	8004682 <HAL_ADCEx_InjectedConfigChannel+0x576>
  return __builtin_clz(value);
 80045f2:	fab6 f686 	clz	r6, r6
 80045f6:	3601      	adds	r6, #1
 80045f8:	f006 061f 	and.w	r6, r6, #31
 80045fc:	2701      	movs	r7, #1
 80045fe:	fa07 f606 	lsl.w	r6, r7, r6
 8004602:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004608:	b38a      	cbz	r2, 800466e <HAL_ADCEx_InjectedConfigChannel+0x562>
  return __builtin_clz(value);
 800460a:	fab2 f282 	clz	r2, r2
 800460e:	3201      	adds	r2, #1
 8004610:	f002 021f 	and.w	r2, r2, #31
 8004614:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004618:	e6f6      	b.n	8004408 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800461a:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800461e:	e78b      	b.n	8004538 <HAL_ADCEx_InjectedConfigChannel+0x42c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004620:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8004622:	f046 0620 	orr.w	r6, r6, #32
 8004626:	65e6      	str	r6, [r4, #92]	; 0x5c
 8004628:	e620      	b.n	800426c <HAL_ADCEx_InjectedConfigChannel+0x160>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800462e:	b11d      	cbz	r5, 8004638 <HAL_ADCEx_InjectedConfigChannel+0x52c>
  return __builtin_clz(value);
 8004630:	fab5 f585 	clz	r5, r5
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004634:	42af      	cmp	r7, r5
 8004636:	d094      	beq.n	8004562 <HAL_ADCEx_InjectedConfigChannel+0x456>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004638:	68b5      	ldr	r5, [r6, #8]
 800463a:	68b7      	ldr	r7, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800463c:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004644:	b315      	cbz	r5, 800468c <HAL_ADCEx_InjectedConfigChannel+0x580>
  return __builtin_clz(value);
 8004646:	fab5 f585 	clz	r5, r5
 800464a:	42af      	cmp	r7, r5
 800464c:	f106 0c0c 	add.w	ip, r6, #12
 8004650:	d09b      	beq.n	800458a <HAL_ADCEx_InjectedConfigChannel+0x47e>
 8004652:	f8dc 5000 	ldr.w	r5, [ip]
 8004656:	f8dc 6000 	ldr.w	r6, [ip]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800465a:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004662:	2d00      	cmp	r5, #0
 8004664:	f43f ad99 	beq.w	800419a <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 8004668:	fab5 f585 	clz	r5, r5
 800466c:	e79e      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  if (value == 0U)
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_ADCEx_InjectedConfigChannel+0x59c>)
 8004670:	e6ce      	b.n	8004410 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8004672:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004676:	e6cb      	b.n	8004410 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8004678:	2602      	movs	r6, #2
 800467a:	e6ff      	b.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x370>
 800467c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004680:	e6ef      	b.n	8004462 <HAL_ADCEx_InjectedConfigChannel+0x356>
 8004682:	2602      	movs	r6, #2
 8004684:	e7bd      	b.n	8004602 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 8004686:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800468a:	e7ae      	b.n	80045ea <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800468c:	f106 0c0c 	add.w	ip, r6, #12
 8004690:	e7df      	b.n	8004652 <HAL_ADCEx_InjectedConfigChannel+0x546>
 8004692:	68f7      	ldr	r7, [r6, #12]
 8004694:	68f6      	ldr	r6, [r6, #12]
 8004696:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800469a:	e787      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800469c:	68b7      	ldr	r7, [r6, #8]
 800469e:	68b7      	ldr	r7, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80046a0:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80046a4:	e76c      	b.n	8004580 <HAL_ADCEx_InjectedConfigChannel+0x474>
 80046a6:	bf00      	nop
 80046a8:	fe500000 	.word	0xfe500000

080046ac <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ac:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80046b0:	2a01      	cmp	r2, #1
 80046b2:	d047      	beq.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x98>
{
 80046b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046b6:	6804      	ldr	r4, [r0, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b8:	680e      	ldr	r6, [r1, #0]
 80046ba:	4603      	mov	r3, r0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046bc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80046c0:	f04f 0001 	mov.w	r0, #1
 80046c4:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046c8:	d007      	beq.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046cc:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 80046d4:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80046d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046da:	4d27      	ldr	r5, [pc, #156]	; (8004778 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80046dc:	68aa      	ldr	r2, [r5, #8]
 80046de:	0752      	lsls	r2, r2, #29
 80046e0:	d509      	bpl.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80046e2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046e6:	f042 0220 	orr.w	r2, r2, #32
 80046ea:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80046ec:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f6:	68a0      	ldr	r0, [r4, #8]
 80046f8:	f010 0004 	ands.w	r0, r0, #4
 80046fc:	d1f2      	bne.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046fe:	b31e      	cbz	r6, 8004748 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004700:	f8df e078 	ldr.w	lr, [pc, #120]	; 800477c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004704:	684f      	ldr	r7, [r1, #4]
 8004706:	f8de 2008 	ldr.w	r2, [lr, #8]
 800470a:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 800470e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004712:	433a      	orrs	r2, r7
 8004714:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8004718:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800471c:	68a2      	ldr	r2, [r4, #8]
 800471e:	07d4      	lsls	r4, r2, #31
 8004720:	d427      	bmi.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8004722:	68a8      	ldr	r0, [r5, #8]
 8004724:	f010 0001 	ands.w	r0, r0, #1
 8004728:	d121      	bne.n	800476e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        MODIFY_REG(tmpADC_Common->CCR,
 800472a:	f8de 2008 	ldr.w	r2, [lr, #8]
 800472e:	688c      	ldr	r4, [r1, #8]
 8004730:	f422 6171 	bic.w	r1, r2, #3856	; 0xf10
 8004734:	f021 010f 	bic.w	r1, r1, #15
 8004738:	ea46 0204 	orr.w	r2, r6, r4
 800473c:	430a      	orrs	r2, r1
 800473e:	f8ce 2008 	str.w	r2, [lr, #8]
 8004742:	e7d4      	b.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 8004744:	2002      	movs	r0, #2
}
 8004746:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004748:	4a0c      	ldr	r2, [pc, #48]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 800474a:	6891      	ldr	r1, [r2, #8]
 800474c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004750:	6091      	str	r1, [r2, #8]
 8004752:	68a0      	ldr	r0, [r4, #8]
 8004754:	68a9      	ldr	r1, [r5, #8]
 8004756:	07c9      	lsls	r1, r1, #31
 8004758:	f000 0001 	and.w	r0, r0, #1
 800475c:	d407      	bmi.n	800476e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800475e:	b930      	cbnz	r0, 800476e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004760:	6891      	ldr	r1, [r2, #8]
 8004762:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8004766:	f021 010f 	bic.w	r1, r1, #15
 800476a:	6091      	str	r1, [r2, #8]
 800476c:	e7bf      	b.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800476e:	2000      	movs	r0, #0
 8004770:	e7bd      	b.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004772:	68aa      	ldr	r2, [r5, #8]
 8004774:	e7bb      	b.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004776:	bf00      	nop
 8004778:	50000100 	.word	0x50000100
 800477c:	50000300 	.word	0x50000300

08004780 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004784:	2300      	movs	r3, #0
 8004786:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004788:	2800      	cmp	r0, #0
 800478a:	d054      	beq.n	8004836 <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800478c:	6802      	ldr	r2, [r0, #0]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	4604      	mov	r4, r0
 8004794:	db4f      	blt.n	8004836 <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004796:	7f43      	ldrb	r3, [r0, #29]
 8004798:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800479c:	2b00      	cmp	r3, #0
 800479e:	d07e      	beq.n	800489e <HAL_COMP_Init+0x11e>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80047a0:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 80047a4:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 80047a8:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80047aa:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 80047ac:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 80047ae:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80047b0:	6816      	ldr	r6, [r2, #0]
 80047b2:	4940      	ldr	r1, [pc, #256]	; (80048b4 <HAL_COMP_Init+0x134>)
               | hcomp->Init.Hysteresis
 80047b4:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 80047b6:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 80047b8:	4031      	ands	r1, r6
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	0218      	lsls	r0, r3, #8
 80047c2:	d501      	bpl.n	80047c8 <HAL_COMP_Init+0x48>
 80047c4:	023b      	lsls	r3, r7, #8
 80047c6:	d54e      	bpl.n	8004866 <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_COMP_Init+0x138>)
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d062      	beq.n	8004894 <HAL_COMP_Init+0x114>
 80047ce:	3304      	adds	r3, #4
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d06a      	beq.n	80048aa <HAL_COMP_Init+0x12a>
 80047d4:	3304      	adds	r3, #4
 80047d6:	429a      	cmp	r2, r3
 80047d8:	bf15      	itete	ne
 80047da:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 80047de:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 80047e2:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 80047e6:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80047ea:	69a3      	ldr	r3, [r4, #24]
 80047ec:	079f      	lsls	r7, r3, #30
 80047ee:	d025      	beq.n	800483c <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80047f0:	4d32      	ldr	r5, [pc, #200]	; (80048bc <HAL_COMP_Init+0x13c>)
 80047f2:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80047f4:	06de      	lsls	r6, r3, #27
 80047f6:	bf4c      	ite	mi
 80047f8:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80047fa:	4010      	andpl	r0, r2
 80047fc:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80047fe:	4d2f      	ldr	r5, [pc, #188]	; (80048bc <HAL_COMP_Init+0x13c>)
 8004800:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004802:	069f      	lsls	r7, r3, #26
 8004804:	bf4c      	ite	mi
 8004806:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004808:	4010      	andpl	r0, r2
 800480a:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800480c:	482b      	ldr	r0, [pc, #172]	; (80048bc <HAL_COMP_Init+0x13c>)
 800480e:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004810:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004812:	079e      	lsls	r6, r3, #30
 8004814:	bf4c      	ite	mi
 8004816:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004818:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	6045      	str	r5, [r0, #4]
 800481e:	d51d      	bpl.n	800485c <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <HAL_COMP_Init+0x13c>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4311      	orrs	r1, r2
 8004826:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004828:	7f63      	ldrb	r3, [r4, #29]
 800482a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800482e:	b18b      	cbz	r3, 8004854 <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8004832:	b003      	add	sp, #12
 8004834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8004836:	2001      	movs	r0, #1
}
 8004838:	b003      	add	sp, #12
 800483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <HAL_COMP_Init+0x13c>)
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	4011      	ands	r1, r2
 8004842:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	400a      	ands	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800484a:	7f63      	ldrb	r3, [r4, #29]
 800484c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ed      	bne.n	8004830 <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 8004854:	2301      	movs	r3, #1
 8004856:	7763      	strb	r3, [r4, #29]
}
 8004858:	b003      	add	sp, #12
 800485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800485c:	4917      	ldr	r1, [pc, #92]	; (80048bc <HAL_COMP_Init+0x13c>)
 800485e:	680b      	ldr	r3, [r1, #0]
 8004860:	401a      	ands	r2, r3
 8004862:	600a      	str	r2, [r1, #0]
 8004864:	e7f1      	b.n	800484a <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <HAL_COMP_Init+0x140>)
 8004868:	4916      	ldr	r1, [pc, #88]	; (80048c4 <HAL_COMP_Init+0x144>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	fba1 1303 	umull	r1, r3, r1, r3
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800487c:	9b01      	ldr	r3, [sp, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0a2      	beq.n	80047c8 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8004882:	9b01      	ldr	r3, [sp, #4]
 8004884:	3b01      	subs	r3, #1
 8004886:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8004888:	9b01      	ldr	r3, [sp, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f9      	bne.n	8004882 <HAL_COMP_Init+0x102>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <HAL_COMP_Init+0x138>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d19c      	bne.n	80047ce <HAL_COMP_Init+0x4e>
 8004894:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004898:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800489c:	e7a5      	b.n	80047ea <HAL_COMP_Init+0x6a>
      hcomp->Lock = HAL_UNLOCKED;
 800489e:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80048a0:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80048a2:	f7fe f8f1 	bl	8002a88 <HAL_COMP_MspInit>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	e77a      	b.n	80047a0 <HAL_COMP_Init+0x20>
 80048aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80048ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048b2:	e79a      	b.n	80047ea <HAL_COMP_Init+0x6a>
 80048b4:	ff007e0f 	.word	0xff007e0f
 80048b8:	40010200 	.word	0x40010200
 80048bc:	40010400 	.word	0x40010400
 80048c0:	20000618 	.word	0x20000618
 80048c4:	053e2d63 	.word	0x053e2d63

080048c8 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80048c8:	b1b0      	cbz	r0, 80048f8 <HAL_CORDIC_Init+0x30>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80048ca:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{
 80048ce:	b510      	push	{r4, lr}
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80048d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048d4:	4604      	mov	r4, r0
 80048d6:	b153      	cbz	r3, 80048ee <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80048d8:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80048da:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80048dc:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->pOutBuff = NULL;
 80048de:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 80048e2:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80048e6:	6160      	str	r0, [r4, #20]
  hcordic->State = HAL_CORDIC_STATE_READY;
 80048e8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 80048ec:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80048ee:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80048f2:	f7fe f92d 	bl	8002b50 <HAL_CORDIC_MspInit>
 80048f6:	e7ef      	b.n	80048d8 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
}
 80048fa:	4770      	bx	lr

080048fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048fc:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80048fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004900:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8004904:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004906:	0200      	lsls	r0, r0, #8
 8004908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800490c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004914:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004916:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_NVIC_SetPriority+0x64>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004928:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800492a:	f1c3 0507 	rsb	r5, r3, #7
 800492e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004930:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004934:	bf28      	it	cs
 8004936:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004938:	2c06      	cmp	r4, #6
 800493a:	d919      	bls.n	8004970 <HAL_NVIC_SetPriority+0x50>
 800493c:	3b03      	subs	r3, #3
 800493e:	f04f 34ff 	mov.w	r4, #4294967295
 8004942:	409c      	lsls	r4, r3
 8004944:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	40aa      	lsls	r2, r5
 800494e:	ea21 0102 	bic.w	r1, r1, r2
 8004952:	fa01 f203 	lsl.w	r2, r1, r3
 8004956:	4322      	orrs	r2, r4
 8004958:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800495a:	2800      	cmp	r0, #0
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	db0a      	blt.n	8004976 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004960:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004964:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004968:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800496c:	bc30      	pop	{r4, r5}
 800496e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004970:	2400      	movs	r4, #0
 8004972:	4623      	mov	r3, r4
 8004974:	e7e8      	b.n	8004948 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004976:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_NVIC_SetPriority+0x68>)
 8004978:	f000 000f 	and.w	r0, r0, #15
 800497c:	4403      	add	r3, r0
 800497e:	761a      	strb	r2, [r3, #24]
 8004980:	bc30      	pop	{r4, r5}
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00
 8004988:	e000ecfc 	.word	0xe000ecfc

0800498c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800498c:	2800      	cmp	r0, #0
 800498e:	db07      	blt.n	80049a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HAL_NVIC_EnableIRQ+0x18>)
 8004992:	f000 011f 	and.w	r1, r0, #31
 8004996:	2301      	movs	r3, #1
 8004998:	0940      	lsrs	r0, r0, #5
 800499a:	408b      	lsls	r3, r1
 800499c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000e100 	.word	0xe000e100

080049a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a8:	3801      	subs	r0, #1
 80049aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80049ae:	d20e      	bcs.n	80049ce <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b4:	4c08      	ldr	r4, [pc, #32]	; (80049d8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	20f0      	movs	r0, #240	; 0xf0
 80049ba:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049be:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049c2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80049c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80049ce:	2001      	movs	r0, #1
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000e010 	.word	0xe000e010
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <HAL_SYSTICK_IRQHandler>:
{
 80049e0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80049e2:	f7ff fffb 	bl	80049dc <HAL_SYSTICK_Callback>
}
 80049e6:	bd08      	pop	{r3, pc}

080049e8 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80049e8:	2800      	cmp	r0, #0
 80049ea:	f000 80d2 	beq.w	8004b92 <HAL_FDCAN_Init+0x1aa>
{
 80049ee:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80049f0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80049f4:	4604      	mov	r4, r0
 80049f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80c4 	beq.w	8004b88 <HAL_FDCAN_Init+0x1a0>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	6993      	ldr	r3, [r2, #24]
 8004a04:	f023 0310 	bic.w	r3, r3, #16
 8004a08:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a0a:	f7ff f837 	bl	8003a7c <HAL_GetTick>
 8004a0e:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004a10:	e005      	b.n	8004a1e <HAL_FDCAN_Init+0x36>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a12:	f7ff f833 	bl	8003a7c <HAL_GetTick>
 8004a16:	1b40      	subs	r0, r0, r5
 8004a18:	280a      	cmp	r0, #10
 8004a1a:	f200 80ac 	bhi.w	8004b76 <HAL_FDCAN_Init+0x18e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	0711      	lsls	r1, r2, #28
 8004a24:	d4f5      	bmi.n	8004a12 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a2e:	f7ff f825 	bl	8003a7c <HAL_GetTick>
 8004a32:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a34:	e005      	b.n	8004a42 <HAL_FDCAN_Init+0x5a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a36:	f7ff f821 	bl	8003a7c <HAL_GetTick>
 8004a3a:	1b40      	subs	r0, r0, r5
 8004a3c:	280a      	cmp	r0, #10
 8004a3e:	f200 809a 	bhi.w	8004b76 <HAL_FDCAN_Init+0x18e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	07d2      	lsls	r2, r2, #31
 8004a48:	d5f5      	bpl.n	8004a36 <HAL_FDCAN_Init+0x4e>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a4a:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004a4c:	4958      	ldr	r1, [pc, #352]	; (8004bb0 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a4e:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8004a52:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a54:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8004a56:	f000 80a3 	beq.w	8004ba0 <HAL_FDCAN_Init+0x1b8>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a5a:	7c22      	ldrb	r2, [r4, #16]
 8004a5c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	bf0c      	ite	eq
 8004a62:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a66:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8004a6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a6c:	7c62      	ldrb	r2, [r4, #17]
 8004a6e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	bf0c      	ite	eq
 8004a74:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a78:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8004a7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a7e:	7ca2      	ldrb	r2, [r4, #18]
 8004a80:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	bf0c      	ite	eq
 8004a86:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a8a:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8004a8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a90:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a92:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a9a:	432a      	orrs	r2, r5
 8004a9c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004aa4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004aa6:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004aa8:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004aaa:	f022 0210 	bic.w	r2, r2, #16
 8004aae:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ab0:	d071      	beq.n	8004b96 <HAL_FDCAN_Init+0x1ae>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004ab2:	b179      	cbz	r1, 8004ad4 <HAL_FDCAN_Init+0xec>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ab4:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004ab6:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ab8:	d076      	beq.n	8004ba8 <HAL_FDCAN_Init+0x1c0>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004abe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ac0:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004ac2:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ac4:	f042 0210 	orr.w	r2, r2, #16
 8004ac8:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004aca:	d103      	bne.n	8004ad4 <HAL_FDCAN_Init+0xec>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	f042 0220 	orr.w	r2, r2, #32
 8004ad2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ad8:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ada:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004adc:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ade:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ae0:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ae4:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ae6:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ae8:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004aea:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004aec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004af0:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004af4:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004af6:	d10e      	bne.n	8004b16 <HAL_FDCAN_Init+0x12e>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004af8:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004afc:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b00:	3a01      	subs	r2, #1
 8004b02:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b04:	3d01      	subs	r5, #1
 8004b06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b0a:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b0c:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b0e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b14:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004b1a:	6be5      	ldr	r5, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b1e:	4825      	ldr	r0, [pc, #148]	; (8004bb4 <HAL_FDCAN_Init+0x1cc>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b20:	432a      	orrs	r2, r5
 8004b22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b2a:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b2c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004b38:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004b3e:	4d1e      	ldr	r5, [pc, #120]	; (8004bb8 <HAL_FDCAN_Init+0x1d0>)
 8004b40:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b46:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b4e:	491b      	ldr	r1, [pc, #108]	; (8004bbc <HAL_FDCAN_Init+0x1d4>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_FDCAN_Init+0x1dc>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004b54:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b56:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b5a:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48
 8004b5e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004b62:	2100      	movs	r1, #0
 8004b64:	f004 ffb0 	bl	8009ac8 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b68:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b6a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b6c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b6e:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004b74:	bd38      	pop	{r3, r4, r5, pc}
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004b76:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004b78:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 8004b80:	2001      	movs	r0, #1
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004b82:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8004b88:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8004b8c:	f7fd fff8 	bl	8002b80 <HAL_FDCAN_MspInit>
 8004b90:	e736      	b.n	8004a00 <HAL_FDCAN_Init+0x18>
    return HAL_ERROR;
 8004b92:	2001      	movs	r0, #1
}
 8004b94:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	f042 0204 	orr.w	r2, r2, #4
 8004b9c:	619a      	str	r2, [r3, #24]
 8004b9e:	e799      	b.n	8004ad4 <HAL_FDCAN_Init+0xec>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004ba0:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_FDCAN_Init+0x1e0>)
 8004ba2:	6861      	ldr	r1, [r4, #4]
 8004ba4:	6011      	str	r1, [r2, #0]
 8004ba6:	e758      	b.n	8004a5a <HAL_FDCAN_Init+0x72>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ba8:	f042 0220 	orr.w	r2, r2, #32
 8004bac:	619a      	str	r2, [r3, #24]
 8004bae:	e791      	b.n	8004ad4 <HAL_FDCAN_Init+0xec>
 8004bb0:	40006400 	.word	0x40006400
 8004bb4:	4000a400 	.word	0x4000a400
 8004bb8:	4000a470 	.word	0x4000a470
 8004bbc:	4000a588 	.word	0x4000a588
 8004bc0:	4000a678 	.word	0x4000a678
 8004bc4:	4000a660 	.word	0x4000a660
 8004bc8:	40006500 	.word	0x40006500

08004bcc <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004bcc:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8004bd0:	2a01      	cmp	r2, #1
{
 8004bd2:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004bd4:	d005      	beq.n	8004be2 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004bd6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004bd8:	f042 0204 	orr.w	r2, r2, #4
 8004bdc:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8004bde:	2001      	movs	r0, #1
}
 8004be0:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004be2:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004bea:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004bec:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8004bf4:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004bf6:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop

08004bfc <HAL_FDCAN_GetRxMessage>:
{
 8004bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004bfe:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8004c02:	2c02      	cmp	r4, #2
 8004c04:	d005      	beq.n	8004c12 <HAL_FDCAN_GetRxMessage+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c06:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8004c0e:	2001      	movs	r0, #1
}
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c12:	2940      	cmp	r1, #64	; 0x40
 8004c14:	f8d0 e000 	ldr.w	lr, [r0]
 8004c18:	d053      	beq.n	8004cc2 <HAL_FDCAN_GetRxMessage+0xc6>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004c1a:	f8de 4098 	ldr.w	r4, [lr, #152]	; 0x98
 8004c1e:	0724      	lsls	r4, r4, #28
 8004c20:	d049      	beq.n	8004cb6 <HAL_FDCAN_GetRxMessage+0xba>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004c22:	f8de 5098 	ldr.w	r5, [lr, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004c26:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004c28:	f3c5 2c01 	ubfx	ip, r5, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004c2c:	eb0c 05cc 	add.w	r5, ip, ip, lsl #3
 8004c30:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8004c3a:	6055      	str	r5, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d14e      	bne.n	8004cde <HAL_FDCAN_GetRxMessage+0xe2>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004c40:	6825      	ldr	r5, [r4, #0]
 8004c42:	f3c5 458a 	ubfx	r5, r5, #18, #11
 8004c46:	6015      	str	r5, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004c48:	6825      	ldr	r5, [r4, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004c4a:	4f27      	ldr	r7, [pc, #156]	; (8004ce8 <HAL_FDCAN_GetRxMessage+0xec>)
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004c4c:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
 8004c50:	6095      	str	r5, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8004c58:	6115      	str	r5, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004c5a:	88a5      	ldrh	r5, [r4, #4]
 8004c5c:	61d5      	str	r5, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004c5e:	6865      	ldr	r5, [r4, #4]
 8004c60:	f405 2570 	and.w	r5, r5, #983040	; 0xf0000
 8004c64:	60d5      	str	r5, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004c66:	6866      	ldr	r6, [r4, #4]
 8004c68:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8004c6c:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004c6e:	6866      	ldr	r6, [r4, #4]
 8004c70:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8004c74:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004c76:	79e6      	ldrb	r6, [r4, #7]
 8004c78:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004c7c:	0c2d      	lsrs	r5, r5, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004c7e:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004c80:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004c82:	5d7d      	ldrb	r5, [r7, r5]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004c84:	0ff6      	lsrs	r6, r6, #31
 8004c86:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004c88:	b16d      	cbz	r5, 8004ca6 <HAL_FDCAN_GetRxMessage+0xaa>
 8004c8a:	3407      	adds	r4, #7
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	2500      	movs	r5, #0
      pRxData[ByteCounter] = pData[ByteCounter];
 8004c90:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8004c94:	f803 6f01 	strb.w	r6, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004c98:	89d6      	ldrh	r6, [r2, #14]
 8004c9a:	5dbe      	ldrb	r6, [r7, r6]
 8004c9c:	3501      	adds	r5, #1
 8004c9e:	42ae      	cmp	r6, r5
 8004ca0:	d8f6      	bhi.n	8004c90 <HAL_FDCAN_GetRxMessage+0x94>
 8004ca2:	f8d0 e000 	ldr.w	lr, [r0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ca6:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8004ca8:	bf0c      	ite	eq
 8004caa:	f8ce c094 	streq.w	ip, [lr, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8004cae:	f8ce c09c 	strne.w	ip, [lr, #156]	; 0x9c
    return HAL_OK;
 8004cb2:	2000      	movs	r0, #0
}
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004cb6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
}
 8004cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004cc2:	f8de 4090 	ldr.w	r4, [lr, #144]	; 0x90
 8004cc6:	0725      	lsls	r5, r4, #28
 8004cc8:	d0f5      	beq.n	8004cb6 <HAL_FDCAN_GetRxMessage+0xba>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004cca:	f8de 5090 	ldr.w	r5, [lr, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004cce:	6c84      	ldr	r4, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004cd0:	f3c5 2c01 	ubfx	ip, r5, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004cd4:	eb0c 05cc 	add.w	r5, ip, ip, lsl #3
 8004cd8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004cdc:	e7aa      	b.n	8004c34 <HAL_FDCAN_GetRxMessage+0x38>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004cde:	6825      	ldr	r5, [r4, #0]
 8004ce0:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8004ce4:	e7af      	b.n	8004c46 <HAL_FDCAN_GetRxMessage+0x4a>
 8004ce6:	bf00      	nop
 8004ce8:	08009c58 	.word	0x08009c58

08004cec <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004cec:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d905      	bls.n	8004d02 <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004cf6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8004cfe:	2001      	movs	r0, #1
}
 8004d00:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004d02:	6803      	ldr	r3, [r0, #0]
{
 8004d04:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004d06:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004d0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004d0c:	d02f      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004d0e:	07c4      	lsls	r4, r0, #31
 8004d10:	d42d      	bmi.n	8004d6e <HAL_FDCAN_ActivateNotification+0x82>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004d12:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8004d14:	f044 0401 	orr.w	r4, r4, #1
 8004d18:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004d1a:	b10d      	cbz	r5, 8004d20 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004d1c:	07c5      	lsls	r5, r0, #31
 8004d1e:	d40e      	bmi.n	8004d3e <HAL_FDCAN_ActivateNotification+0x52>
 8004d20:	f011 0f38 	tst.w	r1, #56	; 0x38
 8004d24:	d001      	beq.n	8004d2a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004d26:	0784      	lsls	r4, r0, #30
 8004d28:	d409      	bmi.n	8004d3e <HAL_FDCAN_ActivateNotification+0x52>
 8004d2a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8004d2e:	d001      	beq.n	8004d34 <HAL_FDCAN_ActivateNotification+0x48>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004d30:	0745      	lsls	r5, r0, #29
 8004d32:	d404      	bmi.n	8004d3e <HAL_FDCAN_ActivateNotification+0x52>
 8004d34:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8004d38:	d039      	beq.n	8004dae <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004d3a:	0704      	lsls	r4, r0, #28
 8004d3c:	d537      	bpl.n	8004dae <HAL_FDCAN_ActivateNotification+0xc2>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004d3e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004d40:	f040 0002 	orr.w	r0, r0, #2
 8004d44:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004d46:	060c      	lsls	r4, r1, #24
 8004d48:	d504      	bpl.n	8004d54 <HAL_FDCAN_ActivateNotification+0x68>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004d4a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8004d4e:	4310      	orrs	r0, r2
 8004d50:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004d54:	05c8      	lsls	r0, r1, #23
 8004d56:	d504      	bpl.n	8004d62 <HAL_FDCAN_ActivateNotification+0x76>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004d58:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004d5c:	4302      	orrs	r2, r0
 8004d5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004d62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d64:	4311      	orrs	r1, r2
    return HAL_OK;
 8004d66:	2000      	movs	r0, #0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004d68:	6559      	str	r1, [r3, #84]	; 0x54
}
 8004d6a:	bc30      	pop	{r4, r5}
 8004d6c:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004d6e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8004d72:	d001      	beq.n	8004d78 <HAL_FDCAN_ActivateNotification+0x8c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004d74:	0784      	lsls	r4, r0, #30
 8004d76:	d5cc      	bpl.n	8004d12 <HAL_FDCAN_ActivateNotification+0x26>
 8004d78:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8004d7c:	d114      	bne.n	8004da8 <HAL_FDCAN_ActivateNotification+0xbc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004d7e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8004d82:	d001      	beq.n	8004d88 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004d84:	0704      	lsls	r4, r0, #28
 8004d86:	d5c4      	bpl.n	8004d12 <HAL_FDCAN_ActivateNotification+0x26>
 8004d88:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8004d8c:	d001      	beq.n	8004d92 <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004d8e:	06c4      	lsls	r4, r0, #27
 8004d90:	d5bf      	bpl.n	8004d12 <HAL_FDCAN_ActivateNotification+0x26>
 8004d92:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8004d96:	d001      	beq.n	8004d9c <HAL_FDCAN_ActivateNotification+0xb0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004d98:	0684      	lsls	r4, r0, #26
 8004d9a:	d5ba      	bpl.n	8004d12 <HAL_FDCAN_ActivateNotification+0x26>
 8004d9c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8004da0:	d0bb      	beq.n	8004d1a <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004da2:	0644      	lsls	r4, r0, #25
 8004da4:	d4b9      	bmi.n	8004d1a <HAL_FDCAN_ActivateNotification+0x2e>
 8004da6:	e7b4      	b.n	8004d12 <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004da8:	0744      	lsls	r4, r0, #29
 8004daa:	d5b2      	bpl.n	8004d12 <HAL_FDCAN_ActivateNotification+0x26>
 8004dac:	e7e7      	b.n	8004d7e <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004dae:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8004db2:	d001      	beq.n	8004db8 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004db4:	06c5      	lsls	r5, r0, #27
 8004db6:	d4c2      	bmi.n	8004d3e <HAL_FDCAN_ActivateNotification+0x52>
 8004db8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8004dbc:	d001      	beq.n	8004dc2 <HAL_FDCAN_ActivateNotification+0xd6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004dbe:	0684      	lsls	r4, r0, #26
 8004dc0:	d4bd      	bmi.n	8004d3e <HAL_FDCAN_ActivateNotification+0x52>
 8004dc2:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8004dc6:	d0be      	beq.n	8004d46 <HAL_FDCAN_ActivateNotification+0x5a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004dc8:	0645      	lsls	r5, r0, #25
 8004dca:	d5bc      	bpl.n	8004d46 <HAL_FDCAN_ActivateNotification+0x5a>
 8004dcc:	e7b7      	b.n	8004d3e <HAL_FDCAN_ActivateNotification+0x52>
 8004dce:	bf00      	nop

08004dd0 <HAL_FDCAN_TxEventFifoCallback>:
}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop

08004dd4 <HAL_FDCAN_RxFifo1Callback>:
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop

08004dd8 <HAL_FDCAN_TxFifoEmptyCallback>:
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <HAL_FDCAN_TxBufferCompleteCallback>:
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <HAL_FDCAN_TxBufferAbortCallback>:
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop

08004de4 <HAL_FDCAN_TimestampWraparoundCallback>:
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <HAL_FDCAN_TimeoutOccurredCallback>:
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop

08004dec <HAL_FDCAN_HighPriorityMessageCallback>:
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop

08004df0 <HAL_FDCAN_ErrorCallback>:
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <HAL_FDCAN_ErrorStatusCallback>:
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop

08004df8 <HAL_FDCAN_IRQHandler>:
{
 8004df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004dfc:	6803      	ldr	r3, [r0, #0]
 8004dfe:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004e02:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004e06:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004e0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004e0c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004e10:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8004e12:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004e16:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004e18:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004e1c:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004e1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004e22:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8004e26:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004e2a:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004e2c:	0652      	lsls	r2, r2, #25
{
 8004e2e:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004e30:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004e34:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004e38:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8004e3c:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004e40:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004e44:	d503      	bpl.n	8004e4e <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e48:	0651      	lsls	r1, r2, #25
 8004e4a:	f100 8087 	bmi.w	8004f5c <HAL_FDCAN_IRQHandler+0x164>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e50:	05d2      	lsls	r2, r2, #23
 8004e52:	d503      	bpl.n	8004e5c <HAL_FDCAN_IRQHandler+0x64>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e56:	05d0      	lsls	r0, r2, #23
 8004e58:	f100 8086 	bmi.w	8004f68 <HAL_FDCAN_IRQHandler+0x170>
  if (TxEventFifoITs != 0U)
 8004e5c:	f1b9 0f00 	cmp.w	r9, #0
 8004e60:	d14d      	bne.n	8004efe <HAL_FDCAN_IRQHandler+0x106>
  if (RxFifo0ITs != 0U)
 8004e62:	f1b8 0f00 	cmp.w	r8, #0
 8004e66:	d13a      	bne.n	8004ede <HAL_FDCAN_IRQHandler+0xe6>
  if (RxFifo1ITs != 0U)
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	d141      	bne.n	8004ef0 <HAL_FDCAN_IRQHandler+0xf8>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6e:	0591      	lsls	r1, r2, #22
 8004e70:	d502      	bpl.n	8004e78 <HAL_FDCAN_IRQHandler+0x80>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e74:	0592      	lsls	r2, r2, #22
 8004e76:	d455      	bmi.n	8004f24 <HAL_FDCAN_IRQHandler+0x12c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e7a:	0617      	lsls	r7, r2, #24
 8004e7c:	d502      	bpl.n	8004e84 <HAL_FDCAN_IRQHandler+0x8c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004e7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e80:	0610      	lsls	r0, r2, #24
 8004e82:	d457      	bmi.n	8004f34 <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e86:	0491      	lsls	r1, r2, #18
 8004e88:	d502      	bpl.n	8004e90 <HAL_FDCAN_IRQHandler+0x98>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004e8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8c:	0492      	lsls	r2, r2, #18
 8004e8e:	d45d      	bmi.n	8004f4c <HAL_FDCAN_IRQHandler+0x154>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e92:	0417      	lsls	r7, r2, #16
 8004e94:	d502      	bpl.n	8004e9c <HAL_FDCAN_IRQHandler+0xa4>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004e96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e98:	0410      	lsls	r0, r2, #16
 8004e9a:	d43b      	bmi.n	8004f14 <HAL_FDCAN_IRQHandler+0x11c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e9e:	0451      	lsls	r1, r2, #17
 8004ea0:	d509      	bpl.n	8004eb6 <HAL_FDCAN_IRQHandler+0xbe>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004ea2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea4:	0452      	lsls	r2, r2, #17
 8004ea6:	d506      	bpl.n	8004eb6 <HAL_FDCAN_IRQHandler+0xbe>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004eac:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004eae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eb4:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8004eb6:	b966      	cbnz	r6, 8004ed2 <HAL_FDCAN_IRQHandler+0xda>
  if (Errors != 0U)
 8004eb8:	b125      	cbz	r5, 8004ec4 <HAL_FDCAN_IRQHandler+0xcc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8004ebe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ec0:	431d      	orrs	r5, r3
 8004ec2:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004ec4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ec6:	b113      	cbz	r3, 8004ece <HAL_FDCAN_IRQHandler+0xd6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ff91 	bl	8004df0 <HAL_FDCAN_ErrorCallback>
}
 8004ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004ed2:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff ff8c 	bl	8004df4 <HAL_FDCAN_ErrorStatusCallback>
 8004edc:	e7ec      	b.n	8004eb8 <HAL_FDCAN_IRQHandler+0xc0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004ede:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7fb ffc5 	bl	8000e74 <HAL_FDCAN_RxFifo0Callback>
 8004eea:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	d0bd      	beq.n	8004e6c <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004ef0:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff ff6d 	bl	8004dd4 <HAL_FDCAN_RxFifo1Callback>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	e7b6      	b.n	8004e6c <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004efe:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004f02:	4649      	mov	r1, r9
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7ff ff63 	bl	8004dd0 <HAL_FDCAN_TxEventFifoCallback>
 8004f0a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8004f0c:	f1b8 0f00 	cmp.w	r8, #0
 8004f10:	d0aa      	beq.n	8004e68 <HAL_FDCAN_IRQHandler+0x70>
 8004f12:	e7e4      	b.n	8004ede <HAL_FDCAN_IRQHandler+0xe6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f18:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7ff ff64 	bl	8004de8 <HAL_FDCAN_TimeoutOccurredCallback>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	e7bb      	b.n	8004e9c <HAL_FDCAN_IRQHandler+0xa4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f28:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7ff ff54 	bl	8004dd8 <HAL_FDCAN_TxFifoEmptyCallback>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	e7a1      	b.n	8004e78 <HAL_FDCAN_IRQHandler+0x80>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004f34:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004f38:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004f3c:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004f3e:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004f40:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004f42:	4620      	mov	r0, r4
 8004f44:	f7ff ff4a 	bl	8004ddc <HAL_FDCAN_TxBufferCompleteCallback>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	e79b      	b.n	8004e84 <HAL_FDCAN_IRQHandler+0x8c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004f52:	4620      	mov	r0, r4
 8004f54:	f7ff ff46 	bl	8004de4 <HAL_FDCAN_TimestampWraparoundCallback>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	e799      	b.n	8004e90 <HAL_FDCAN_IRQHandler+0x98>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004f5c:	2240      	movs	r2, #64	; 0x40
 8004f5e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004f60:	f7ff ff44 	bl	8004dec <HAL_FDCAN_HighPriorityMessageCallback>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	e772      	b.n	8004e4e <HAL_FDCAN_IRQHandler+0x56>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004f68:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004f6c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004f70:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004f74:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff ff31 	bl	8004de0 <HAL_FDCAN_TxBufferAbortCallback>
 8004f7e:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8004f80:	f1b9 0f00 	cmp.w	r9, #0
 8004f84:	f43f af6d 	beq.w	8004e62 <HAL_FDCAN_IRQHandler+0x6a>
 8004f88:	e7b9      	b.n	8004efe <HAL_FDCAN_IRQHandler+0x106>
 8004f8a:	bf00      	nop

08004f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f90:	f8d1 e000 	ldr.w	lr, [r1]
{
 8004f94:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f96:	f1be 0f00 	cmp.w	lr, #0
 8004f9a:	f000 8081 	beq.w	80050a0 <HAL_GPIO_Init+0x114>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f9e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8005140 <HAL_GPIO_Init+0x1b4>
 8004fa2:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 8004fa4:	2600      	movs	r6, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	fa03 f206 	lsl.w	r2, r3, r6
    if (iocurrent != 0x00u)
 8004fac:	ea12 070e 	ands.w	r7, r2, lr
 8004fb0:	d072      	beq.n	8005098 <HAL_GPIO_Init+0x10c>
 8004fb2:	e9d8 1401 	ldrd	r1, r4, [r8, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fb6:	f021 0b10 	bic.w	fp, r1, #16
 8004fba:	fa06 fc03 	lsl.w	ip, r6, r3
 8004fbe:	f10b 35ff 	add.w	r5, fp, #4294967295
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	fa03 fa0c 	lsl.w	sl, r3, ip
 8004fc8:	2d01      	cmp	r5, #1
 8004fca:	ea6f 0a0a 	mvn.w	sl, sl
 8004fce:	fa04 f40c 	lsl.w	r4, r4, ip
 8004fd2:	d968      	bls.n	80050a6 <HAL_GPIO_Init+0x11a>
      temp = GPIOx->PUPDR;
 8004fd4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fd6:	ea0a 0303 	and.w	r3, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fda:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 8004fdc:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 8004fde:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fe0:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fe4:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fe8:	fa03 f30c 	lsl.w	r3, r3, ip
 8004fec:	ea43 030a 	orr.w	r3, r3, sl
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ff0:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 8004ff2:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ff4:	d550      	bpl.n	8005098 <HAL_GPIO_Init+0x10c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff6:	4a4c      	ldr	r2, [pc, #304]	; (8005128 <HAL_GPIO_Init+0x19c>)
 8004ff8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8005000:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005002:	f026 0403 	bic.w	r4, r6, #3
 8005006:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8005012:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005014:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005018:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800501a:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	220f      	movs	r2, #15
 8005020:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005022:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005026:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800502a:	d013      	beq.n	8005054 <HAL_GPIO_Init+0xc8>
 800502c:	4d3f      	ldr	r5, [pc, #252]	; (800512c <HAL_GPIO_Init+0x1a0>)
 800502e:	42a8      	cmp	r0, r5
 8005030:	d06b      	beq.n	800510a <HAL_GPIO_Init+0x17e>
 8005032:	4d3f      	ldr	r5, [pc, #252]	; (8005130 <HAL_GPIO_Init+0x1a4>)
 8005034:	42a8      	cmp	r0, r5
 8005036:	d063      	beq.n	8005100 <HAL_GPIO_Init+0x174>
 8005038:	4d3e      	ldr	r5, [pc, #248]	; (8005134 <HAL_GPIO_Init+0x1a8>)
 800503a:	42a8      	cmp	r0, r5
 800503c:	d06a      	beq.n	8005114 <HAL_GPIO_Init+0x188>
 800503e:	4d3e      	ldr	r5, [pc, #248]	; (8005138 <HAL_GPIO_Init+0x1ac>)
 8005040:	42a8      	cmp	r0, r5
 8005042:	d06c      	beq.n	800511e <HAL_GPIO_Init+0x192>
 8005044:	4d3d      	ldr	r5, [pc, #244]	; (800513c <HAL_GPIO_Init+0x1b0>)
 8005046:	42a8      	cmp	r0, r5
 8005048:	bf0c      	ite	eq
 800504a:	2505      	moveq	r5, #5
 800504c:	2506      	movne	r5, #6
 800504e:	fa05 f303 	lsl.w	r3, r5, r3
 8005052:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005054:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR1;
 8005056:	f8d9 3000 	ldr.w	r3, [r9]
        temp &= ~(iocurrent);
 800505a:	43fa      	mvns	r2, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800505c:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 800505e:	bf54      	ite	pl
 8005060:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005062:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 8005064:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR1;
 8005068:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800506c:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 800506e:	bf54      	ite	pl
 8005070:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005072:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 8005074:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005078:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800507c:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 800507e:	bf54      	ite	pl
 8005080:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005082:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 8005084:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR1;
 8005088:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800508c:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 800508e:	bf54      	ite	pl
 8005090:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005092:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 8005094:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 8005098:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800509a:	fa3e f306 	lsrs.w	r3, lr, r6
 800509e:	d182      	bne.n	8004fa6 <HAL_GPIO_Init+0x1a>
  }
}
 80050a0:	b003      	add	sp, #12
 80050a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80050a6:	6883      	ldr	r3, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050a8:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ac:	ea03 030a 	and.w	r3, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050b0:	fa05 f50c 	lsl.w	r5, r5, ip
 80050b4:	431d      	orrs	r5, r3
        GPIOx->OSPEEDR = temp;
 80050b6:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80050b8:	6843      	ldr	r3, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050ba:	f3c1 1500 	ubfx	r5, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050be:	ea23 0302 	bic.w	r3, r3, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050c2:	462a      	mov	r2, r5
 80050c4:	40b2      	lsls	r2, r6
 80050c6:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 80050c8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80050ca:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050cc:	ea03 030a 	and.w	r3, r3, sl
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050d0:	431c      	orrs	r4, r3
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050d2:	f1bb 0f02 	cmp.w	fp, #2
      GPIOx->PUPDR = temp;
 80050d6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050d8:	d181      	bne.n	8004fde <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 80050da:	08f4      	lsrs	r4, r6, #3
 80050dc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050e0:	f006 0307 	and.w	r3, r6, #7
        temp = GPIOx->AFR[position >> 3U];
 80050e4:	6a25      	ldr	r5, [r4, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	f04f 0b0f 	mov.w	fp, #15
 80050f0:	fa0b fb03 	lsl.w	fp, fp, r3
 80050f4:	ea25 050b 	bic.w	r5, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050f8:	409a      	lsls	r2, r3
 80050fa:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3U] = temp;
 80050fc:	6222      	str	r2, [r4, #32]
 80050fe:	e76e      	b.n	8004fde <HAL_GPIO_Init+0x52>
 8005100:	2502      	movs	r5, #2
 8005102:	fa05 f303 	lsl.w	r3, r5, r3
 8005106:	431a      	orrs	r2, r3
 8005108:	e7a4      	b.n	8005054 <HAL_GPIO_Init+0xc8>
 800510a:	2501      	movs	r5, #1
 800510c:	fa05 f303 	lsl.w	r3, r5, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	e79f      	b.n	8005054 <HAL_GPIO_Init+0xc8>
 8005114:	2503      	movs	r5, #3
 8005116:	fa05 f303 	lsl.w	r3, r5, r3
 800511a:	431a      	orrs	r2, r3
 800511c:	e79a      	b.n	8005054 <HAL_GPIO_Init+0xc8>
 800511e:	2504      	movs	r5, #4
 8005120:	fa05 f303 	lsl.w	r3, r5, r3
 8005124:	431a      	orrs	r2, r3
 8005126:	e795      	b.n	8005054 <HAL_GPIO_Init+0xc8>
 8005128:	40021000 	.word	0x40021000
 800512c:	48000400 	.word	0x48000400
 8005130:	48000800 	.word	0x48000800
 8005134:	48000c00 	.word	0x48000c00
 8005138:	48001000 	.word	0x48001000
 800513c:	48001400 	.word	0x48001400
 8005140:	40010400 	.word	0x40010400

08005144 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005144:	b90a      	cbnz	r2, 800514a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005146:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005148:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800514a:	6181      	str	r1, [r0, #24]
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005150:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005152:	ea01 0203 	and.w	r2, r1, r3
 8005156:	ea21 0103 	bic.w	r1, r1, r3
 800515a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800515e:	6181      	str	r1, [r0, #24]
}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop

08005164 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005164:	2800      	cmp	r0, #0
 8005166:	d05c      	beq.n	8005222 <HAL_OPAMP_Init+0xbe>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005168:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800516c:	2b05      	cmp	r3, #5
 800516e:	d058      	beq.n	8005222 <HAL_OPAMP_Init+0xbe>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005170:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005174:	2b02      	cmp	r3, #2
 8005176:	d054      	beq.n	8005222 <HAL_OPAMP_Init+0xbe>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005178:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <HAL_OPAMP_Init+0x100>)
{
 800517a:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800517c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	661a      	str	r2, [r3, #96]	; 0x60
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8005186:	b082      	sub	sp, #8
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005190:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005194:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005198:	2b00      	cmp	r3, #0
 800519a:	d044      	beq.n	8005226 <HAL_OPAMP_Init+0xc2>
 800519c:	4604      	mov	r4, r0

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800519e:	f7fd fd47 	bl	8002c30 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	f023 0220 	bic.w	r2, r3, #32
 80051a8:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80051aa:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80051ac:	d041      	beq.n	8005232 <HAL_OPAMP_Init+0xce>
 80051ae:	6860      	ldr	r0, [r4, #4]
 80051b0:	68e6      	ldr	r6, [r4, #12]
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80051b2:	6811      	ldr	r1, [r2, #0]
 80051b4:	6925      	ldr	r5, [r4, #16]
 80051b6:	4303      	orrs	r3, r0
 80051b8:	4333      	orrs	r3, r6
 80051ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80051bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051be:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 80051c0:	f021 0110 	bic.w	r1, r1, #16
 80051c4:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80051c6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 80051c8:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80051ca:	4333      	orrs	r3, r6
 80051cc:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
 80051d0:	432b      	orrs	r3, r5
 80051d2:	4925      	ldr	r1, [pc, #148]	; (8005268 <HAL_OPAMP_Init+0x104>)
 80051d4:	6815      	ldr	r5, [r2, #0]
 80051d6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80051da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80051de:	7d20      	ldrb	r0, [r4, #20]
 80051e0:	4029      	ands	r1, r5
 80051e2:	2801      	cmp	r0, #1
 80051e4:	ea43 0301 	orr.w	r3, r3, r1
 80051e8:	bf14      	ite	ne
 80051ea:	2100      	movne	r1, #0
 80051ec:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80051f4:	6993      	ldr	r3, [r2, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	db09      	blt.n	800520e <HAL_OPAMP_Init+0xaa>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80051fa:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 80051fe:	6a20      	ldr	r0, [r4, #32]
 8005200:	6991      	ldr	r1, [r2, #24]
 8005202:	432b      	orrs	r3, r5
 8005204:	4303      	orrs	r3, r0
 8005206:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800520a:	430b      	orrs	r3, r1
 800520c:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800520e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005212:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005216:	b94b      	cbnz	r3, 800522c <HAL_OPAMP_Init+0xc8>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005218:	2301      	movs	r3, #1
 800521a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 800521e:	b002      	add	sp, #8
 8005220:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005222:	2001      	movs	r0, #1
}
 8005224:	4770      	bx	lr
      hopamp->Lock = HAL_UNLOCKED;
 8005226:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 800522a:	e7b7      	b.n	800519c <HAL_OPAMP_Init+0x38>
    return status;
 800522c:	2000      	movs	r0, #0
}
 800522e:	b002      	add	sp, #8
 8005230:	bd70      	pop	{r4, r5, r6, pc}
 8005232:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005234:	6811      	ldr	r1, [r2, #0]
 8005236:	6920      	ldr	r0, [r4, #16]
 8005238:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800523a:	4333      	orrs	r3, r6
 800523c:	4303      	orrs	r3, r0
 800523e:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8005242:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8005244:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8005246:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8005248:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 800524a:	4303      	orrs	r3, r0
 800524c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800524e:	6816      	ldr	r6, [r2, #0]
 8005250:	4905      	ldr	r1, [pc, #20]	; (8005268 <HAL_OPAMP_Init+0x104>)
 8005252:	432b      	orrs	r3, r5
 8005254:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005256:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 800525a:	4031      	ands	r1, r6
 800525c:	7d20      	ldrb	r0, [r4, #20]
 800525e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005262:	e7be      	b.n	80051e2 <HAL_OPAMP_Init+0x7e>
 8005264:	40021000 	.word	0x40021000
 8005268:	e0003e11 	.word	0xe0003e11

0800526c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800526c:	4a3b      	ldr	r2, [pc, #236]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 800526e:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005270:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005272:	b968      	cbnz	r0, 8005290 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527c:	d014      	beq.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800527e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005282:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800528e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005290:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005294:	d02f      	beq.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800529a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800529e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80052a0:	2000      	movs	r0, #0
}
 80052a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052a6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052ac:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80052ae:	482d      	ldr	r0, [pc, #180]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80052b4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052b8:	6811      	ldr	r1, [r2, #0]
 80052ba:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80052be:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80052c2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052c4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052c6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052c8:	2332      	movs	r3, #50	; 0x32
 80052ca:	fb03 f304 	mul.w	r3, r3, r4
 80052ce:	fba0 0303 	umull	r0, r3, r0, r3
 80052d2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052d6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052da:	d506      	bpl.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 80052dc:	e000      	b.n	80052e0 <HAL_PWREx_ControlVoltageScaling+0x74>
 80052de:	b123      	cbz	r3, 80052ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 80052e0:	6951      	ldr	r1, [r2, #20]
 80052e2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80052e4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e8:	d4f9      	bmi.n	80052de <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	055c      	lsls	r4, r3, #21
 80052f0:	d5d6      	bpl.n	80052a0 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80052f2:	2003      	movs	r0, #3
 80052f4:	e7d5      	b.n	80052a2 <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fe:	d009      	beq.n	8005314 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005300:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8005304:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800530c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800530e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005312:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005314:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005318:	4b11      	ldr	r3, [pc, #68]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800531a:	4812      	ldr	r0, [pc, #72]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800531c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005320:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800532a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800532e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005330:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005332:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005334:	2332      	movs	r3, #50	; 0x32
 8005336:	fb03 f304 	mul.w	r3, r3, r4
 800533a:	fba0 0303 	umull	r0, r3, r0, r3
 800533e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005340:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005342:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005346:	d5d0      	bpl.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005348:	e001      	b.n	800534e <HAL_PWREx_ControlVoltageScaling+0xe2>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0cd      	beq.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 800534e:	6951      	ldr	r1, [r2, #20]
 8005350:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005352:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005356:	d5c8      	bpl.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005358:	e7f7      	b.n	800534a <HAL_PWREx_ControlVoltageScaling+0xde>
 800535a:	bf00      	nop
 800535c:	40007000 	.word	0x40007000
 8005360:	20000618 	.word	0x20000618
 8005364:	431bde83 	.word	0x431bde83

08005368 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005368:	4a02      	ldr	r2, [pc, #8]	; (8005374 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800536a:	6893      	ldr	r3, [r2, #8]
 800536c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005370:	6093      	str	r3, [r2, #8]
}
 8005372:	4770      	bx	lr
 8005374:	40007000 	.word	0x40007000

08005378 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005378:	2800      	cmp	r0, #0
 800537a:	f000 816c 	beq.w	8005656 <HAL_RCC_OscConfig+0x2de>
{
 800537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	6803      	ldr	r3, [r0, #0]
 8005384:	07d9      	lsls	r1, r3, #31
{
 8005386:	b082      	sub	sp, #8
 8005388:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800538a:	d52d      	bpl.n	80053e8 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538c:	49b7      	ldr	r1, [pc, #732]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 800538e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005390:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005392:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005396:	2a0c      	cmp	r2, #12
 8005398:	f000 80f5 	beq.w	8005586 <HAL_RCC_OscConfig+0x20e>
 800539c:	2a08      	cmp	r2, #8
 800539e:	f000 80f7 	beq.w	8005590 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a2:	6863      	ldr	r3, [r4, #4]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	f000 812e 	beq.w	8005608 <HAL_RCC_OscConfig+0x290>
 80053ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b0:	f000 81e0 	beq.w	8005774 <HAL_RCC_OscConfig+0x3fc>
 80053b4:	4dad      	ldr	r5, [pc, #692]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 80053b6:	682a      	ldr	r2, [r5, #0]
 80053b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	682a      	ldr	r2, [r5, #0]
 80053c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053c4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 8123 	bne.w	8005612 <HAL_RCC_OscConfig+0x29a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fe fb56 	bl	8003a7c <HAL_GetTick>
 80053d0:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d2:	e005      	b.n	80053e0 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d4:	f7fe fb52 	bl	8003a7c <HAL_GetTick>
 80053d8:	1b80      	subs	r0, r0, r6
 80053da:	2864      	cmp	r0, #100	; 0x64
 80053dc:	f200 8137 	bhi.w	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	039f      	lsls	r7, r3, #14
 80053e4:	d4f6      	bmi.n	80053d4 <HAL_RCC_OscConfig+0x5c>
 80053e6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e8:	079e      	lsls	r6, r3, #30
 80053ea:	f100 80a5 	bmi.w	8005538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ee:	071a      	lsls	r2, r3, #28
 80053f0:	d519      	bpl.n	8005426 <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f4:	4d9d      	ldr	r5, [pc, #628]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80d7 	beq.w	80055aa <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 80053fc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fe fb38 	bl	8003a7c <HAL_GetTick>
 800540c:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800540e:	e005      	b.n	800541c <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005410:	f7fe fb34 	bl	8003a7c <HAL_GetTick>
 8005414:	1b80      	subs	r0, r0, r6
 8005416:	2802      	cmp	r0, #2
 8005418:	f200 8119 	bhi.w	800564e <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800541c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005420:	079f      	lsls	r7, r3, #30
 8005422:	d5f5      	bpl.n	8005410 <HAL_RCC_OscConfig+0x98>
 8005424:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005426:	0759      	lsls	r1, r3, #29
 8005428:	d53f      	bpl.n	80054aa <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800542a:	4b90      	ldr	r3, [pc, #576]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 800542c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800542e:	00d2      	lsls	r2, r2, #3
 8005430:	f100 812b 	bmi.w	800568a <HAL_RCC_OscConfig+0x312>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800543a:	659a      	str	r2, [r3, #88]	; 0x58
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005446:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005448:	4d89      	ldr	r5, [pc, #548]	; (8005670 <HAL_RCC_OscConfig+0x2f8>)
 800544a:	682a      	ldr	r2, [r5, #0]
 800544c:	05d7      	lsls	r7, r2, #23
 800544e:	f140 80ee 	bpl.w	800562e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	2b01      	cmp	r3, #1
 8005456:	f000 811a 	beq.w	800568e <HAL_RCC_OscConfig+0x316>
 800545a:	2b05      	cmp	r3, #5
 800545c:	f000 81cb 	beq.w	80057f6 <HAL_RCC_OscConfig+0x47e>
 8005460:	4d82      	ldr	r5, [pc, #520]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 8005462:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 800546e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8005472:	f022 0204 	bic.w	r2, r2, #4
 8005476:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 810e 	bne.w	800569c <HAL_RCC_OscConfig+0x324>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fe fafc 	bl	8003a7c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005484:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005488:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800548a:	e006      	b.n	800549a <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548c:	f7fe faf6 	bl	8003a7c <HAL_GetTick>
 8005490:	eba0 0008 	sub.w	r0, r0, r8
 8005494:	42b8      	cmp	r0, r7
 8005496:	f200 80da 	bhi.w	800564e <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800549a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800549e:	079a      	lsls	r2, r3, #30
 80054a0:	d4f4      	bmi.n	800548c <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054a2:	2e00      	cmp	r6, #0
 80054a4:	f040 8123 	bne.w	80056ee <HAL_RCC_OscConfig+0x376>
 80054a8:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054aa:	069b      	lsls	r3, r3, #26
 80054ac:	d518      	bpl.n	80054e0 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ae:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054b0:	4d6e      	ldr	r5, [pc, #440]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8107 	beq.w	80056c6 <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_HSI48_ENABLE();
 80054b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7fe fada 	bl	8003a7c <HAL_GetTick>
 80054c8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054ca:	e005      	b.n	80054d8 <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054cc:	f7fe fad6 	bl	8003a7c <HAL_GetTick>
 80054d0:	1b80      	subs	r0, r0, r6
 80054d2:	2802      	cmp	r0, #2
 80054d4:	f200 80bb 	bhi.w	800564e <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80054dc:	079f      	lsls	r7, r3, #30
 80054de:	d5f5      	bpl.n	80054cc <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054e0:	69e0      	ldr	r0, [r4, #28]
 80054e2:	b328      	cbz	r0, 8005530 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054e4:	4d61      	ldr	r5, [pc, #388]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 80054e6:	68aa      	ldr	r2, [r5, #8]
 80054e8:	f002 020c 	and.w	r2, r2, #12
 80054ec:	2a0c      	cmp	r2, #12
 80054ee:	f000 814e 	beq.w	800578e <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054f4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80054f6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80054fa:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054fc:	f000 80fd 	beq.w	80056fa <HAL_RCC_OscConfig+0x382>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005500:	68ea      	ldr	r2, [r5, #12]
 8005502:	f022 0203 	bic.w	r2, r2, #3
 8005506:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005508:	68ea      	ldr	r2, [r5, #12]
 800550a:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800550e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005512:	60ea      	str	r2, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fe fab2 	bl	8003a7c <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005518:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800551a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551c:	e005      	b.n	800552a <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551e:	f7fe faad 	bl	8003a7c <HAL_GetTick>
 8005522:	1b40      	subs	r0, r0, r5
 8005524:	2802      	cmp	r0, #2
 8005526:	f200 8092 	bhi.w	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	d4f6      	bmi.n	800551e <HAL_RCC_OscConfig+0x1a6>
      }
    }
  }
  }

  return HAL_OK;
 8005530:	2000      	movs	r0, #0
}
 8005532:	b002      	add	sp, #8
 8005534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005538:	4a4c      	ldr	r2, [pc, #304]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 800553a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800553c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d045      	beq.n	80055d2 <HAL_RCC_OscConfig+0x25a>
 8005546:	2b04      	cmp	r3, #4
 8005548:	d047      	beq.n	80055da <HAL_RCC_OscConfig+0x262>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800554a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800554c:	4d47      	ldr	r5, [pc, #284]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8083 	beq.w	800565a <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_HSI_ENABLE();
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800555c:	f7fe fa8e 	bl	8003a7c <HAL_GetTick>
 8005560:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005562:	e004      	b.n	800556e <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005564:	f7fe fa8a 	bl	8003a7c <HAL_GetTick>
 8005568:	1b80      	subs	r0, r0, r6
 800556a:	2802      	cmp	r0, #2
 800556c:	d86f      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	0558      	lsls	r0, r3, #21
 8005572:	d5f7      	bpl.n	8005564 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005574:	686b      	ldr	r3, [r5, #4]
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800557c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005580:	606b      	str	r3, [r5, #4]
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	e733      	b.n	80053ee <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005586:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800558a:	2903      	cmp	r1, #3
 800558c:	f47f af09 	bne.w	80053a2 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005590:	4a36      	ldr	r2, [pc, #216]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	0392      	lsls	r2, r2, #14
 8005596:	f57f af27 	bpl.w	80053e8 <HAL_RCC_OscConfig+0x70>
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	2a00      	cmp	r2, #0
 800559e:	f47f af23 	bne.w	80053e8 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80055a2:	2001      	movs	r0, #1
}
 80055a4:	b002      	add	sp, #8
 80055a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80055aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80055b6:	f7fe fa61 	bl	8003a7c <HAL_GetTick>
 80055ba:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055bc:	e004      	b.n	80055c8 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055be:	f7fe fa5d 	bl	8003a7c <HAL_GetTick>
 80055c2:	1b80      	subs	r0, r0, r6
 80055c4:	2802      	cmp	r0, #2
 80055c6:	d842      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80055cc:	0798      	lsls	r0, r3, #30
 80055ce:	d4f6      	bmi.n	80055be <HAL_RCC_OscConfig+0x246>
 80055d0:	e728      	b.n	8005424 <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80055d6:	2a02      	cmp	r2, #2
 80055d8:	d1b7      	bne.n	800554a <HAL_RCC_OscConfig+0x1d2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	055d      	lsls	r5, r3, #21
 80055e0:	d502      	bpl.n	80055e8 <HAL_RCC_OscConfig+0x270>
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0dc      	beq.n	80055a2 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 80055ea:	6920      	ldr	r0, [r4, #16]
 80055ec:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055ee:	4921      	ldr	r1, [pc, #132]	; (8005674 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80055f8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055fa:	6808      	ldr	r0, [r1, #0]
 80055fc:	f7fe f9fa 	bl	80039f4 <HAL_InitTick>
 8005600:	2800      	cmp	r0, #0
 8005602:	d1ce      	bne.n	80055a2 <HAL_RCC_OscConfig+0x22a>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	e6f2      	b.n	80053ee <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005608:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005610:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005612:	f7fe fa33 	bl	8003a7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005616:	4d15      	ldr	r5, [pc, #84]	; (800566c <HAL_RCC_OscConfig+0x2f4>)
        tickstart = HAL_GetTick();
 8005618:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561a:	e004      	b.n	8005626 <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800561c:	f7fe fa2e 	bl	8003a7c <HAL_GetTick>
 8005620:	1b80      	subs	r0, r0, r6
 8005622:	2864      	cmp	r0, #100	; 0x64
 8005624:	d813      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	039b      	lsls	r3, r3, #14
 800562a:	d5f7      	bpl.n	800561c <HAL_RCC_OscConfig+0x2a4>
 800562c:	e6db      	b.n	80053e6 <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800562e:	682a      	ldr	r2, [r5, #0]
 8005630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005634:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8005636:	f7fe fa21 	bl	8003a7c <HAL_GetTick>
 800563a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	05d8      	lsls	r0, r3, #23
 8005640:	f53f af07 	bmi.w	8005452 <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fe fa1a 	bl	8003a7c <HAL_GetTick>
 8005648:	1bc0      	subs	r0, r0, r7
 800564a:	2802      	cmp	r0, #2
 800564c:	d9f6      	bls.n	800563c <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 800564e:	2003      	movs	r0, #3
}
 8005650:	b002      	add	sp, #8
 8005652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005656:	2001      	movs	r0, #1
}
 8005658:	4770      	bx	lr
        __HAL_RCC_HSI_DISABLE();
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005660:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005662:	f7fe fa0b 	bl	8003a7c <HAL_GetTick>
 8005666:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005668:	e00b      	b.n	8005682 <HAL_RCC_OscConfig+0x30a>
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	40007000 	.word	0x40007000
 8005674:	20000620 	.word	0x20000620
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005678:	f7fe fa00 	bl	8003a7c <HAL_GetTick>
 800567c:	1b80      	subs	r0, r0, r6
 800567e:	2802      	cmp	r0, #2
 8005680:	d8e5      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005682:	682b      	ldr	r3, [r5, #0]
 8005684:	0559      	lsls	r1, r3, #21
 8005686:	d4f7      	bmi.n	8005678 <HAL_RCC_OscConfig+0x300>
 8005688:	e7bc      	b.n	8005604 <HAL_RCC_OscConfig+0x28c>
    FlagStatus       pwrclkchanged = RESET;
 800568a:	2600      	movs	r6, #0
 800568c:	e6dc      	b.n	8005448 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568e:	4a61      	ldr	r2, [pc, #388]	; (8005814 <HAL_RCC_OscConfig+0x49c>)
 8005690:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800569c:	f7fe f9ee 	bl	8003a7c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a0:	4d5c      	ldr	r5, [pc, #368]	; (8005814 <HAL_RCC_OscConfig+0x49c>)
      tickstart = HAL_GetTick();
 80056a2:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a8:	e005      	b.n	80056b6 <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fe f9e7 	bl	8003a7c <HAL_GetTick>
 80056ae:	eba0 0008 	sub.w	r0, r0, r8
 80056b2:	42b8      	cmp	r0, r7
 80056b4:	d8cb      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80056ba:	0799      	lsls	r1, r3, #30
 80056bc:	d5f5      	bpl.n	80056aa <HAL_RCC_OscConfig+0x332>
    if (pwrclkchanged == SET)
 80056be:	2e00      	cmp	r6, #0
 80056c0:	f43f aef2 	beq.w	80054a8 <HAL_RCC_OscConfig+0x130>
 80056c4:	e013      	b.n	80056ee <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_HSI48_DISABLE();
 80056c6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80056d2:	f7fe f9d3 	bl	8003a7c <HAL_GetTick>
 80056d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056d8:	e004      	b.n	80056e4 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056da:	f7fe f9cf 	bl	8003a7c <HAL_GetTick>
 80056de:	1b80      	subs	r0, r0, r6
 80056e0:	2802      	cmp	r0, #2
 80056e2:	d8b4      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80056e8:	0798      	lsls	r0, r3, #30
 80056ea:	d4f6      	bmi.n	80056da <HAL_RCC_OscConfig+0x362>
 80056ec:	e6f8      	b.n	80054e0 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ee:	4a49      	ldr	r2, [pc, #292]	; (8005814 <HAL_RCC_OscConfig+0x49c>)
 80056f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f6:	6593      	str	r3, [r2, #88]	; 0x58
 80056f8:	e6d6      	b.n	80054a8 <HAL_RCC_OscConfig+0x130>
        tickstart = HAL_GetTick();
 80056fa:	f7fe f9bf 	bl	8003a7c <HAL_GetTick>
 80056fe:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005700:	e004      	b.n	800570c <HAL_RCC_OscConfig+0x394>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005702:	f7fe f9bb 	bl	8003a7c <HAL_GetTick>
 8005706:	1b80      	subs	r0, r0, r6
 8005708:	2802      	cmp	r0, #2
 800570a:	d8a0      	bhi.n	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	0199      	lsls	r1, r3, #6
 8005710:	d4f7      	bmi.n	8005702 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005712:	68e9      	ldr	r1, [r5, #12]
 8005714:	4b40      	ldr	r3, [pc, #256]	; (8005818 <HAL_RCC_OscConfig+0x4a0>)
 8005716:	6a22      	ldr	r2, [r4, #32]
 8005718:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800571a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800571c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800571e:	400b      	ands	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005726:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800572a:	3801      	subs	r0, #1
 800572c:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8005730:	0849      	lsrs	r1, r1, #1
 8005732:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005736:	3901      	subs	r1, #1
 8005738:	0852      	lsrs	r2, r2, #1
 800573a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800573e:	3a01      	subs	r2, #1
 8005740:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005744:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005746:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005748:	4c32      	ldr	r4, [pc, #200]	; (8005814 <HAL_RCC_OscConfig+0x49c>)
        __HAL_RCC_PLL_ENABLE();
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005750:	68eb      	ldr	r3, [r5, #12]
 8005752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005756:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005758:	f7fe f990 	bl	8003a7c <HAL_GetTick>
 800575c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575e:	e005      	b.n	800576c <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005760:	f7fe f98c 	bl	8003a7c <HAL_GetTick>
 8005764:	1b40      	subs	r0, r0, r5
 8005766:	2802      	cmp	r0, #2
 8005768:	f63f af71 	bhi.w	800564e <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	019a      	lsls	r2, r3, #6
 8005770:	d5f6      	bpl.n	8005760 <HAL_RCC_OscConfig+0x3e8>
 8005772:	e6dd      	b.n	8005530 <HAL_RCC_OscConfig+0x1b8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005774:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005778:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e741      	b.n	8005612 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578e:	2801      	cmp	r0, #1
 8005790:	f43f af08 	beq.w	80055a4 <HAL_RCC_OscConfig+0x22c>
      temp_pllckcfg = RCC->PLLCFGR;
 8005794:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005796:	6a22      	ldr	r2, [r4, #32]
 8005798:	f003 0103 	and.w	r1, r3, #3
 800579c:	4291      	cmp	r1, r2
 800579e:	f47f af00 	bne.w	80055a2 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057a8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80057ae:	f47f aef8 	bne.w	80055a2 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80057b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057b8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80057bc:	f47f aef1 	bne.w	80055a2 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80057c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057c6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80057ca:	f47f aeea 	bne.w	80055a2 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057d0:	0852      	lsrs	r2, r2, #1
 80057d2:	3a01      	subs	r2, #1
 80057d4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057d8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80057dc:	f47f aee1 	bne.w	80055a2 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80057e2:	0852      	lsrs	r2, r2, #1
 80057e4:	3a01      	subs	r2, #1
 80057e6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ea:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80057ee:	bf14      	ite	ne
 80057f0:	2001      	movne	r0, #1
 80057f2:	2000      	moveq	r0, #0
 80057f4:	e6d6      	b.n	80055a4 <HAL_RCC_OscConfig+0x22c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f6:	4b07      	ldr	r3, [pc, #28]	; (8005814 <HAL_RCC_OscConfig+0x49c>)
 80057f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057fc:	f042 0204 	orr.w	r2, r2, #4
 8005800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005804:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005810:	e744      	b.n	800569c <HAL_RCC_OscConfig+0x324>
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	019f800c 	.word	0x019f800c

0800581c <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800581c:	2800      	cmp	r0, #0
 800581e:	f000 8105 	beq.w	8005a2c <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005822:	4aad      	ldr	r2, [pc, #692]	; (8005ad8 <HAL_RCC_ClockConfig+0x2bc>)
{
 8005824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005828:	6813      	ldr	r3, [r2, #0]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	428b      	cmp	r3, r1
 8005830:	d20c      	bcs.n	800584c <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	f023 030f 	bic.w	r3, r3, #15
 8005838:	430b      	orrs	r3, r1
 800583a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	428b      	cmp	r3, r1
 8005844:	d002      	beq.n	800584c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8005846:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 8005848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584c:	6803      	ldr	r3, [r0, #0]
 800584e:	07df      	lsls	r7, r3, #31
 8005850:	4604      	mov	r4, r0
 8005852:	460d      	mov	r5, r1
 8005854:	f140 8088 	bpl.w	8005968 <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005858:	6842      	ldr	r2, [r0, #4]
 800585a:	2a03      	cmp	r2, #3
 800585c:	f000 80ad 	beq.w	80059ba <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005860:	4b9e      	ldr	r3, [pc, #632]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005862:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005864:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	f000 80ff 	beq.w	8005a68 <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800586a:	055b      	lsls	r3, r3, #21
 800586c:	d5eb      	bpl.n	8005846 <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800586e:	4b9b      	ldr	r3, [pc, #620]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005870:	6899      	ldr	r1, [r3, #8]
 8005872:	f001 010c 	and.w	r1, r1, #12
 8005876:	2904      	cmp	r1, #4
 8005878:	d00a      	beq.n	8005890 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	f001 010c 	and.w	r1, r1, #12
 8005880:	2908      	cmp	r1, #8
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005884:	6899      	ldr	r1, [r3, #8]
 8005886:	f001 010c 	and.w	r1, r1, #12
 800588a:	290c      	cmp	r1, #12
 800588c:	f000 80fb 	beq.w	8005a86 <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005890:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005894:	4e91      	ldr	r6, [pc, #580]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005896:	68b3      	ldr	r3, [r6, #8]
 8005898:	f023 0303 	bic.w	r3, r3, #3
 800589c:	431a      	orrs	r2, r3
 800589e:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80058a0:	f7fe f8ec 	bl	8003a7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80058a8:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	e005      	b.n	80058b8 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ac:	f7fe f8e6 	bl	8003a7c <HAL_GetTick>
 80058b0:	eba0 0009 	sub.w	r0, r0, r9
 80058b4:	42b8      	cmp	r0, r7
 80058b6:	d874      	bhi.n	80059a2 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b8:	68b3      	ldr	r3, [r6, #8]
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80058c4:	d1f2      	bne.n	80058ac <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	079f      	lsls	r7, r3, #30
 80058ca:	f140 80d3 	bpl.w	8005a74 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ce:	0758      	lsls	r0, r3, #29
 80058d0:	d504      	bpl.n	80058dc <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d2:	4982      	ldr	r1, [pc, #520]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 80058d4:	688a      	ldr	r2, [r1, #8]
 80058d6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80058da:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058dc:	0719      	lsls	r1, r3, #28
 80058de:	d506      	bpl.n	80058ee <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058e0:	4a7e      	ldr	r2, [pc, #504]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 80058e2:	6893      	ldr	r3, [r2, #8]
 80058e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058ec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ee:	4a7b      	ldr	r2, [pc, #492]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 80058f0:	68a1      	ldr	r1, [r4, #8]
 80058f2:	6893      	ldr	r3, [r2, #8]
 80058f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058fc:	4e76      	ldr	r6, [pc, #472]	; (8005ad8 <HAL_RCC_ClockConfig+0x2bc>)
 80058fe:	6832      	ldr	r2, [r6, #0]
 8005900:	f002 020f 	and.w	r2, r2, #15
 8005904:	42aa      	cmp	r2, r5
 8005906:	d837      	bhi.n	8005978 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	075a      	lsls	r2, r3, #29
 800590c:	d506      	bpl.n	800591c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800590e:	4973      	ldr	r1, [pc, #460]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005910:	68e0      	ldr	r0, [r4, #12]
 8005912:	688a      	ldr	r2, [r1, #8]
 8005914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005918:	4302      	orrs	r2, r0
 800591a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	071b      	lsls	r3, r3, #28
 800591e:	d443      	bmi.n	80059a8 <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005920:	4a6e      	ldr	r2, [pc, #440]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005922:	6893      	ldr	r3, [r2, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b04      	cmp	r3, #4
 800592a:	f000 80d3 	beq.w	8005ad4 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800592e:	6893      	ldr	r3, [r2, #8]
 8005930:	f003 030c 	and.w	r3, r3, #12
 8005934:	2b08      	cmp	r3, #8
 8005936:	f000 809b 	beq.w	8005a70 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800593a:	6893      	ldr	r3, [r2, #8]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b0c      	cmp	r3, #12
 8005942:	d075      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005944:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005946:	4a65      	ldr	r2, [pc, #404]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005948:	4c65      	ldr	r4, [pc, #404]	; (8005ae0 <HAL_RCC_ClockConfig+0x2c4>)
 800594a:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 800594c:	4865      	ldr	r0, [pc, #404]	; (8005ae4 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800594e:	4966      	ldr	r1, [pc, #408]	; (8005ae8 <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8005950:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005952:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005956:	5ca2      	ldrb	r2, [r4, r2]
 8005958:	f002 021f 	and.w	r2, r2, #31
 800595c:	40d3      	lsrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]
}
 8005960:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005964:	f7fe b846 	b.w	80039f4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005968:	079e      	lsls	r6, r3, #30
 800596a:	d4b0      	bmi.n	80058ce <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800596c:	4e5a      	ldr	r6, [pc, #360]	; (8005ad8 <HAL_RCC_ClockConfig+0x2bc>)
 800596e:	6832      	ldr	r2, [r6, #0]
 8005970:	f002 020f 	and.w	r2, r2, #15
 8005974:	42aa      	cmp	r2, r5
 8005976:	d9c7      	bls.n	8005908 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005978:	6832      	ldr	r2, [r6, #0]
 800597a:	f022 020f 	bic.w	r2, r2, #15
 800597e:	432a      	orrs	r2, r5
 8005980:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8005982:	f7fe f87b 	bl	8003a7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005986:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800598a:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598c:	6833      	ldr	r3, [r6, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	42ab      	cmp	r3, r5
 8005994:	d0b8      	beq.n	8005908 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005996:	f7fe f871 	bl	8003a7c <HAL_GetTick>
 800599a:	eba0 0008 	sub.w	r0, r0, r8
 800599e:	42b8      	cmp	r0, r7
 80059a0:	d9f4      	bls.n	800598c <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 80059a2:	2003      	movs	r0, #3
}
 80059a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059a8:	4a4c      	ldr	r2, [pc, #304]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 80059aa:	6921      	ldr	r1, [r4, #16]
 80059ac:	6893      	ldr	r3, [r2, #8]
 80059ae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80059b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80059b6:	6093      	str	r3, [r2, #8]
 80059b8:	e7b2      	b.n	8005920 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ba:	4948      	ldr	r1, [pc, #288]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 80059bc:	6808      	ldr	r0, [r1, #0]
 80059be:	0180      	lsls	r0, r0, #6
 80059c0:	f57f af41 	bpl.w	8005846 <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059c4:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059c6:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 80059c8:	4f48      	ldr	r7, [pc, #288]	; (8005aec <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059ca:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 80059ce:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d0:	68ce      	ldr	r6, [r1, #12]
 80059d2:	bf0c      	ite	eq
 80059d4:	4946      	ldreq	r1, [pc, #280]	; (8005af0 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d6:	4947      	ldrne	r1, [pc, #284]	; (8005af4 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059d8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80059dc:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059de:	fbb1 f1f0 	udiv	r1, r1, r0
 80059e2:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059e6:	4e3d      	ldr	r6, [pc, #244]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059e8:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059ec:	68f0      	ldr	r0, [r6, #12]
 80059ee:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80059f2:	3001      	adds	r0, #1
 80059f4:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80059f6:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80059fa:	42b9      	cmp	r1, r7
 80059fc:	f67f af48 	bls.w	8005890 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a00:	68b1      	ldr	r1, [r6, #8]
 8005a02:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005a06:	d007      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x1fc>
 8005a08:	f013 0802 	ands.w	r8, r3, #2
 8005a0c:	f43f af42 	beq.w	8005894 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a10:	68a3      	ldr	r3, [r4, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f47f af3c 	bne.w	8005890 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a18:	4930      	ldr	r1, [pc, #192]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005a1a:	688b      	ldr	r3, [r1, #8]
 8005a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a26:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005a2a:	e733      	b.n	8005894 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 8005a2c:	2001      	movs	r0, #1
}
 8005a2e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a30:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a32:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a34:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a36:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 8005a3e:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a40:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a44:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a48:	bf0c      	ite	eq
 8005a4a:	4b29      	ldreq	r3, [pc, #164]	; (8005af0 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a4c:	4b29      	ldrne	r3, [pc, #164]	; (8005af4 <HAL_RCC_ClockConfig+0x2d8>)
 8005a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a52:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
 8005a58:	68d2      	ldr	r2, [r2, #12]
 8005a5a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8005a5e:	3201      	adds	r2, #1
 8005a60:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8005a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a66:	e76e      	b.n	8005946 <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a68:	0399      	lsls	r1, r3, #14
 8005a6a:	f53f af00 	bmi.w	800586e <HAL_RCC_ClockConfig+0x52>
 8005a6e:	e6ea      	b.n	8005846 <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8005a70:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <HAL_RCC_ClockConfig+0x2d4>)
 8005a72:	e768      	b.n	8005946 <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8005a74:	f1b8 0f00 	cmp.w	r8, #0
 8005a78:	f43f af40 	beq.w	80058fc <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a7c:	68b3      	ldr	r3, [r6, #8]
 8005a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a82:	60b3      	str	r3, [r6, #8]
 8005a84:	e73a      	b.n	80058fc <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a86:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a88:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 8005a8a:	4e18      	ldr	r6, [pc, #96]	; (8005aec <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a8c:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8005a90:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a92:	68d8      	ldr	r0, [r3, #12]
 8005a94:	bf0c      	ite	eq
 8005a96:	4b16      	ldreq	r3, [pc, #88]	; (8005af0 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a98:	4b16      	ldrne	r3, [pc, #88]	; (8005af4 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a9a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8005a9e:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa4:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aa8:	480c      	ldr	r0, [pc, #48]	; (8005adc <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aaa:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aae:	68c1      	ldr	r1, [r0, #12]
 8005ab0:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005ab4:	3101      	adds	r1, #1
 8005ab6:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 8005ab8:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8005abc:	42b3      	cmp	r3, r6
 8005abe:	f67f aee7 	bls.w	8005890 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ac2:	6883      	ldr	r3, [r0, #8]
 8005ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ace:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005ad2:	e6df      	b.n	8005894 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <HAL_RCC_ClockConfig+0x2d8>)
 8005ad6:	e736      	b.n	8005946 <HAL_RCC_ClockConfig+0x12a>
 8005ad8:	40022000 	.word	0x40022000
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	08009c40 	.word	0x08009c40
 8005ae4:	20000620 	.word	0x20000620
 8005ae8:	20000618 	.word	0x20000618
 8005aec:	04c4b400 	.word	0x04c4b400
 8005af0:	007a1200 	.word	0x007a1200
 8005af4:	00f42400 	.word	0x00f42400

08005af8 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005af8:	4b18      	ldr	r3, [pc, #96]	; (8005b5c <HAL_RCC_GetSysClockFreq+0x64>)
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	f002 020c 	and.w	r2, r2, #12
 8005b00:	2a04      	cmp	r2, #4
 8005b02:	d027      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	f002 020c 	and.w	r2, r2, #12
 8005b0a:	2a08      	cmp	r2, #8
 8005b0c:	d024      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	f002 020c 	and.w	r2, r2, #12
 8005b14:	2a0c      	cmp	r2, #12
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 8005b18:	2000      	movs	r0, #0
}
 8005b1a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b1c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b1e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b20:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b26:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8005b2a:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b2c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b30:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b34:	bf0c      	ite	eq
 8005b36:	480a      	ldreq	r0, [pc, #40]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b38:	480a      	ldrne	r0, [pc, #40]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005b3a:	fbb0 f0f2 	udiv	r0, r0, r2
 8005b3e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <HAL_RCC_GetSysClockFreq+0x64>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b52:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005b54:	4803      	ldr	r0, [pc, #12]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005b56:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005b58:	4801      	ldr	r0, [pc, #4]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x68>)
 8005b5a:	4770      	bx	lr
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	007a1200 	.word	0x007a1200
 8005b64:	00f42400 	.word	0x00f42400

08005b68 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005b68:	4b01      	ldr	r3, [pc, #4]	; (8005b70 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000618 	.word	0x20000618

08005b74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005b76:	4a06      	ldr	r2, [pc, #24]	; (8005b90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005b78:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005b7a:	4906      	ldr	r1, [pc, #24]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b7c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005b80:	6808      	ldr	r0, [r1, #0]
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	f003 031f 	and.w	r3, r3, #31
}
 8005b88:	40d8      	lsrs	r0, r3
 8005b8a:	4770      	bx	lr
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	08009c50 	.word	0x08009c50
 8005b94:	20000618 	.word	0x20000618

08005b98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005b9a:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ba0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005ba4:	6808      	ldr	r0, [r1, #0]
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	f003 031f 	and.w	r3, r3, #31
}
 8005bac:	40d8      	lsrs	r0, r3
 8005bae:	4770      	bx	lr
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	08009c50 	.word	0x08009c50
 8005bb8:	20000618 	.word	0x20000618

08005bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc0:	6803      	ldr	r3, [r0, #0]
{
 8005bc2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005bc8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bca:	d057      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bcc:	4b9f      	ldr	r3, [pc, #636]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005bce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bd0:	00d0      	lsls	r0, r2, #3
 8005bd2:	f140 810d 	bpl.w	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    FlagStatus       pwrclkchanged = RESET;
 8005bd6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd8:	4d9d      	ldr	r5, [pc, #628]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be2:	f7fd ff4b 	bl	8003a7c <HAL_GetTick>
 8005be6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be8:	e005      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bea:	f7fd ff47 	bl	8003a7c <HAL_GetTick>
 8005bee:	1b80      	subs	r0, r0, r6
 8005bf0:	2802      	cmp	r0, #2
 8005bf2:	f200 810f 	bhi.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x258>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	05d9      	lsls	r1, r3, #23
 8005bfa:	d5f6      	bpl.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bfc:	4b93      	ldr	r3, [pc, #588]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005bfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005c00:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c04:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8005c08:	d028      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005c0a:	428a      	cmp	r2, r1
 8005c0c:	d026      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c0e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005c16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005c22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c2a:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c2e:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 8005c30:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c34:	d512      	bpl.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c36:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8005c38:	f7fd ff20 	bl	8003a7c <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005c40:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c42:	e006      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c44:	f7fd ff1a 	bl	8003a7c <HAL_GetTick>
 8005c48:	eba0 0008 	sub.w	r0, r0, r8
 8005c4c:	42b0      	cmp	r0, r6
 8005c4e:	f200 80e1 	bhi.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c52:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005c56:	079b      	lsls	r3, r3, #30
 8005c58:	d5f4      	bpl.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005c5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c5c:	4a7b      	ldr	r2, [pc, #492]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	430b      	orrs	r3, r1
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c6c:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c6e:	b127      	cbz	r7, 8005c7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c70:	4a76      	ldr	r2, [pc, #472]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6593      	str	r3, [r2, #88]	; 0x58
 8005c7a:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c7c:	07de      	lsls	r6, r3, #31
 8005c7e:	d508      	bpl.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c80:	4972      	ldr	r1, [pc, #456]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c82:	6865      	ldr	r5, [r4, #4]
 8005c84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005c88:	f022 0203 	bic.w	r2, r2, #3
 8005c8c:	432a      	orrs	r2, r5
 8005c8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c92:	079d      	lsls	r5, r3, #30
 8005c94:	d508      	bpl.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c96:	496d      	ldr	r1, [pc, #436]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c98:	68a5      	ldr	r5, [r4, #8]
 8005c9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005c9e:	f022 020c 	bic.w	r2, r2, #12
 8005ca2:	432a      	orrs	r2, r5
 8005ca4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ca8:	0759      	lsls	r1, r3, #29
 8005caa:	d508      	bpl.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cac:	4967      	ldr	r1, [pc, #412]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cae:	68e5      	ldr	r5, [r4, #12]
 8005cb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cb4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005cb8:	432a      	orrs	r2, r5
 8005cba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cbe:	071a      	lsls	r2, r3, #28
 8005cc0:	d508      	bpl.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cc2:	4962      	ldr	r1, [pc, #392]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cc4:	6925      	ldr	r5, [r4, #16]
 8005cc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cce:	432a      	orrs	r2, r5
 8005cd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cd4:	069f      	lsls	r7, r3, #26
 8005cd6:	d508      	bpl.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cd8:	495c      	ldr	r1, [pc, #368]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cda:	6965      	ldr	r5, [r4, #20]
 8005cdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ce0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ce4:	432a      	orrs	r2, r5
 8005ce6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cea:	065e      	lsls	r6, r3, #25
 8005cec:	d508      	bpl.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cee:	4957      	ldr	r1, [pc, #348]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cf0:	69a5      	ldr	r5, [r4, #24]
 8005cf2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cf6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005cfa:	432a      	orrs	r2, r5
 8005cfc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d00:	061d      	lsls	r5, r3, #24
 8005d02:	d508      	bpl.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d04:	4951      	ldr	r1, [pc, #324]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d06:	69e5      	ldr	r5, [r4, #28]
 8005d08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d0c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d10:	432a      	orrs	r2, r5
 8005d12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d16:	05d9      	lsls	r1, r3, #23
 8005d18:	d508      	bpl.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d1a:	494c      	ldr	r1, [pc, #304]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d1c:	6a25      	ldr	r5, [r4, #32]
 8005d1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d22:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005d26:	432a      	orrs	r2, r5
 8005d28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d2c:	059a      	lsls	r2, r3, #22
 8005d2e:	d508      	bpl.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d30:	4946      	ldr	r1, [pc, #280]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d32:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d38:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005d3c:	432a      	orrs	r2, r5
 8005d3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d42:	055f      	lsls	r7, r3, #21
 8005d44:	d50b      	bpl.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d46:	4941      	ldr	r1, [pc, #260]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d48:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005d4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d4e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d52:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d54:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d5c:	d05c      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d5e:	051e      	lsls	r6, r3, #20
 8005d60:	d50b      	bpl.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d62:	493a      	ldr	r1, [pc, #232]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d64:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005d66:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d6a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005d6e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d70:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d78:	d053      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x266>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d7a:	04dd      	lsls	r5, r3, #19
 8005d7c:	d50b      	bpl.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d7e:	4933      	ldr	r1, [pc, #204]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d80:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005d82:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d86:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d8a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d8c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d94:	d04a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x270>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d96:	0499      	lsls	r1, r3, #18
 8005d98:	d50b      	bpl.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d9a:	492c      	ldr	r1, [pc, #176]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d9c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005d9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005da2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005da6:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005da8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005db0:	d041      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005db2:	045a      	lsls	r2, r3, #17
 8005db4:	d50b      	bpl.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005db6:	4925      	ldr	r1, [pc, #148]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005db8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005dba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dbe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dc2:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dc4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dc8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dcc:	d038      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	d50b      	bpl.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005dd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005dda:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005dde:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005de0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005de8:	d00d      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  }

#endif /* QUADSPI */

  return status;
}
 8005dea:	b002      	add	sp, #8
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005df6:	659a      	str	r2, [r3, #88]	; 0x58
 8005df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e02:	2701      	movs	r7, #1
 8005e04:	e6e8      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e06:	68d3      	ldr	r3, [r2, #12]
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0c:	60d3      	str	r3, [r2, #12]
}
 8005e0e:	b002      	add	sp, #8
 8005e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 8005e14:	2003      	movs	r0, #3
 8005e16:	e72a      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e18:	68ca      	ldr	r2, [r1, #12]
 8005e1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e1e:	60ca      	str	r2, [r1, #12]
 8005e20:	e79d      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e22:	68ca      	ldr	r2, [r1, #12]
 8005e24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e28:	60ca      	str	r2, [r1, #12]
 8005e2a:	e7a6      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e2c:	68ca      	ldr	r2, [r1, #12]
 8005e2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e32:	60ca      	str	r2, [r1, #12]
 8005e34:	e7af      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e36:	68ca      	ldr	r2, [r1, #12]
 8005e38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e3c:	60ca      	str	r2, [r1, #12]
 8005e3e:	e7b8      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e40:	68ca      	ldr	r2, [r1, #12]
 8005e42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e46:	60ca      	str	r2, [r1, #12]
 8005e48:	e7c1      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005e4a:	bf00      	nop
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	40007000 	.word	0x40007000

08005e54 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f000 8082 	beq.w	8005f5e <HAL_TIM_Base_Init+0x10a>
{
 8005e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e60:	4604      	mov	r4, r0
 8005e62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e66:	b363      	cbz	r3, 8005ec2 <HAL_TIM_Base_Init+0x6e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e6a:	4e46      	ldr	r6, [pc, #280]	; (8005f84 <HAL_TIM_Base_Init+0x130>)
 8005e6c:	69a5      	ldr	r5, [r4, #24]
 8005e6e:	68e0      	ldr	r0, [r4, #12]
 8005e70:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e72:	2302      	movs	r3, #2
 8005e74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e78:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005e7a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	d071      	beq.n	8005f62 <HAL_TIM_Base_Init+0x10e>
 8005e7e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005e82:	d052      	beq.n	8005f2a <HAL_TIM_Base_Init+0xd6>
 8005e84:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005e88:	42b2      	cmp	r2, r6
 8005e8a:	d01f      	beq.n	8005ecc <HAL_TIM_Base_Init+0x78>
 8005e8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e90:	42b2      	cmp	r2, r6
 8005e92:	d01b      	beq.n	8005ecc <HAL_TIM_Base_Init+0x78>
 8005e94:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8005e98:	42b2      	cmp	r2, r6
 8005e9a:	d017      	beq.n	8005ecc <HAL_TIM_Base_Init+0x78>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005ea0:	42b2      	cmp	r2, r6
 8005ea2:	d06d      	beq.n	8005f80 <HAL_TIM_Base_Init+0x12c>
 8005ea4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ea8:	42b2      	cmp	r2, r6
 8005eaa:	d069      	beq.n	8005f80 <HAL_TIM_Base_Init+0x12c>
 8005eac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005eb0:	42b2      	cmp	r2, r6
 8005eb2:	d065      	beq.n	8005f80 <HAL_TIM_Base_Init+0x12c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb8:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8005eba:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ebc:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ebe:	6291      	str	r1, [r2, #40]	; 0x28
 8005ec0:	e017      	b.n	8005ef2 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ec6:	f7fc ff15 	bl	8002cf4 <HAL_TIM_Base_MspInit>
 8005eca:	e7cd      	b.n	8005e68 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005ecc:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ece:	4f2e      	ldr	r7, [pc, #184]	; (8005f88 <HAL_TIM_Base_Init+0x134>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ed4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005edc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee4:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8005ee6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005eea:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eec:	d12b      	bne.n	8005f46 <HAL_TIM_Base_Init+0xf2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8005ef6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005f00:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005f04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005f08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005f18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f1c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005f20:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005f2a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f32:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f38:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005f40:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f42:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f44:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <HAL_TIM_Base_Init+0x138>)
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d0d0      	beq.n	8005eee <HAL_TIM_Base_Init+0x9a>
 8005f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d0cc      	beq.n	8005eee <HAL_TIM_Base_Init+0x9a>
 8005f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d1ca      	bne.n	8005ef2 <HAL_TIM_Base_Init+0x9e>
 8005f5c:	e7c7      	b.n	8005eee <HAL_TIM_Base_Init+0x9a>
    return HAL_ERROR;
 8005f5e:	2001      	movs	r0, #1
}
 8005f60:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005f62:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f64:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f6a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f70:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f76:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005f78:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f7c:	6291      	str	r1, [r2, #40]	; 0x28
 8005f7e:	e7b6      	b.n	8005eee <HAL_TIM_Base_Init+0x9a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f80:	6926      	ldr	r6, [r4, #16]
 8005f82:	e7f3      	b.n	8005f6c <HAL_TIM_Base_Init+0x118>
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40014000 	.word	0x40014000

08005f90 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005f90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 8005f98:	2001      	movs	r0, #1
 8005f9a:	4770      	bx	lr
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f9c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fa6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb0:	d017      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x52>
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d014      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x52>
 8005fb8:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <HAL_TIM_Base_Start_IT+0x6c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d011      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x52>
 8005fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00d      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x52>
 8005fc6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x52>
 8005fce:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d005      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005fde:	2000      	movs	r0, #0
 8005fe0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe2:	6899      	ldr	r1, [r3, #8]
 8005fe4:	4a06      	ldr	r2, [pc, #24]	; (8006000 <HAL_TIM_Base_Start_IT+0x70>)
 8005fe6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe8:	2a06      	cmp	r2, #6
 8005fea:	d002      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x62>
 8005fec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ff0:	d1f1      	bne.n	8005fd6 <HAL_TIM_Base_Start_IT+0x46>
  return HAL_OK;
 8005ff2:	2000      	movs	r0, #0
}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40000400 	.word	0x40000400
 8006000:	00010007 	.word	0x00010007

08006004 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006004:	6803      	ldr	r3, [r0, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	f241 1111 	movw	r1, #4369	; 0x1111
 8006014:	420a      	tst	r2, r1
 8006016:	d108      	bne.n	800602a <HAL_TIM_Base_Stop_IT+0x26>
 8006018:	6a19      	ldr	r1, [r3, #32]
 800601a:	f244 4244 	movw	r2, #17476	; 0x4444
 800601e:	4211      	tst	r1, r2
 8006020:	d103      	bne.n	800602a <HAL_TIM_Base_Stop_IT+0x26>
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800602a:	2301      	movs	r3, #1
 800602c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006030:	2000      	movs	r0, #0
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_PWM_MspInit>:
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop

08006038 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006038:	2800      	cmp	r0, #0
 800603a:	f000 8082 	beq.w	8006142 <HAL_TIM_PWM_Init+0x10a>
{
 800603e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006040:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006044:	4604      	mov	r4, r0
 8006046:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800604a:	b363      	cbz	r3, 80060a6 <HAL_TIM_PWM_Init+0x6e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800604e:	4e46      	ldr	r6, [pc, #280]	; (8006168 <HAL_TIM_PWM_Init+0x130>)
 8006050:	69a5      	ldr	r5, [r4, #24]
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8006056:	2302      	movs	r3, #2
 8006058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800605e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006060:	d071      	beq.n	8006146 <HAL_TIM_PWM_Init+0x10e>
 8006062:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006066:	d052      	beq.n	800610e <HAL_TIM_PWM_Init+0xd6>
 8006068:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800606c:	42b2      	cmp	r2, r6
 800606e:	d01f      	beq.n	80060b0 <HAL_TIM_PWM_Init+0x78>
 8006070:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006074:	42b2      	cmp	r2, r6
 8006076:	d01b      	beq.n	80060b0 <HAL_TIM_PWM_Init+0x78>
 8006078:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 800607c:	42b2      	cmp	r2, r6
 800607e:	d017      	beq.n	80060b0 <HAL_TIM_PWM_Init+0x78>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006080:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006084:	42b2      	cmp	r2, r6
 8006086:	d06d      	beq.n	8006164 <HAL_TIM_PWM_Init+0x12c>
 8006088:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800608c:	42b2      	cmp	r2, r6
 800608e:	d069      	beq.n	8006164 <HAL_TIM_PWM_Init+0x12c>
 8006090:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006094:	42b2      	cmp	r2, r6
 8006096:	d065      	beq.n	8006164 <HAL_TIM_PWM_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800609e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060a2:	6291      	str	r1, [r2, #40]	; 0x28
 80060a4:	e017      	b.n	80060d6 <HAL_TIM_PWM_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 80060a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80060aa:	f7ff ffc3 	bl	8006034 <HAL_TIM_PWM_MspInit>
 80060ae:	e7cd      	b.n	800604c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80060b0:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b2:	4f2e      	ldr	r7, [pc, #184]	; (800616c <HAL_TIM_PWM_Init+0x134>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80060b8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ba:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c6:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c8:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80060ca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060ce:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d0:	d12b      	bne.n	800612a <HAL_TIM_PWM_Init+0xf2>
    TIMx->RCR = Structure->RepetitionCounter;
 80060d2:	6963      	ldr	r3, [r4, #20]
 80060d4:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80060d6:	2301      	movs	r3, #1
 80060d8:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80060da:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060dc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80060e4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80060e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80060ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80060f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80060fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006100:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006104:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006108:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800610e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006110:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006116:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8006118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800611e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006122:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006124:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006126:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006128:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_TIM_PWM_Init+0x138>)
 800612c:	429a      	cmp	r2, r3
 800612e:	d0d0      	beq.n	80060d2 <HAL_TIM_PWM_Init+0x9a>
 8006130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006134:	429a      	cmp	r2, r3
 8006136:	d0cc      	beq.n	80060d2 <HAL_TIM_PWM_Init+0x9a>
 8006138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613c:	429a      	cmp	r2, r3
 800613e:	d1ca      	bne.n	80060d6 <HAL_TIM_PWM_Init+0x9e>
 8006140:	e7c7      	b.n	80060d2 <HAL_TIM_PWM_Init+0x9a>
    return HAL_ERROR;
 8006142:	2001      	movs	r0, #1
}
 8006144:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006146:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006148:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800614e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8006150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006154:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800615c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800615e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006160:	6291      	str	r1, [r2, #40]	; 0x28
 8006162:	e7b6      	b.n	80060d2 <HAL_TIM_PWM_Init+0x9a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006164:	6926      	ldr	r6, [r4, #16]
 8006166:	e7f3      	b.n	8006150 <HAL_TIM_PWM_Init+0x118>
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40014000 	.word	0x40014000

08006174 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006174:	2800      	cmp	r0, #0
 8006176:	f000 80b4 	beq.w	80062e2 <HAL_TIM_Encoder_Init+0x16e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800617a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800617e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006182:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006186:	4604      	mov	r4, r0
 8006188:	460d      	mov	r5, r1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d038      	beq.n	8006200 <HAL_TIM_Encoder_Init+0x8c>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800618e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	4e5e      	ldr	r6, [pc, #376]	; (800630c <HAL_TIM_Encoder_Init+0x198>)
 8006192:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006196:	68e0      	ldr	r0, [r4, #12]
 8006198:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800619a:	2202      	movs	r2, #2
 800619c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 80061a6:	f022 0207 	bic.w	r2, r2, #7
 80061aa:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ac:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80061ae:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	f000 8099 	beq.w	80062e6 <HAL_TIM_Encoder_Init+0x172>
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d078      	beq.n	80062ac <HAL_TIM_Encoder_Init+0x138>
 80061ba:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80061be:	42b3      	cmp	r3, r6
 80061c0:	d023      	beq.n	800620a <HAL_TIM_Encoder_Init+0x96>
 80061c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061c6:	42b3      	cmp	r3, r6
 80061c8:	d01f      	beq.n	800620a <HAL_TIM_Encoder_Init+0x96>
 80061ca:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80061ce:	42b3      	cmp	r3, r6
 80061d0:	d01b      	beq.n	800620a <HAL_TIM_Encoder_Init+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80061d6:	42b3      	cmp	r3, r6
 80061d8:	f000 8095 	beq.w	8006306 <HAL_TIM_Encoder_Init+0x192>
 80061dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061e0:	42b3      	cmp	r3, r6
 80061e2:	f000 8090 	beq.w	8006306 <HAL_TIM_Encoder_Init+0x192>
 80061e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061ea:	42b3      	cmp	r3, r6
 80061ec:	f000 808b 	beq.w	8006306 <HAL_TIM_Encoder_Init+0x192>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061f4:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 80061f8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061fa:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061fc:	6299      	str	r1, [r3, #40]	; 0x28
 80061fe:	e018      	b.n	8006232 <HAL_TIM_Encoder_Init+0xbe>
    htim->Lock = HAL_UNLOCKED;
 8006200:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006204:	f7fc fdc4 	bl	8002d90 <HAL_TIM_Encoder_MspInit>
 8006208:	e7c1      	b.n	800618e <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 |= Structure->CounterMode;
 800620a:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800620c:	4f40      	ldr	r7, [pc, #256]	; (8006310 <HAL_TIM_Encoder_Init+0x19c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800620e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006212:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006214:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006216:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800621a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006220:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006224:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8006226:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800622a:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800622c:	d14d      	bne.n	80062ca <HAL_TIM_Encoder_Init+0x156>
    TIMx->RCR = Structure->RepetitionCounter;
 800622e:	6962      	ldr	r2, [r4, #20]
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006232:	2601      	movs	r6, #1
 8006234:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8006236:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800623a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800623c:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800623e:	69af      	ldr	r7, [r5, #24]
 8006240:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8006242:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006246:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800624a:	69e8      	ldr	r0, [r5, #28]
 800624c:	0112      	lsls	r2, r2, #4
 800624e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006252:	68e8      	ldr	r0, [r5, #12]
 8006254:	4302      	orrs	r2, r0
 8006256:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006258:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800625c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006260:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 8006264:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006266:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800626a:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800626e:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006270:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006274:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006278:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800627c:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006280:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8006282:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006286:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8006288:	609d      	str	r5, [r3, #8]
  return HAL_OK;
 800628a:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800628c:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800628e:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006290:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006294:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006298:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 80062ac:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ae:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062b4:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c0:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 80062c4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062c8:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ca:	4a12      	ldr	r2, [pc, #72]	; (8006314 <HAL_TIM_Encoder_Init+0x1a0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d0ae      	beq.n	800622e <HAL_TIM_Encoder_Init+0xba>
 80062d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d0aa      	beq.n	800622e <HAL_TIM_Encoder_Init+0xba>
 80062d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062dc:	4293      	cmp	r3, r2
 80062de:	d1a8      	bne.n	8006232 <HAL_TIM_Encoder_Init+0xbe>
 80062e0:	e7a5      	b.n	800622e <HAL_TIM_Encoder_Init+0xba>
    return HAL_ERROR;
 80062e2:	2001      	movs	r0, #1
}
 80062e4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80062e6:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062e8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062ee:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f4:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062fa:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 80062fe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006300:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006302:	6299      	str	r1, [r3, #40]	; 0x28
 8006304:	e793      	b.n	800622e <HAL_TIM_Encoder_Init+0xba>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006306:	6926      	ldr	r6, [r4, #16]
 8006308:	e7f2      	b.n	80062f0 <HAL_TIM_Encoder_Init+0x17c>
 800630a:	bf00      	nop
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000

08006318 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006318:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800631c:	2b01      	cmp	r3, #1
 800631e:	f000 81c5 	beq.w	80066ac <HAL_TIM_PWM_ConfigChannel+0x394>
 8006322:	2301      	movs	r3, #1
{
 8006324:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006326:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800632a:	2a14      	cmp	r2, #20
 800632c:	d854      	bhi.n	80063d8 <HAL_TIM_PWM_ConfigChannel+0xc0>
 800632e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006332:	0015      	.short	0x0015
 8006334:	00530053 	.word	0x00530053
 8006338:	009e0053 	.word	0x009e0053
 800633c:	00530053 	.word	0x00530053
 8006340:	01770053 	.word	0x01770053
 8006344:	00530053 	.word	0x00530053
 8006348:	00e70053 	.word	0x00e70053
 800634c:	00530053 	.word	0x00530053
 8006350:	01300053 	.word	0x01300053
 8006354:	00530053 	.word	0x00530053
 8006358:	00590053 	.word	0x00590053
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800635c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006364:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006366:	4ead      	ldr	r6, [pc, #692]	; (800661c <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006368:	f025 0501 	bic.w	r5, r5, #1
 800636c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800636e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006370:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006372:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8006378:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800637c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006380:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8006382:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8006386:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800638a:	d008      	beq.n	800639e <HAL_TIM_PWM_ConfigChannel+0x86>
 800638c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006390:	42b3      	cmp	r3, r6
 8006392:	d004      	beq.n	800639e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006394:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006398:	42b3      	cmp	r3, r6
 800639a:	f040 81a1 	bne.w	80066e0 <HAL_TIM_PWM_ConfigChannel+0x3c8>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800639e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80063a0:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80063a4:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063aa:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ae:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80063b0:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b4:	4335      	orrs	r5, r6

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063b6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80063b8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80063ba:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80063bc:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063be:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c0:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063c2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c4:	f044 0408 	orr.w	r4, r4, #8
 80063c8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ca:	6999      	ldr	r1, [r3, #24]
 80063cc:	f021 0104 	bic.w	r1, r1, #4
 80063d0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	432a      	orrs	r2, r5
 80063d6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80063d8:	2300      	movs	r3, #0
 80063da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80063de:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80063e0:	4618      	mov	r0, r3
}
 80063e2:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063e4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063ea:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ec:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ee:	4e8b      	ldr	r6, [pc, #556]	; (800661c <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063f0:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 80063f4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80063f6:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80063f8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80063fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006400:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006404:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800640a:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800640e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006412:	d00f      	beq.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8006414:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006418:	42b3      	cmp	r3, r6
 800641a:	d00b      	beq.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800641c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006420:	42b3      	cmp	r3, r6
 8006422:	d007      	beq.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8006424:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006428:	42b3      	cmp	r3, r6
 800642a:	d003      	beq.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800642c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006430:	42b3      	cmp	r3, r6
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_ConfigChannel+0x126>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006434:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006436:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800643a:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800643e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006440:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006442:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006444:	64de      	str	r6, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006446:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006448:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800644a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800644c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006450:	651c      	str	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006452:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006454:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006458:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800645a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800645c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006460:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006462:	2300      	movs	r3, #0
 8006464:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006468:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800646a:	4618      	mov	r0, r3
}
 800646c:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800646e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006470:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006474:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006476:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006478:	4e68      	ldr	r6, [pc, #416]	; (800661c <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	f025 0510 	bic.w	r5, r5, #16
 800647e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006480:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006482:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006484:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006486:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800648a:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800648e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006492:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006494:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800649c:	f000 8108 	beq.w	80066b0 <HAL_TIM_PWM_ConfigChannel+0x398>
 80064a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80064a4:	42b3      	cmp	r3, r6
 80064a6:	f000 8103 	beq.w	80066b0 <HAL_TIM_PWM_ConfigChannel+0x398>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80064ae:	42b3      	cmp	r3, r6
 80064b0:	d007      	beq.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80064b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80064b6:	42b3      	cmp	r3, r6
 80064b8:	d003      	beq.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80064ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80064be:	42b3      	cmp	r3, r6
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c6:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064ca:	433e      	orrs	r6, r7
 80064cc:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80064d0:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80064d2:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80064d4:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80064d6:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80064d8:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064da:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064dc:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064de:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80064e2:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80064ea:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80064f2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80064f4:	2300      	movs	r3, #0
 80064f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80064fa:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80064fc:	4618      	mov	r0, r3
}
 80064fe:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006500:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006502:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006506:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800650a:	4e44      	ldr	r6, [pc, #272]	; (800661c <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800650c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8006510:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006512:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006514:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006516:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006518:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800651c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006520:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006524:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006526:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800652e:	f000 80cf 	beq.w	80066d0 <HAL_TIM_PWM_ConfigChannel+0x3b8>
 8006532:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006536:	42b3      	cmp	r3, r6
 8006538:	f000 80ca 	beq.w	80066d0 <HAL_TIM_PWM_ConfigChannel+0x3b8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006540:	42b3      	cmp	r3, r6
 8006542:	d007      	beq.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8006544:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006548:	42b3      	cmp	r3, r6
 800654a:	d003      	beq.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800654c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006550:	42b3      	cmp	r3, r6
 8006552:	d106      	bne.n	8006562 <HAL_TIM_PWM_ConfigChannel+0x24a>
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006554:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006558:	f425 4540 	bic.w	r5, r5, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800655c:	433e      	orrs	r6, r7
 800655e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8006562:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006564:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006566:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006568:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800656a:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800656c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800656e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006570:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006574:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006576:	69d9      	ldr	r1, [r3, #28]
 8006578:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800657c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006584:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006586:	2300      	movs	r3, #0
 8006588:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800658c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800658e:	4618      	mov	r0, r3
}
 8006590:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006592:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006594:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006598:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800659a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659c:	4e1f      	ldr	r6, [pc, #124]	; (800661c <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800659e:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80065a2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80065a4:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80065a6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80065a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80065ae:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b6:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065b8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80065bc:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c0:	d00f      	beq.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80065c2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80065c6:	42b3      	cmp	r3, r6
 80065c8:	d00b      	beq.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80065ca:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80065ce:	42b3      	cmp	r3, r6
 80065d0:	d007      	beq.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80065d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065d6:	42b3      	cmp	r3, r6
 80065d8:	d003      	beq.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80065da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065de:	42b3      	cmp	r3, r6
 80065e0:	d104      	bne.n	80065ec <HAL_TIM_PWM_ConfigChannel+0x2d4>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065e2:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065e4:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065e8:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 80065ec:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065ee:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80065f0:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80065f2:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80065f4:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065f6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065f8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065fa:	f044 0408 	orr.w	r4, r4, #8
 80065fe:	651c      	str	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006600:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006602:	f021 0104 	bic.w	r1, r1, #4
 8006606:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800660a:	432a      	orrs	r2, r5
 800660c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800660e:	2300      	movs	r3, #0
 8006610:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006614:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006616:	4618      	mov	r0, r3
}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006620:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006622:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006626:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006628:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800662a:	4e33      	ldr	r6, [pc, #204]	; (80066f8 <HAL_TIM_PWM_ConfigChannel+0x3e0>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800662c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006630:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006632:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006634:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006636:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006638:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800663c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006640:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006644:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006646:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800664a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800664e:	d037      	beq.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x3a8>
 8006650:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006654:	42b3      	cmp	r3, r6
 8006656:	d033      	beq.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x3a8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006658:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800665c:	42b3      	cmp	r3, r6
 800665e:	d007      	beq.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x358>
 8006660:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006664:	42b3      	cmp	r3, r6
 8006666:	d003      	beq.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x358>
 8006668:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800666c:	42b3      	cmp	r3, r6
 800666e:	d106      	bne.n	800667e <HAL_TIM_PWM_ConfigChannel+0x366>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006670:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006674:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006678:	433e      	orrs	r6, r7
 800667a:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800667e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006680:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006682:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006684:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006686:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006688:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800668a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800668c:	f044 0408 	orr.w	r4, r4, #8
 8006690:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	f021 0104 	bic.w	r1, r1, #4
 8006698:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	432a      	orrs	r2, r5
 800669e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80066a0:	2300      	movs	r3, #0
 80066a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80066a6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80066a8:	4618      	mov	r0, r3
}
 80066aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80066ac:	2002      	movs	r0, #2
}
 80066ae:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b6:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80066ba:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80066be:	e700      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066c0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80066c2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066c6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ca:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80066ce:	e7cf      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x358>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066d0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80066d2:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066d6:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80066da:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80066de:	e739      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x23c>
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80066e4:	42b3      	cmp	r3, r6
 80066e6:	f43f ae5a 	beq.w	800639e <HAL_TIM_PWM_ConfigChannel+0x86>
 80066ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80066ee:	42b3      	cmp	r3, r6
 80066f0:	f47f ae61 	bne.w	80063b6 <HAL_TIM_PWM_ConfigChannel+0x9e>
 80066f4:	e653      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x86>
 80066f6:	bf00      	nop
 80066f8:	40012c00 	.word	0x40012c00

080066fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80066fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	f000 8084 	beq.w	800680e <HAL_TIM_ConfigClockSource+0x112>
  htim->State = HAL_TIM_STATE_BUSY;
 8006706:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8006708:	6803      	ldr	r3, [r0, #0]
{
 800670a:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006710:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006712:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006714:	4c59      	ldr	r4, [pc, #356]	; (800687c <HAL_TIM_ConfigClockSource+0x180>)
  switch (sClockSourceConfig->ClockSource)
 8006716:	2a60      	cmp	r2, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006718:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 800671c:	f04f 0501 	mov.w	r5, #1
 8006720:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8006724:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006726:	d074      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x116>
 8006728:	d91e      	bls.n	8006768 <HAL_TIM_ConfigClockSource+0x6c>
 800672a:	4c55      	ldr	r4, [pc, #340]	; (8006880 <HAL_TIM_ConfigClockSource+0x184>)
 800672c:	42a2      	cmp	r2, r4
 800672e:	f000 808e 	beq.w	800684e <HAL_TIM_ConfigClockSource+0x152>
 8006732:	f200 8096 	bhi.w	8006862 <HAL_TIM_ConfigClockSource+0x166>
 8006736:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800673a:	d03e      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xbe>
 800673c:	f1b2 1f10 	cmp.w	r2, #1048592	; 0x100010
 8006740:	f000 8085 	beq.w	800684e <HAL_TIM_ConfigClockSource+0x152>
 8006744:	2a70      	cmp	r2, #112	; 0x70
 8006746:	d12f      	bne.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006748:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800674c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800674e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006750:	432a      	orrs	r2, r5
 8006752:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006756:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800675a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800675c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800675e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006760:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006764:	609a      	str	r2, [r3, #8]
      break;
 8006766:	e01f      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
  switch (sClockSourceConfig->ClockSource)
 8006768:	2a20      	cmp	r2, #32
 800676a:	d070      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x152>
 800676c:	d96c      	bls.n	8006848 <HAL_TIM_ConfigClockSource+0x14c>
 800676e:	2a40      	cmp	r2, #64	; 0x40
 8006770:	d033      	beq.n	80067da <HAL_TIM_ConfigClockSource+0xde>
 8006772:	2a50      	cmp	r2, #80	; 0x50
 8006774:	d17f      	bne.n	8006876 <HAL_TIM_ConfigClockSource+0x17a>
  tmpccer = TIMx->CCER;
 8006776:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006778:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	684c      	ldr	r4, [r1, #4]
 800677c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800677e:	f026 0601 	bic.w	r6, r6, #1
 8006782:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006784:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006786:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800678a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800678e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006792:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006796:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006798:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800679a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800679e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067a2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80067a6:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80067a8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	2201      	movs	r2, #1
 80067ac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80067b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80067b4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80067b6:	4618      	mov	r0, r3
}
 80067b8:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067ba:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80067be:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80067c0:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c2:	432a      	orrs	r2, r5
 80067c4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067cc:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80067ce:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067d6:	609a      	str	r2, [r3, #8]
      break;
 80067d8:	e7e6      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
  tmpccer = TIMx->CCER;
 80067da:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067dc:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067de:	684c      	ldr	r4, [r1, #4]
 80067e0:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e2:	f026 0601 	bic.w	r6, r6, #1
 80067e6:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e8:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ea:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80067f6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80067f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fa:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80067fc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067fe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006802:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006806:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	e7cc      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
  __HAL_LOCK(htim);
 800680e:	2002      	movs	r0, #2
}
 8006810:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006812:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006814:	684d      	ldr	r5, [r1, #4]
 8006816:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006818:	f024 0410 	bic.w	r4, r4, #16
 800681c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8006820:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006822:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006826:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800682a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006832:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006834:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006836:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006838:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800683c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006840:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006844:	609a      	str	r2, [r3, #8]
 8006846:	e7af      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
  switch (sClockSourceConfig->ClockSource)
 8006848:	b10a      	cbz	r2, 800684e <HAL_TIM_ConfigClockSource+0x152>
 800684a:	2a10      	cmp	r2, #16
 800684c:	d1ac      	bne.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
  tmpsmcr = TIMx->SMCR;
 800684e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006850:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006854:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006858:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	e7a2      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
  switch (sClockSourceConfig->ClockSource)
 8006862:	4908      	ldr	r1, [pc, #32]	; (8006884 <HAL_TIM_ConfigClockSource+0x188>)
 8006864:	428a      	cmp	r2, r1
 8006866:	d0f2      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x152>
 8006868:	3130      	adds	r1, #48	; 0x30
 800686a:	428a      	cmp	r2, r1
 800686c:	d0ef      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x152>
 800686e:	3940      	subs	r1, #64	; 0x40
 8006870:	428a      	cmp	r2, r1
 8006872:	d199      	bne.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
 8006874:	e7eb      	b.n	800684e <HAL_TIM_ConfigClockSource+0x152>
 8006876:	2a30      	cmp	r2, #48	; 0x30
 8006878:	d196      	bne.n	80067a8 <HAL_TIM_ConfigClockSource+0xac>
 800687a:	e7e8      	b.n	800684e <HAL_TIM_ConfigClockSource+0x152>
 800687c:	ffce0088 	.word	0xffce0088
 8006880:	00100020 	.word	0x00100020
 8006884:	00100040 	.word	0x00100040

08006888 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006888:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d04e      	beq.n	800692e <HAL_TIM_SlaveConfigSynchro+0xa6>
  tmpsmcr = htim->Instance->SMCR;
 8006890:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006892:	2302      	movs	r3, #2
{
 8006894:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8006896:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800689a:	6893      	ldr	r3, [r2, #8]
 800689c:	4604      	mov	r4, r0
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800689e:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 80068a2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80068aa:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80068ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b0:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068b4:	432b      	orrs	r3, r5
  __HAL_LOCK(htim);
 80068b6:	2601      	movs	r6, #1
  switch (sSlaveConfig->InputTrigger)
 80068b8:	2850      	cmp	r0, #80	; 0x50
  __HAL_LOCK(htim);
 80068ba:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80068be:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80068c0:	d052      	beq.n	8006968 <HAL_TIM_SlaveConfigSynchro+0xe0>
 80068c2:	d91f      	bls.n	8006904 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068c4:	2860      	cmp	r0, #96	; 0x60
 80068c6:	d03c      	beq.n	8006942 <HAL_TIM_SlaveConfigSynchro+0xba>
 80068c8:	2870      	cmp	r0, #112	; 0x70
 80068ca:	d10a      	bne.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068cc:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80068d0:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80068d2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068d4:	432b      	orrs	r3, r5
 80068d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068da:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068de:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80068e0:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068e2:	68d3      	ldr	r3, [r2, #12]
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068ea:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 80068ee:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f4:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80068f6:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80068fc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8006900:	bcf0      	pop	{r4, r5, r6, r7}
 8006902:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006904:	2840      	cmp	r0, #64	; 0x40
 8006906:	d1ec      	bne.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006908:	2d05      	cmp	r5, #5
 800690a:	d012      	beq.n	8006932 <HAL_TIM_SlaveConfigSynchro+0xaa>
 800690c:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8006910:	d00f      	beq.n	8006932 <HAL_TIM_SlaveConfigSynchro+0xaa>
      tmpccer = htim->Instance->CCER;
 8006912:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006914:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006916:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006918:	f020 0001 	bic.w	r0, r0, #1
 800691c:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800691e:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006924:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006928:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800692a:	6215      	str	r5, [r2, #32]
 800692c:	e7d9      	b.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_LOCK(htim);
 800692e:	2002      	movs	r0, #2
}
 8006930:	4770      	bx	lr
    htim->State = HAL_TIM_STATE_READY;
 8006932:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006934:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006936:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800693a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800693e:	bcf0      	pop	{r4, r5, r6, r7}
 8006940:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006942:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006944:	688d      	ldr	r5, [r1, #8]
 8006946:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006948:	f020 0010 	bic.w	r0, r0, #16
 800694c:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8006950:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006952:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800695a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800695e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006962:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006964:	6213      	str	r3, [r2, #32]
 8006966:	e7bc      	b.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpccer = TIMx->CCER;
 8006968:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696a:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696c:	6888      	ldr	r0, [r1, #8]
 800696e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006970:	f026 0601 	bic.w	r6, r6, #1
 8006974:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006976:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006978:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006980:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006982:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006986:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8006988:	6211      	str	r1, [r2, #32]
 800698a:	e7aa      	b.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x5a>

0800698c <HAL_TIM_OC_DelayElapsedCallback>:
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <HAL_TIM_IC_CaptureCallback>:
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop

08006994 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop

08006998 <HAL_TIM_TriggerCallback>:
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop

0800699c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800699c:	6803      	ldr	r3, [r0, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	0791      	lsls	r1, r2, #30
{
 80069a2:	b510      	push	{r4, lr}
 80069a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069a6:	d503      	bpl.n	80069b0 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	0792      	lsls	r2, r2, #30
 80069ac:	f100 808a 	bmi.w	8006ac4 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	0752      	lsls	r2, r2, #29
 80069b4:	d502      	bpl.n	80069bc <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	0750      	lsls	r0, r2, #29
 80069ba:	d470      	bmi.n	8006a9e <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	0711      	lsls	r1, r2, #28
 80069c0:	d502      	bpl.n	80069c8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	0712      	lsls	r2, r2, #28
 80069c6:	d458      	bmi.n	8006a7a <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	06d1      	lsls	r1, r2, #27
 80069cc:	d502      	bpl.n	80069d4 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	06d2      	lsls	r2, r2, #27
 80069d2:	d43e      	bmi.n	8006a52 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	07d0      	lsls	r0, r2, #31
 80069d8:	d503      	bpl.n	80069e2 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	07d1      	lsls	r1, r2, #31
 80069de:	f100 808a 	bmi.w	8006af6 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	0612      	lsls	r2, r2, #24
 80069e6:	d503      	bpl.n	80069f0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	0610      	lsls	r0, r2, #24
 80069ec:	f100 808b 	bmi.w	8006b06 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	05d1      	lsls	r1, r2, #23
 80069f4:	d503      	bpl.n	80069fe <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	0612      	lsls	r2, r2, #24
 80069fa:	f100 808c 	bmi.w	8006b16 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	0650      	lsls	r0, r2, #25
 8006a02:	d503      	bpl.n	8006a0c <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	0651      	lsls	r1, r2, #25
 8006a08:	f100 808d 	bmi.w	8006b26 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	0692      	lsls	r2, r2, #26
 8006a10:	d503      	bpl.n	8006a1a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	0690      	lsls	r0, r2, #26
 8006a16:	f100 808e 	bmi.w	8006b36 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	02d1      	lsls	r1, r2, #11
 8006a1e:	d503      	bpl.n	8006a28 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	02d2      	lsls	r2, r2, #11
 8006a24:	f100 808f 	bmi.w	8006b46 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	0290      	lsls	r0, r2, #10
 8006a2c:	d503      	bpl.n	8006a36 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	0291      	lsls	r1, r2, #10
 8006a32:	f100 8090 	bmi.w	8006b56 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	0252      	lsls	r2, r2, #9
 8006a3a:	d503      	bpl.n	8006a44 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	0250      	lsls	r0, r2, #9
 8006a40:	f100 8091 	bmi.w	8006b66 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	0211      	lsls	r1, r2, #8
 8006a48:	d502      	bpl.n	8006a50 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	0212      	lsls	r2, r2, #8
 8006a4e:	d44a      	bmi.n	8006ae6 <HAL_TIM_IRQHandler+0x14a>
}
 8006a50:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a52:	f06f 0210 	mvn.w	r2, #16
 8006a56:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a58:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a60:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a64:	f040 8090 	bne.w	8006b88 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a68:	f7ff ff90 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7ff ff91 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	2200      	movs	r2, #0
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	7722      	strb	r2, [r4, #28]
 8006a78:	e7ac      	b.n	80069d4 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a7a:	f06f 0208 	mvn.w	r2, #8
 8006a7e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a80:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a82:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a84:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a86:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006a88:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a8a:	d17a      	bne.n	8006b82 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8c:	f7ff ff7e 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	4620      	mov	r0, r4
 8006a92:	f7ff ff7f 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	2200      	movs	r2, #0
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	7722      	strb	r2, [r4, #28]
 8006a9c:	e794      	b.n	80069c8 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a9e:	f06f 0204 	mvn.w	r2, #4
 8006aa2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aa6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aac:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab0:	d164      	bne.n	8006b7c <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	f7ff ff6b 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff ff6c 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abc:	2200      	movs	r2, #0
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	7722      	strb	r2, [r4, #28]
 8006ac2:	e77b      	b.n	80069bc <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac4:	f06f 0202 	mvn.w	r2, #2
 8006ac8:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aca:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006acc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ace:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ad0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad2:	d150      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad4:	f7ff ff5a 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f7ff ff5b 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ade:	2200      	movs	r2, #0
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	7722      	strb	r2, [r4, #28]
 8006ae4:	e764      	b.n	80069b0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006ae6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006aea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006aec:	611a      	str	r2, [r3, #16]
}
 8006aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006af2:	f000 b94d 	b.w	8006d90 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006af6:	f06f 0201 	mvn.w	r2, #1
 8006afa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7fa fa29 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	e76d      	b.n	80069e2 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 f935 	bl	8006d7c <HAL_TIMEx_BreakCallback>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	e76c      	b.n	80069f0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 f92f 	bl	8006d80 <HAL_TIMEx_Break2Callback>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	e76b      	b.n	80069fe <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f7ff ff33 	bl	8006998 <HAL_TIM_TriggerCallback>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	e76a      	b.n	8006a0c <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b36:	f06f 0220 	mvn.w	r2, #32
 8006b3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 f91b 	bl	8006d78 <HAL_TIMEx_CommutCallback>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	e769      	b.n	8006a1a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b46:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 f919 	bl	8006d84 <HAL_TIMEx_EncoderIndexCallback>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	e768      	b.n	8006a28 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006b56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f913 	bl	8006d88 <HAL_TIMEx_DirectionChangeCallback>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	e767      	b.n	8006a36 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006b66:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006b6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 f90d 	bl	8006d8c <HAL_TIMEx_IndexErrorCallback>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	e766      	b.n	8006a44 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006b76:	f7ff ff0b 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 8006b7a:	e7b0      	b.n	8006ade <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7c:	f7ff ff08 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 8006b80:	e79c      	b.n	8006abc <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	f7ff ff05 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 8006b86:	e786      	b.n	8006a96 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b88:	f7ff ff02 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e771      	b.n	8006a72 <HAL_TIM_IRQHandler+0xd6>
 8006b8e:	bf00      	nop

08006b90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d049      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
{
 8006b98:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b9a:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	6805      	ldr	r5, [r0, #0]
 8006b9e:	680f      	ldr	r7, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006ba6:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ba8:	4295      	cmp	r5, r2
  tmpcr2 = htim->Instance->CR2;
 8006baa:	686b      	ldr	r3, [r5, #4]
  __HAL_LOCK(htim);
 8006bac:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006bb0:	68ae      	ldr	r6, [r5, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb2:	d025      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb8:	4295      	cmp	r5, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x86>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bbc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc4:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006bca:	606b      	str	r3, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	d00a      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006bd0:	429d      	cmp	r5, r3
 8006bd2:	d007      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd8:	429d      	cmp	r5, r3
 8006bda:	d003      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006bdc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006be0:	429d      	cmp	r5, r3
 8006be2:	d104      	bne.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be4:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bea:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bec:	60ae      	str	r6, [r5, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006bee:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006bf6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006bfa:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006bfc:	4618      	mov	r0, r3
}
 8006bfe:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c00:	684c      	ldr	r4, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c06:	4322      	orrs	r2, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c08:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c10:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 8006c12:	606a      	str	r2, [r5, #4]
 8006c14:	e7e6      	b.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c16:	684a      	ldr	r2, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c18:	f423 0470 	bic.w	r4, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1c:	4314      	orrs	r4, r2
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c1e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8006c22:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c26:	433c      	orrs	r4, r7
  htim->Instance->CR2 = tmpcr2;
 8006c28:	606c      	str	r4, [r5, #4]
 8006c2a:	e7db      	b.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8006c2c:	2002      	movs	r0, #2
}
 8006c2e:	4770      	bx	lr
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400

08006c38 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d044      	beq.n	8006cca <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8006c40:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c42:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006c46:	4602      	mov	r2, r0
 8006c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c4c:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c50:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c56:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c5c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c60:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c66:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c6c:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c6e:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c70:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c76:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c78:	4c15      	ldr	r4, [pc, #84]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006c7a:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c7c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c80:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c82:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c86:	d00a      	beq.n	8006c9e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006c88:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d006      	beq.n	8006c9e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006c90:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006c92:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8006c94:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006c96:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8006c98:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8006c9c:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c9e:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ca0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ca8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cac:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cb0:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cb8:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cc0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006cc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	e7e2      	b.n	8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006cca:	2002      	movs	r0, #2
}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40012c00 	.word	0x40012c00

08006cd4 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d048      	beq.n	8006d6e <HAL_TIMEx_ConfigBreakInput+0x9a>
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	3b01      	subs	r3, #1
{
 8006ce0:	b4f0      	push	{r4, r5, r6, r7}
 8006ce2:	2b0f      	cmp	r3, #15
  __HAL_LOCK(htim);
 8006ce4:	f04f 0401 	mov.w	r4, #1
 8006ce8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
 8006cec:	d91d      	bls.n	8006d2a <HAL_TIMEx_ConfigBreakInput+0x56>

  switch (sBreakInputConfig->Source)
 8006cee:	2500      	movs	r5, #0
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8006cf0:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006cf2:	462f      	mov	r7, r5
 8006cf4:	462c      	mov	r4, r5
 8006cf6:	462e      	mov	r6, r5
  switch (BreakInput)
 8006cf8:	d023      	beq.n	8006d42 <HAL_TIMEx_ConfigBreakInput+0x6e>
 8006cfa:	2902      	cmp	r1, #2
 8006cfc:	d10f      	bne.n	8006d1e <HAL_TIMEx_ConfigBreakInput+0x4a>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006cfe:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d00:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8006d02:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d06:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d08:	40bb      	lsls	r3, r7
 8006d0a:	ea83 030c 	eor.w	r3, r3, ip
 8006d0e:	4033      	ands	r3, r6
 8006d10:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d14:	40aa      	lsls	r2, r5
 8006d16:	405a      	eors	r2, r3
 8006d18:	4022      	ands	r2, r4
 8006d1a:	4053      	eors	r3, r2

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006d1c:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006d24:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006d26:	4618      	mov	r0, r3
}
 8006d28:	4770      	bx	lr
 8006d2a:	4c12      	ldr	r4, [pc, #72]	; (8006d74 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8006d2c:	eb04 0583 	add.w	r5, r4, r3, lsl #2
  switch (BreakInput)
 8006d30:	2901      	cmp	r1, #1
 8006d32:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 8006d36:	f8d5 7080 	ldr.w	r7, [r5, #128]	; 0x80
 8006d3a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006d3c:	f8d5 50c0 	ldr.w	r5, [r5, #192]	; 0xc0
 8006d40:	d1db      	bne.n	8006cfa <HAL_TIMEx_ConfigBreakInput+0x26>
      tmporx = htim->Instance->AF1;
 8006d42:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d44:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006d46:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d4a:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d4c:	40bb      	lsls	r3, r7
 8006d4e:	ea83 030c 	eor.w	r3, r3, ip
 8006d52:	4033      	ands	r3, r6
 8006d54:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d58:	40aa      	lsls	r2, r5
 8006d5a:	405a      	eors	r2, r3
 8006d5c:	4022      	ands	r2, r4
 8006d5e:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 8006d60:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8006d62:	2300      	movs	r3, #0
 8006d64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006d68:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006d6a:	4618      	mov	r0, r3
}
 8006d6c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006d6e:	2002      	movs	r0, #2
}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	08009c68 	.word	0x08009c68

08006d78 <HAL_TIMEx_CommutCallback>:
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop

08006d7c <HAL_TIMEx_BreakCallback>:
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <HAL_TIMEx_Break2Callback>:
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop

08006d84 <HAL_TIMEx_EncoderIndexCallback>:
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop

08006d88 <HAL_TIMEx_DirectionChangeCallback>:
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop

08006d8c <HAL_TIMEx_IndexErrorCallback>:
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <HAL_TIMEx_TransitionErrorCallback>:
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop

08006d94 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d96:	07da      	lsls	r2, r3, #31
{
 8006d98:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d9a:	d506      	bpl.n	8006daa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9c:	6801      	ldr	r1, [r0, #0]
 8006d9e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006da0:	684a      	ldr	r2, [r1, #4]
 8006da2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006da6:	4322      	orrs	r2, r4
 8006da8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006daa:	079c      	lsls	r4, r3, #30
 8006dac:	d506      	bpl.n	8006dbc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dae:	6801      	ldr	r1, [r0, #0]
 8006db0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006db2:	684a      	ldr	r2, [r1, #4]
 8006db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006db8:	4322      	orrs	r2, r4
 8006dba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dbc:	0759      	lsls	r1, r3, #29
 8006dbe:	d506      	bpl.n	8006dce <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dc0:	6801      	ldr	r1, [r0, #0]
 8006dc2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006dc4:	684a      	ldr	r2, [r1, #4]
 8006dc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dca:	4322      	orrs	r2, r4
 8006dcc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dce:	071a      	lsls	r2, r3, #28
 8006dd0:	d506      	bpl.n	8006de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd2:	6801      	ldr	r1, [r0, #0]
 8006dd4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006dd6:	684a      	ldr	r2, [r1, #4]
 8006dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ddc:	4322      	orrs	r2, r4
 8006dde:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de0:	06dc      	lsls	r4, r3, #27
 8006de2:	d506      	bpl.n	8006df2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006de4:	6801      	ldr	r1, [r0, #0]
 8006de6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006de8:	688a      	ldr	r2, [r1, #8]
 8006dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dee:	4322      	orrs	r2, r4
 8006df0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006df2:	0699      	lsls	r1, r3, #26
 8006df4:	d506      	bpl.n	8006e04 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006df6:	6801      	ldr	r1, [r0, #0]
 8006df8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006dfa:	688a      	ldr	r2, [r1, #8]
 8006dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e00:	4322      	orrs	r2, r4
 8006e02:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e04:	065a      	lsls	r2, r3, #25
 8006e06:	d509      	bpl.n	8006e1c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e08:	6801      	ldr	r1, [r0, #0]
 8006e0a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006e0c:	684a      	ldr	r2, [r1, #4]
 8006e0e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006e12:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e1a:	d00b      	beq.n	8006e34 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1c:	061b      	lsls	r3, r3, #24
 8006e1e:	d506      	bpl.n	8006e2e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e20:	6802      	ldr	r2, [r0, #0]
 8006e22:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006e24:	6853      	ldr	r3, [r2, #4]
 8006e26:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6053      	str	r3, [r2, #4]
  }
}
 8006e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e32:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e34:	684a      	ldr	r2, [r1, #4]
 8006e36:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006e38:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006e3c:	4322      	orrs	r2, r4
 8006e3e:	604a      	str	r2, [r1, #4]
 8006e40:	e7ec      	b.n	8006e1c <UART_AdvFeatureConfig+0x88>
 8006e42:	bf00      	nop

08006e44 <HAL_UART_Init>:
  if (huart == NULL)
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d052      	beq.n	8006eee <HAL_UART_Init+0xaa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e48:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8006e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e50:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d046      	beq.n	8006ee4 <HAL_UART_Init+0xa0>
  __HAL_UART_DISABLE(huart);
 8006e56:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e58:	49b7      	ldr	r1, [pc, #732]	; (8007138 <HAL_UART_Init+0x2f4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e5a:	69a7      	ldr	r7, [r4, #24]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	2224      	movs	r2, #36	; 0x24
 8006e5e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8006e62:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e64:	68a2      	ldr	r2, [r4, #8]
 8006e66:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8006e6a:	f020 0001 	bic.w	r0, r0, #1
 8006e6e:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e70:	4332      	orrs	r2, r6
 8006e72:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e74:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e76:	432a      	orrs	r2, r5
  tmpreg |= (uint32_t)huart->FifoMode;
 8006e78:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e7a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e7c:	4031      	ands	r1, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006e7e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e80:	430a      	orrs	r2, r1
 8006e82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e88:	4eac      	ldr	r6, [pc, #688]	; (800713c <HAL_UART_Init+0x2f8>)
 8006e8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e94:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e96:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e98:	d02b      	beq.n	8006ef2 <HAL_UART_Init+0xae>
    tmpreg |= huart->Init.OneBitSampling;
 8006e9a:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e9c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006ea0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006ea4:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eac:	f506 4638 	add.w	r6, r6, #47104	; 0xb800
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eb0:	f022 020f 	bic.w	r2, r2, #15
 8006eb4:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eb6:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eba:	d03a      	beq.n	8006f32 <HAL_UART_Init+0xee>
 8006ebc:	4aa0      	ldr	r2, [pc, #640]	; (8007140 <HAL_UART_Init+0x2fc>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d05c      	beq.n	8006f7c <HAL_UART_Init+0x138>
 8006ec2:	4aa0      	ldr	r2, [pc, #640]	; (8007144 <HAL_UART_Init+0x300>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	f000 8145 	beq.w	8007154 <HAL_UART_Init+0x310>
 8006eca:	4a9f      	ldr	r2, [pc, #636]	; (8007148 <HAL_UART_Init+0x304>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	f000 80eb 	beq.w	80070a8 <HAL_UART_Init+0x264>
  huart->RxISR = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006ed8:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006edc:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 8006ede:	2001      	movs	r0, #1
}
 8006ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    huart->Lock = HAL_UNLOCKED;
 8006ee4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8006ee8:	f7fb ffe0 	bl	8002eac <HAL_UART_MspInit>
 8006eec:	e7b3      	b.n	8006e56 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 8006eee:	2001      	movs	r0, #1
}
 8006ef0:	4770      	bx	lr
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ef2:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006ef6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006efa:	4339      	orrs	r1, r7
 8006efc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f00:	4892      	ldr	r0, [pc, #584]	; (800714c <HAL_UART_Init+0x308>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f02:	f022 020f 	bic.w	r2, r2, #15
 8006f06:	432a      	orrs	r2, r5
 8006f08:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f0a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006f0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f16:	f000 8194 	beq.w	8007242 <HAL_UART_Init+0x3fe>
 8006f1a:	f240 8159 	bls.w	80071d0 <HAL_UART_Init+0x38c>
 8006f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f22:	f000 81a8 	beq.w	8007276 <HAL_UART_Init+0x432>
 8006f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f2a:	d1d2      	bne.n	8006ed2 <HAL_UART_Init+0x8e>
        pclk = (uint32_t) LSE_VALUE;
 8006f2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f30:	e156      	b.n	80071e0 <HAL_UART_Init+0x39c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f32:	4a86      	ldr	r2, [pc, #536]	; (800714c <HAL_UART_Init+0x308>)
 8006f34:	4b86      	ldr	r3, [pc, #536]	; (8007150 <HAL_UART_Init+0x30c>)
 8006f36:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006f3a:	f002 0203 	and.w	r2, r2, #3
 8006f3e:	441a      	add	r2, r3
 8006f40:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006f48:	f000 8119 	beq.w	800717e <HAL_UART_Init+0x33a>
    switch (clocksource)
 8006f4c:	2a08      	cmp	r2, #8
 8006f4e:	d8c0      	bhi.n	8006ed2 <HAL_UART_Init+0x8e>
 8006f50:	a101      	add	r1, pc, #4	; (adr r1, 8006f58 <HAL_UART_Init+0x114>)
 8006f52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	080070a3 	.word	0x080070a3
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	0800724f 	.word	0x0800724f
 8006f64:	08006ed3 	.word	0x08006ed3
 8006f68:	0800709d 	.word	0x0800709d
 8006f6c:	08006ed3 	.word	0x08006ed3
 8006f70:	08006ed3 	.word	0x08006ed3
 8006f74:	08006ed3 	.word	0x08006ed3
 8006f78:	08007253 	.word	0x08007253
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f7c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8006f80:	4b73      	ldr	r3, [pc, #460]	; (8007150 <HAL_UART_Init+0x30c>)
 8006f82:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006f86:	f002 020c 	and.w	r2, r2, #12
 8006f8a:	5c9a      	ldrb	r2, [r3, r2]
 8006f8c:	e7da      	b.n	8006f44 <HAL_UART_Init+0x100>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f8e:	f7fe fe03 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006f92:	2800      	cmp	r0, #0
 8006f94:	f000 80c8 	beq.w	8007128 <HAL_UART_Init+0x2e4>
 8006f98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f9a:	4b6d      	ldr	r3, [pc, #436]	; (8007150 <HAL_UART_Init+0x30c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f9c:	6862      	ldr	r2, [r4, #4]
 8006f9e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8006fa2:	8a2b      	ldrh	r3, [r5, #16]
 8006fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fa8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb0:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb2:	f1a3 0110 	sub.w	r1, r3, #16
 8006fb6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	d889      	bhi.n	8006ed2 <HAL_UART_Init+0x8e>
        huart->Instance->BRR = usartdiv;
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	60c3      	str	r3, [r0, #12]
  huart->NbTxDataToProcess = 1;
 8006fc2:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8006fc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->NbTxDataToProcess = 1;
 8006fc8:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006fcc:	6722      	str	r2, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 80a5 	bne.w	8007120 <HAL_UART_Init+0x2dc>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fe6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006fe8:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fea:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff6:	f7fc fd41 	bl	8003a7c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8007000:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007002:	d40c      	bmi.n	800701e <HAL_UART_Init+0x1da>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	0750      	lsls	r0, r2, #29
 8007008:	d431      	bmi.n	800706e <HAL_UART_Init+0x22a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800700a:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 800700c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800700e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8007012:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007016:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800701a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701e:	69dd      	ldr	r5, [r3, #28]
 8007020:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8007024:	d1ee      	bne.n	8007004 <HAL_UART_Init+0x1c0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fc fd29 	bl	8003a7c <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800702a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702c:	1b80      	subs	r0, r0, r6
 800702e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007032:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007034:	f080 80bc 	bcs.w	80071b0 <HAL_UART_Init+0x36c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007038:	0752      	lsls	r2, r2, #29
 800703a:	d5f0      	bpl.n	800701e <HAL_UART_Init+0x1da>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	0517      	lsls	r7, r2, #20
 8007040:	d5ed      	bpl.n	800701e <HAL_UART_Init+0x1da>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007046:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800704e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007050:	6899      	ldr	r1, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007052:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007054:	f021 0101 	bic.w	r1, r1, #1
 8007058:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 800705a:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 800705c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007060:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007064:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007068:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 800706c:	e7d5      	b.n	800701a <HAL_UART_Init+0x1d6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	69dd      	ldr	r5, [r3, #28]
 8007070:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8007074:	d1c9      	bne.n	800700a <HAL_UART_Init+0x1c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007076:	f7fc fd01 	bl	8003a7c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800707a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707c:	1b80      	subs	r0, r0, r6
 800707e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007082:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007084:	f080 8094 	bcs.w	80071b0 <HAL_UART_Init+0x36c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007088:	0751      	lsls	r1, r2, #29
 800708a:	d5f0      	bpl.n	800706e <HAL_UART_Init+0x22a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	0512      	lsls	r2, r2, #20
 8007090:	d5ed      	bpl.n	800706e <HAL_UART_Init+0x22a>
 8007092:	e7d6      	b.n	8007042 <HAL_UART_Init+0x1fe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007094:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007098:	f000 80e5 	beq.w	8007266 <HAL_UART_Init+0x422>
        pclk = HAL_RCC_GetSysClockFreq();
 800709c:	f7fe fd2c 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 80070a0:	e777      	b.n	8006f92 <HAL_UART_Init+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7fe fd67 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
 80070a6:	e774      	b.n	8006f92 <HAL_UART_Init+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070a8:	4b28      	ldr	r3, [pc, #160]	; (800714c <HAL_UART_Init+0x308>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d0ee      	beq.n	8007094 <HAL_UART_Init+0x250>
 80070b6:	d927      	bls.n	8007108 <HAL_UART_Init+0x2c4>
 80070b8:	2b80      	cmp	r3, #128	; 0x80
 80070ba:	f000 80cd 	beq.w	8007258 <HAL_UART_Init+0x414>
 80070be:	2bc0      	cmp	r3, #192	; 0xc0
 80070c0:	f47f af07 	bne.w	8006ed2 <HAL_UART_Init+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80070c8:	4b21      	ldr	r3, [pc, #132]	; (8007150 <HAL_UART_Init+0x30c>)
        pclk = (uint32_t) LSE_VALUE;
 80070ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ce:	f47f af65 	bne.w	8006f9c <HAL_UART_Init+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d2:	6861      	ldr	r1, [r4, #4]
 80070d4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80070d8:	084a      	lsrs	r2, r1, #1
 80070da:	8a2b      	ldrh	r3, [r5, #16]
 80070dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80070e0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80070e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80070e8:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ea:	f1a2 0010 	sub.w	r0, r2, #16
 80070ee:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80070f2:	4288      	cmp	r0, r1
 80070f4:	f63f aeed 	bhi.w	8006ed2 <HAL_UART_Init+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070f8:	f023 030f 	bic.w	r3, r3, #15
 80070fc:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070fe:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	e75b      	b.n	8006fc0 <HAL_UART_Init+0x17c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007108:	2b00      	cmp	r3, #0
 800710a:	f47f aee2 	bne.w	8006ed2 <HAL_UART_Init+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800710e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007112:	d1c6      	bne.n	80070a2 <HAL_UART_Init+0x25e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007114:	f7fe fd2e 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007118:	b130      	cbz	r0, 8007128 <HAL_UART_Init+0x2e4>
 800711a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <HAL_UART_Init+0x30c>)
 800711e:	e7d8      	b.n	80070d2 <HAL_UART_Init+0x28e>
    UART_AdvFeatureConfig(huart);
 8007120:	4620      	mov	r0, r4
 8007122:	f7ff fe37 	bl	8006d94 <UART_AdvFeatureConfig>
 8007126:	e756      	b.n	8006fd6 <HAL_UART_Init+0x192>
  huart->RxISR = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800712e:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8007132:	6723      	str	r3, [r4, #112]	; 0x70
 8007134:	e74b      	b.n	8006fce <HAL_UART_Init+0x18a>
 8007136:	bf00      	nop
 8007138:	cfff69f3 	.word	0xcfff69f3
 800713c:	40008000 	.word	0x40008000
 8007140:	40004400 	.word	0x40004400
 8007144:	40004800 	.word	0x40004800
 8007148:	40004c00 	.word	0x40004c00
 800714c:	40021000 	.word	0x40021000
 8007150:	08009d68 	.word	0x08009d68
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007154:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <HAL_UART_Init+0x43c>)
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800715e:	2b10      	cmp	r3, #16
 8007160:	d098      	beq.n	8007094 <HAL_UART_Init+0x250>
 8007162:	d9d1      	bls.n	8007108 <HAL_UART_Init+0x2c4>
 8007164:	2b20      	cmp	r3, #32
 8007166:	d077      	beq.n	8007258 <HAL_UART_Init+0x414>
 8007168:	2b30      	cmp	r3, #48	; 0x30
 800716a:	f47f aeb2 	bne.w	8006ed2 <HAL_UART_Init+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007172:	f000 8082 	beq.w	800727a <HAL_UART_Init+0x436>
        pclk = (uint32_t) LSE_VALUE;
 8007176:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800717a:	4b42      	ldr	r3, [pc, #264]	; (8007284 <HAL_UART_Init+0x440>)
 800717c:	e70e      	b.n	8006f9c <HAL_UART_Init+0x158>
    switch (clocksource)
 800717e:	2a08      	cmp	r2, #8
 8007180:	f63f aea7 	bhi.w	8006ed2 <HAL_UART_Init+0x8e>
 8007184:	a101      	add	r1, pc, #4	; (adr r1, 800718c <HAL_UART_Init+0x348>)
 8007186:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800718a:	bf00      	nop
 800718c:	08007115 	.word	0x08007115
 8007190:	08007249 	.word	0x08007249
 8007194:	0800726d 	.word	0x0800726d
 8007198:	08006ed3 	.word	0x08006ed3
 800719c:	08007267 	.word	0x08007267
 80071a0:	08006ed3 	.word	0x08006ed3
 80071a4:	08006ed3 	.word	0x08006ed3
 80071a8:	08006ed3 	.word	0x08006ed3
 80071ac:	08007271 	.word	0x08007271
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b6:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80071b8:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80071c0:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80071c2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80071c6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80071ca:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80071ce:	e724      	b.n	800701a <HAL_UART_Init+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f ae7e 	bne.w	8006ed2 <HAL_UART_Init+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d6:	f7fe fccd 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80071da:	2800      	cmp	r0, #0
 80071dc:	d0a4      	beq.n	8007128 <HAL_UART_Init+0x2e4>
 80071de:	6a65      	ldr	r5, [r4, #36]	; 0x24
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <HAL_UART_Init+0x440>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071e2:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071e4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071e8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071ec:	8a2a      	ldrh	r2, [r5, #16]
 80071ee:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071f2:	428b      	cmp	r3, r1
 80071f4:	f4ff ae6d 	bcc.w	8006ed2 <HAL_UART_Init+0x8e>
 80071f8:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80071fc:	f63f ae69 	bhi.w	8006ed2 <HAL_UART_Init+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007200:	2500      	movs	r5, #0
 8007202:	2300      	movs	r3, #0
 8007204:	4629      	mov	r1, r5
 8007206:	f7f9 f807 	bl	8000218 <__aeabi_uldivmod>
 800720a:	020b      	lsls	r3, r1, #8
 800720c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007210:	0202      	lsls	r2, r0, #8
 8007212:	0870      	lsrs	r0, r6, #1
 8007214:	1817      	adds	r7, r2, r0
 8007216:	f143 0800 	adc.w	r8, r3, #0
 800721a:	4632      	mov	r2, r6
 800721c:	462b      	mov	r3, r5
 800721e:	4638      	mov	r0, r7
 8007220:	4641      	mov	r1, r8
 8007222:	f7f8 fff9 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <HAL_UART_Init+0x444>)
 8007228:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800722c:	429a      	cmp	r2, r3
 800722e:	f63f ae50 	bhi.w	8006ed2 <HAL_UART_Init+0x8e>
          huart->Instance->BRR = usartdiv;
 8007232:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8007234:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8007238:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 800723a:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 800723e:	66a3      	str	r3, [r4, #104]	; 0x68
 8007240:	e6c5      	b.n	8006fce <HAL_UART_Init+0x18a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007242:	f7fe fc59 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8007246:	e7c8      	b.n	80071da <HAL_UART_Init+0x396>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007248:	f7fe fca6 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 800724c:	e764      	b.n	8007118 <HAL_UART_Init+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 800724e:	480f      	ldr	r0, [pc, #60]	; (800728c <HAL_UART_Init+0x448>)
 8007250:	e6a4      	b.n	8006f9c <HAL_UART_Init+0x158>
        pclk = (uint32_t) LSE_VALUE;
 8007252:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007256:	e6a1      	b.n	8006f9c <HAL_UART_Init+0x158>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007258:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_UART_Init+0x440>)
        pclk = (uint32_t) HSI_VALUE;
 800725e:	480b      	ldr	r0, [pc, #44]	; (800728c <HAL_UART_Init+0x448>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007260:	f47f ae9c 	bne.w	8006f9c <HAL_UART_Init+0x158>
 8007264:	e735      	b.n	80070d2 <HAL_UART_Init+0x28e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fe fc47 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 800726a:	e755      	b.n	8007118 <HAL_UART_Init+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 800726c:	4807      	ldr	r0, [pc, #28]	; (800728c <HAL_UART_Init+0x448>)
 800726e:	e730      	b.n	80070d2 <HAL_UART_Init+0x28e>
        pclk = (uint32_t) LSE_VALUE;
 8007270:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007274:	e72d      	b.n	80070d2 <HAL_UART_Init+0x28e>
        pclk = (uint32_t) HSI_VALUE;
 8007276:	4805      	ldr	r0, [pc, #20]	; (800728c <HAL_UART_Init+0x448>)
 8007278:	e7b2      	b.n	80071e0 <HAL_UART_Init+0x39c>
 800727a:	4b02      	ldr	r3, [pc, #8]	; (8007284 <HAL_UART_Init+0x440>)
 800727c:	e729      	b.n	80070d2 <HAL_UART_Init+0x28e>
 800727e:	bf00      	nop
 8007280:	40021000 	.word	0x40021000
 8007284:	08009d68 	.word	0x08009d68
 8007288:	000ffcff 	.word	0x000ffcff
 800728c:	00f42400 	.word	0x00f42400

08007290 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007290:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007294:	2a01      	cmp	r2, #1
 8007296:	d017      	beq.n	80072c8 <HAL_UARTEx_DisableFifoMode+0x38>
{
 8007298:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800729a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800729c:	2124      	movs	r1, #36	; 0x24
 800729e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 80072a2:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072a4:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072a6:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072a8:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072aa:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80072ae:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80072b2:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 80072b4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072b6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072b8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80072ba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80072bc:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80072c0:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 80072c4:	bc30      	pop	{r4, r5}
 80072c6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80072c8:	2002      	movs	r0, #2
}
 80072ca:	4770      	bx	lr

080072cc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072cc:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80072d0:	2a01      	cmp	r2, #1
 80072d2:	d049      	beq.n	8007368 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80072d4:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 80072d6:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d8:	681a      	ldr	r2, [r3, #0]
{
 80072da:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80072dc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072e0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e2:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072e4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80072e6:	f020 0001 	bic.w	r0, r0, #1
 80072ea:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072ec:	6890      	ldr	r0, [r2, #8]
 80072ee:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
{
 80072f2:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072f4:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80072f6:	481d      	ldr	r0, [pc, #116]	; (800736c <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072f8:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80072fa:	f240 1107 	movw	r1, #263	; 0x107
 80072fe:	9000      	str	r0, [sp, #0]
 8007300:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007302:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 8007306:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 800730a:	f200 2006 	addw	r0, r0, #518	; 0x206
 800730e:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8007312:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007316:	b325      	cbz	r5, 8007362 <HAL_UARTEx_SetTxFifoThreshold+0x96>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007318:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800731a:	6896      	ldr	r6, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800731c:	a904      	add	r1, sp, #16
 800731e:	f3c5 6542 	ubfx	r5, r5, #25, #3
 8007322:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007324:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007328:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800732c:	f816 0c10 	ldrb.w	r0, [r6, #-16]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007330:	f815 7c08 	ldrb.w	r7, [r5, #-8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007334:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007338:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800733a:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800733c:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007340:	fb90 f0f5 	sdiv	r0, r0, r5
 8007344:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007348:	2100      	movs	r1, #0
 800734a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800734e:	2520      	movs	r5, #32
  return HAL_OK;
 8007350:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007352:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007354:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8007358:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800735c:	b004      	add	sp, #16
 800735e:	bcf0      	pop	{r4, r5, r6, r7}
 8007360:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8007362:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007364:	4608      	mov	r0, r1
 8007366:	e7ed      	b.n	8007344 <HAL_UARTEx_SetTxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 8007368:	2002      	movs	r0, #2
}
 800736a:	4770      	bx	lr
 800736c:	03010101 	.word	0x03010101

08007370 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007370:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007374:	2a01      	cmp	r2, #1
 8007376:	d049      	beq.n	800740c <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8007378:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800737a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800737c:	681a      	ldr	r2, [r3, #0]
{
 800737e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8007380:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007384:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007386:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007388:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800738a:	f020 0001 	bic.w	r0, r0, #1
 800738e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007390:	6890      	ldr	r0, [r2, #8]
 8007392:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
{
 8007396:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007398:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800739a:	481d      	ldr	r0, [pc, #116]	; (8007410 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800739c:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800739e:	f240 1107 	movw	r1, #263	; 0x107
 80073a2:	9000      	str	r0, [sp, #0]
 80073a4:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80073a6:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 80073aa:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 80073ae:	f200 2006 	addw	r0, r0, #518	; 0x206
 80073b2:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 80073b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073ba:	b325      	cbz	r5, 8007406 <HAL_UARTEx_SetRxFifoThreshold+0x96>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073bc:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073be:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	f3c5 6542 	ubfx	r5, r5, #25, #3
 80073c6:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073c8:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073cc:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073d0:	f816 0c10 	ldrb.w	r0, [r6, #-16]
                               (uint16_t)denominator[rx_fifo_threshold];
 80073d4:	f815 7c08 	ldrb.w	r7, [r5, #-8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073d8:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073dc:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073de:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e0:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e4:	fb90 f0f5 	sdiv	r0, r0, r5
 80073e8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80073ec:	2100      	movs	r1, #0
 80073ee:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80073f2:	2520      	movs	r5, #32
  return HAL_OK;
 80073f4:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f6:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073f8:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80073fc:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8007400:	b004      	add	sp, #16
 8007402:	bcf0      	pop	{r4, r5, r6, r7}
 8007404:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8007406:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007408:	4608      	mov	r0, r1
 800740a:	e7ed      	b.n	80073e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 800740c:	2002      	movs	r0, #2
}
 800740e:	4770      	bx	lr
 8007410:	03010101 	.word	0x03010101

08007414 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007414:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8007416:	8840      	ldrh	r0, [r0, #2]
 8007418:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 800741c:	0c00      	lsrs	r0, r0, #16
 800741e:	4770      	bx	lr

08007420 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8007420:	b410      	push	{r4}
 8007422:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007424:	8802      	ldrh	r2, [r0, #0]
 8007426:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8007428:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800742c:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8007430:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007434:	42a2      	cmp	r2, r4
{
 8007436:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007438:	d219      	bcs.n	800746e <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800743a:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 800743e:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8007442:	b2e4      	uxtb	r4, r4
 8007444:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8007448:	8882      	ldrh	r2, [r0, #4]
 800744a:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800744e:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8007450:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007454:	bfbc      	itt	lt
 8007456:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 800745a:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800745c:	2b00      	cmp	r3, #0
 800745e:	bfbc      	itt	lt
 8007460:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8007464:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007466:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800746a:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800746e:	b289      	uxth	r1, r1
 8007470:	2000      	movs	r0, #0
 8007472:	b29b      	uxth	r3, r3
 8007474:	f361 000f 	bfi	r0, r1, #0, #16
 8007478:	f363 401f 	bfi	r0, r3, #16, #16
}
 800747c:	b005      	add	sp, #20
 800747e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007482:	4770      	bx	lr

08007484 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8007484:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8007486:	2400      	movs	r4, #0
 8007488:	7384      	strb	r4, [r0, #14]
  pHandle->EncRestart = false;
 800748a:	73c4      	strb	r4, [r0, #15]
  pHandle->pVSS = pVSS;
 800748c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pENC = pENC;
 8007490:	6083      	str	r3, [r0, #8]
}
 8007492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007496:	4770      	bx	lr

08007498 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8007498:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800749a:	2200      	movs	r2, #0
{
 800749c:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800749e:	4611      	mov	r1, r2
 80074a0:	6840      	ldr	r0, [r0, #4]
 80074a2:	f002 fa8b 	bl	80099bc <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 80074a6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80074aa:	6860      	ldr	r0, [r4, #4]
 80074ac:	f002 fa7e 	bl	80099ac <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	2100      	movs	r1, #0
 80074b4:	f001 fd5c 	bl	8008f70 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 80074b8:	2200      	movs	r2, #0
 80074ba:	4611      	mov	r1, r2
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	f001 fd5b 	bl	8008f78 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 80074c2:	8ae2      	ldrh	r2, [r4, #22]
 80074c4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	f001 fd55 	bl	8008f78 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 80074ce:	8ae1      	ldrh	r1, [r4, #22]
 80074d0:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 80074d2:	4a04      	ldr	r2, [pc, #16]	; (80074e4 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 80074d4:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 80074d8:	fba2 2303 	umull	r2, r3, r2, r3
 80074dc:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 80074de:	3301      	adds	r3, #1
 80074e0:	81a3      	strh	r3, [r4, #12]
}
 80074e2:	bd10      	pop	{r4, pc}
 80074e4:	10624dd3 	.word	0x10624dd3

080074e8 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 80074e8:	8983      	ldrh	r3, [r0, #12]
 80074ea:	b12b      	cbz	r3, 80074f8 <EAC_Exec+0x10>
  {
    pHandle->hRemainingTicks--;
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 80074f2:	b11b      	cbz	r3, 80074fc <EAC_Exec+0x14>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 80074f4:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 80074f6:	4770      	bx	lr
  bool retVal = true;
 80074f8:	2001      	movs	r0, #1
 80074fa:	4770      	bx	lr
{
 80074fc:	b510      	push	{r4, lr}
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 80074fe:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8007502:	7e03      	ldrb	r3, [r0, #24]
 8007504:	fb91 f1f3 	sdiv	r1, r1, r3
 8007508:	4604      	mov	r4, r0
 800750a:	6880      	ldr	r0, [r0, #8]
 800750c:	f000 f944 	bl	8007798 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 8007510:	2001      	movs	r0, #1
 8007512:	73a0      	strb	r0, [r4, #14]
}
 8007514:	bd10      	pop	{r4, pc}
 8007516:	bf00      	nop

08007518 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 8007518:	7b80      	ldrb	r0, [r0, #14]
 800751a:	4770      	bx	lr

0800751c <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 800751c:	73c1      	strb	r1, [r0, #15]
}
 800751e:	4770      	bx	lr

08007520 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 8007520:	7bc0      	ldrb	r0, [r0, #15]
 8007522:	4770      	bx	lr

08007524 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007524:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007526:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 800752a:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 800752c:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 800752e:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007532:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007536:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007538:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 800753a:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800753e:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007540:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8007544:	6259      	str	r1, [r3, #36]	; 0x24
 8007546:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 800754a:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 800754c:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800754e:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007550:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8007554:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007558:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800755c:	619a      	str	r2, [r3, #24]
 800755e:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007560:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8007564:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007568:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800756c:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007570:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007572:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8007584:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8007588:	b13a      	cbz	r2, 800759a <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800758a:	3a01      	subs	r2, #1
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	3201      	adds	r2, #1
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	3028      	adds	r0, #40	; 0x28
  }
}
 8007594:	bc70      	pop	{r4, r5, r6}
 8007596:	f002 ba97 	b.w	8009ac8 <memset>
 800759a:	bc70      	pop	{r4, r5, r6}
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop

080075a0 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 80075a0:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 80075a2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 80075a6:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 80075a8:	b13a      	cbz	r2, 80075ba <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 80075aa:	3a01      	subs	r2, #1
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	3201      	adds	r2, #1
 80075b0:	0092      	lsls	r2, r2, #2
 80075b2:	2100      	movs	r1, #0
 80075b4:	3028      	adds	r0, #40	; 0x28
 80075b6:	f002 fa87 	bl	8009ac8 <memset>
  }
  pHandle->SensorIsReliable = true;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	bf00      	nop

080075c4 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 80075c4:	6a01      	ldr	r1, [r0, #32]
 80075c6:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 80075c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 80075ca:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 80075cc:	b289      	uxth	r1, r1
 80075ce:	fb03 f301 	mul.w	r3, r3, r1
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80075d2:	2b00      	cmp	r3, #0
{
 80075d4:	4602      	mov	r2, r0
 80075d6:	bfbc      	itt	lt
 80075d8:	f64f 70ff 	movwlt	r0, #65535	; 0xffff
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80075dc:	181b      	addlt	r3, r3, r0
 80075de:	141b      	asrs	r3, r3, #16

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80075e0:	f9b2 1006 	ldrsh.w	r1, [r2, #6]

  pHandle->_Super.hMecAngle = mecAngle;
  
  /*Computes and stores the rotor electrical angle*/
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80075e4:	7850      	ldrb	r0, [r2, #1]

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80075e6:	6894      	ldr	r4, [r2, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80075e8:	80d3      	strh	r3, [r2, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80075ea:	b29b      	uxth	r3, r3
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80075ec:	1a59      	subs	r1, r3, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80075ee:	fb10 f303 	smulbb	r3, r0, r3
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80075f2:	fa04 f181 	sxtah	r1, r4, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80075f6:	b218      	sxth	r0, r3
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80075f8:	6091      	str	r1, [r2, #8]
  pHandle->_Super.hElAngle = elAngle;
 80075fa:	8090      	strh	r0, [r2, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 80075fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop

08007604 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8007604:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007606:	6a02      	ldr	r2, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8007608:	f890 7075 	ldrb.w	r7, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800760c:	68d3      	ldr	r3, [r2, #12]
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	60d3      	str	r3, [r2, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007614:	6a54      	ldr	r4, [r2, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
 8007616:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 800761a:	ea5f 7cd4 	movs.w	ip, r4, lsr #31
  pHandle->TimerOverflowNb = 0;
 800761e:	f04f 0600 	mov.w	r6, #0
 8007622:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007626:	bf18      	it	ne
 8007628:	f06f 0601 	mvnne.w	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800762c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800762e:	bf18      	it	ne
 8007630:	6116      	strne	r6, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007632:	68d6      	ldr	r6, [r2, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8007634:	b2ad      	uxth	r5, r5
 8007636:	f046 0601 	orr.w	r6, r6, #1
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 800763a:	4465      	add	r5, ip
 800763c:	60d6      	str	r6, [r2, #12]
 800763e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007642:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8007646:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 800764a:	bf98      	it	ls
 800764c:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8007650:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  {
    pHandle->TimerOverflowError = true;
 8007654:	bf88      	it	hi
 8007656:	2601      	movhi	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	bf88      	it	hi
 800765e:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
 8007662:	1aa2      	subs	r2, r4, r2
 8007664:	fb0c f505 	mul.w	r5, ip, r5
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8087 	beq.w	800777c <ENC_CalcAvrgMecSpeedUnit+0x178>
    /* encoder timer down-counting*/
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800766e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8007672:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007674:	1b52      	subs	r2, r2, r5
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007676:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800767a:	2f00      	cmp	r7, #0
 800767c:	f000 8087 	beq.w	800778e <ENC_CalcAvrgMecSpeedUnit+0x18a>
 8007680:	2f01      	cmp	r7, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007682:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007684:	d939      	bls.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007686:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007688:	2f02      	cmp	r7, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800768a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800768c:	d035      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800768e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007690:	2f03      	cmp	r7, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007692:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007694:	d031      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007696:	6b42      	ldr	r2, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007698:	2f04      	cmp	r7, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800769a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800769c:	d02d      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800769e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076a0:	2f05      	cmp	r7, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076a2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076a4:	d029      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076a8:	2f06      	cmp	r7, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076aa:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076ac:	d025      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076b0:	2f07      	cmp	r7, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076b2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076b4:	d021      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076b8:	2f08      	cmp	r7, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ba:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076bc:	d01d      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076be:	6c82      	ldr	r2, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076c0:	2f09      	cmp	r7, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076c2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076c4:	d019      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076c6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076c8:	2f0a      	cmp	r7, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ca:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076cc:	d015      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076d0:	2f0b      	cmp	r7, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076d2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076d4:	d011      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076d6:	6d42      	ldr	r2, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076d8:	2f0c      	cmp	r7, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076da:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076dc:	d00d      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076de:	6d82      	ldr	r2, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076e0:	2f0d      	cmp	r7, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076e2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076e4:	d009      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076e6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076e8:	2f0e      	cmp	r7, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ea:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076ec:	d005      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ee:	6e02      	ldr	r2, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076f0:	2f0f      	cmp	r7, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076f2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80076f4:	d001      	beq.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076f6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80076f8:	4413      	add	r3, r2
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 80076fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 80076fc:	fb0c f707 	mul.w	r7, ip, r7
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8007700:	fb02 f303 	mul.w	r3, r2, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8007704:	fb93 f3f7 	sdiv	r3, r3, r7
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8007708:	b21f      	sxth	r7, r3
 800770a:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 800770c:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8007710:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007714:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8007718:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 800771a:	320a      	adds	r2, #10
  pHandle->DeltaCapturesIndex++;
 800771c:	3501      	adds	r5, #1
 800771e:	b2ed      	uxtb	r5, r5
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007720:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  pHandle->DeltaCapturesIndex++;
 8007724:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8007728:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
  pHandle->PreviousCapture = CntCapture;
 800772c:	f8a0 4072 	strh.w	r4, [r0, #114]	; 0x72
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007730:	eba3 030c 	sub.w	r3, r3, ip
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007734:	fb07 f505 	mul.w	r5, r7, r5

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8007738:	f890 c075 	ldrb.w	ip, [r0, #117]	; 0x75
 800773c:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8007740:	7844      	ldrb	r4, [r0, #1]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007742:	69c2      	ldr	r2, [r0, #28]
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007744:	8243      	strh	r3, [r0, #18]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8007746:	45bc      	cmp	ip, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007748:	fb04 f305 	mul.w	r3, r4, r5
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 800774c:	f8b0 406e 	ldrh.w	r4, [r0, #110]	; 0x6e
 8007750:	fb93 f3f4 	sdiv	r3, r3, r4
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007754:	fb02 f203 	mul.w	r2, r2, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8007758:	8b43      	ldrh	r3, [r0, #26]
 800775a:	fb92 f2f3 	sdiv	r2, r2, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 800775e:	bf08      	it	eq
 8007760:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8007762:	81c2      	strh	r2, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8007764:	bf08      	it	eq
 8007766:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 800776a:	b196      	cbz	r6, 8007792 <ENC_CalcAvrgMecSpeedUnit+0x18e>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800776c:	78c2      	ldrb	r2, [r0, #3]
 800776e:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8007770:	2300      	movs	r3, #0
 8007772:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8007776:	bcf0      	pop	{r4, r5, r6, r7}
 8007778:	4618      	mov	r0, r3
 800777a:	4770      	bx	lr
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800777c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8007780:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007782:	442a      	add	r2, r5
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007784:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007788:	2f00      	cmp	r7, #0
 800778a:	f47f af79 	bne.w	8007680 <ENC_CalcAvrgMecSpeedUnit+0x7c>
  int32_t wOverallAngleVariation = 0;
 800778e:	463b      	mov	r3, r7
 8007790:	e7b3      	b.n	80076fa <ENC_CalcAvrgMecSpeedUnit+0xf6>
}
 8007792:	bcf0      	pop	{r4, r5, r6, r7}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8007794:	f001 bb82 	b.w	8008e9c <SPD_IsMecSpeedReliable>

08007798 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007798:	7842      	ldrb	r2, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 800779a:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 800779c:	b28b      	uxth	r3, r1
 800779e:	fb12 f203 	smulbb	r2, r2, r3
  if ( hMecAngle < 0 )
 80077a2:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 80077a4:	8082      	strh	r2, [r0, #4]
 80077a6:	bfb8      	it	lt
 80077a8:	f103 33ff 	addlt.w	r3, r3, #4294967295
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80077ac:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 80077ae:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 80077b2:	4905      	ldr	r1, [pc, #20]	; (80077c8 <ENC_SetMecAngle+0x30>)
 80077b4:	bfb8      	it	lt
 80077b6:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 80077b8:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 80077bc:	fba1 1303 	umull	r1, r3, r1, r3
 80077c0:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 80077c2:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	80008001 	.word	0x80008001

080077cc <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 80077cc:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 80077ce:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 80077d0:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 80077d4:	3301      	adds	r3, #1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	8243      	strh	r3, [r0, #18]
 80077e4:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80077e6:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80077ea:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80077ee:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80077f2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 80077f6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 80077fa:	4770      	bx	lr

080077fc <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 80077fc:	b120      	cbz	r0, 8007808 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 80077fe:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8007802:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	60c3      	str	r3, [r0, #12]
  }
}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 800780c:	b190      	cbz	r0, 8007834 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800780e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8007810:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8007812:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007814:	b151      	cbz	r1, 800782c <FCP_CalcCRC+0x20>
 8007816:	1e4a      	subs	r2, r1, #1
 8007818:	1c81      	adds	r1, r0, #2
 800781a:	fa51 f282 	uxtab	r2, r1, r2
 800781e:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8007820:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8007824:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007826:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 8007828:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800782a:	d1f9      	bne.n	8007820 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800782c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8007830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop

08007838 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8007838:	b508      	push	{r3, lr}
 800783a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800783e:	2100      	movs	r1, #0
 8007840:	f002 f942 	bl	8009ac8 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8007844:	2200      	movs	r2, #0
 8007846:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 800784a:	bd08      	pop	{r3, pc}

0800784c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800784c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8007850:	1c53      	adds	r3, r2, #1
 8007852:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007854:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007856:	bf88      	it	hi
 8007858:	2300      	movhi	r3, #0
{
 800785a:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800785c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8007860:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007864:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007868:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 800786c:	2200      	movs	r2, #0
 800786e:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007870:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007874:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007876:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007878:	d1fa      	bne.n	8007870 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800787a:	2a00      	cmp	r2, #0
 800787c:	bfb8      	it	lt
 800787e:	327f      	addlt	r2, #127	; 0x7f
 8007880:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007882:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007886:	bc30      	pop	{r4, r5}
 8007888:	4608      	mov	r0, r1
 800788a:	4770      	bx	lr

0800788c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 800788c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop

08007894 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007894:	8a03      	ldrh	r3, [r0, #16]
 8007896:	8b42      	ldrh	r2, [r0, #26]
 8007898:	429a      	cmp	r2, r3
 800789a:	d306      	bcc.n	80078aa <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800789c:	8b82      	ldrh	r2, [r0, #28]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d801      	bhi.n	80078a6 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 80078a2:	8ac0      	ldrh	r0, [r0, #22]
 80078a4:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 80078a6:	2000      	movs	r0, #0
  }
  return hFault;
}
 80078a8:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80078aa:	2008      	movs	r0, #8
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80078b0:	2300      	movs	r3, #0
 80078b2:	8203      	strh	r3, [r0, #16]
}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop

080078b8 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 80078b8:	7803      	ldrb	r3, [r0, #0]
 80078ba:	b123      	cbz	r3, 80078c6 <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 80078bc:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80078be:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 80078c0:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80078c2:	8203      	strh	r3, [r0, #16]
 80078c4:	4770      	bx	lr
{
 80078c6:	b510      	push	{r4, lr}
 80078c8:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80078ca:	3004      	adds	r0, #4
 80078cc:	f7fa fd64 	bl	8002398 <RCM_RegisterRegConv>
 80078d0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7ff ffeb 	bl	80078b0 <NTC_Clear>
}
 80078da:	bd10      	pop	{r4, pc}

080078dc <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80078dc:	7803      	ldrb	r3, [r0, #0]
 80078de:	b11b      	cbz	r3, 80078e8 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80078e0:	2300      	movs	r3, #0
 80078e2:	82c3      	strh	r3, [r0, #22]
 80078e4:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 80078e6:	4770      	bx	lr
{
 80078e8:	b510      	push	{r4, lr}
 80078ea:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80078ec:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80078f0:	f7fa fe22 	bl	8002538 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80078f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f8:	4298      	cmp	r0, r3
 80078fa:	d007      	beq.n	800790c <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80078fc:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80078fe:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007900:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8007902:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007906:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800790a:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800790c:	4620      	mov	r0, r4
 800790e:	f7ff ffc1 	bl	8007894 <NTC_SetFaultState>
 8007912:	82e0      	strh	r0, [r4, #22]
}
 8007914:	bd10      	pop	{r4, pc}
 8007916:	bf00      	nop

08007918 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007918:	7803      	ldrb	r3, [r0, #0]
 800791a:	b113      	cbz	r3, 8007922 <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800791c:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 800791e:	b200      	sxth	r0, r0
 8007920:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8007922:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007924:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007926:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800792a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 800792c:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 800792e:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007932:	2b00      	cmp	r3, #0
 8007934:	bfbc      	itt	lt
 8007936:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 800793a:	33ff      	addlt	r3, #255	; 0xff
 800793c:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8007940:	b200      	sxth	r0, r0
 8007942:	4770      	bx	lr

08007944 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8007944:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007946:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007948:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800794a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800794c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800794e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8007950:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007952:	4770      	bx	lr

08007954 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007954:	8081      	strh	r1, [r0, #4]
}
 8007956:	4770      	bx	lr

08007958 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007958:	80c1      	strh	r1, [r0, #6]
}
 800795a:	4770      	bx	lr

0800795c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 800795c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007964:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop

0800796c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 800796c:	6081      	str	r1, [r0, #8]

  return;
}
 800796e:	4770      	bx	lr

08007970 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8007970:	8b00      	ldrh	r0, [r0, #24]
 8007972:	4770      	bx	lr

08007974 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8007974:	8b40      	ldrh	r0, [r0, #26]
 8007976:	4770      	bx	lr

08007978 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8007978:	8441      	strh	r1, [r0, #34]	; 0x22
}
 800797a:	4770      	bx	lr

0800797c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 800797c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop

08007984 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007984:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8007988:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 800798c:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800798e:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007992:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007996:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 800799a:	b18b      	cbz	r3, 80079c0 <PI_Controller+0x3c>
 800799c:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80079a0:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 80079a4:	187b      	adds	r3, r7, r1
 80079a6:	d424      	bmi.n	80079f2 <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80079a8:	2f00      	cmp	r7, #0
 80079aa:	da04      	bge.n	80079b6 <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 80079ac:	4f16      	ldr	r7, [pc, #88]	; (8007a08 <PI_Controller+0x84>)
 80079ae:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 80079b2:	bf28      	it	cs
 80079b4:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	dc03      	bgt.n	80079c2 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80079ba:	6904      	ldr	r4, [r0, #16]
 80079bc:	429c      	cmp	r4, r3
 80079be:	dc00      	bgt.n	80079c2 <PI_Controller+0x3e>
 80079c0:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80079c2:	8b81      	ldrh	r1, [r0, #28]
 80079c4:	8bc3      	ldrh	r3, [r0, #30]
 80079c6:	410a      	asrs	r2, r1
 80079c8:	fa44 f303 	asr.w	r3, r4, r3
 80079cc:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80079ce:	429d      	cmp	r5, r3
 80079d0:	db08      	blt.n	80079e4 <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 80079d2:	429e      	cmp	r6, r3
 80079d4:	dd02      	ble.n	80079dc <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 80079d6:	1af3      	subs	r3, r6, r3
 80079d8:	441c      	add	r4, r3
 80079da:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80079dc:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 80079de:	b218      	sxth	r0, r3
}
 80079e0:	bcf0      	pop	{r4, r5, r6, r7}
 80079e2:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 80079e4:	1aeb      	subs	r3, r5, r3
 80079e6:	441c      	add	r4, r3
 80079e8:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 80079ea:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 80079ec:	b218      	sxth	r0, r3
}
 80079ee:	bcf0      	pop	{r4, r5, r6, r7}
 80079f0:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 80079f2:	2f00      	cmp	r7, #0
 80079f4:	dddf      	ble.n	80079b6 <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 80079f6:	2900      	cmp	r1, #0
 80079f8:	dddd      	ble.n	80079b6 <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80079fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80079fe:	429c      	cmp	r4, r3
 8007a00:	d1df      	bne.n	80079c2 <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8007a02:	4623      	mov	r3, r4
 8007a04:	e7dc      	b.n	80079c0 <PI_Controller+0x3c>
 8007a06:	bf00      	nop
 8007a08:	80000001 	.word	0x80000001

08007a0c <PID_Controller>:
{
  int32_t wDifferential_Term;
  int32_t wDeltaError;
  int32_t wTemp_output;

  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8007a0c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
{
 8007a10:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8007a12:	b1b3      	cbz	r3, 8007a42 <PID_Controller+0x36>
  {
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007a14:	6a84      	ldr	r4, [r0, #40]	; 0x28
#else
    /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right)
    is used by the compiler to perform the shifts (instead of LSR
    logical shift right)*/
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007a16:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8007a18:	4605      	mov	r5, r0
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007a1a:	1b0c      	subs	r4, r1, r4
    wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8007a1c:	fb03 f304 	mul.w	r3, r3, r4
#endif

    pHandle->wPrevProcessVarError = wProcessVarError;
 8007a20:	62a9      	str	r1, [r5, #40]	; 0x28
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007a22:	fa43 f606 	asr.w	r6, r3, r6

    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8007a26:	f7ff ffad 	bl	8007984 <PI_Controller>

    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8007a2a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8007a2e:	4430      	add	r0, r6
    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8007a30:	4283      	cmp	r3, r0
 8007a32:	db04      	blt.n	8007a3e <PID_Controller+0x32>
    {
      wTemp_output = pHandle->hUpperOutputLimit;
    }
    else if ( wTemp_output < pHandle->hLowerOutputLimit )
 8007a34:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	bfb8      	it	lt
 8007a3c:	4603      	movlt	r3, r0
  else
  {
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
  }
  return ( ( int16_t ) wTemp_output );
}
 8007a3e:	b218      	sxth	r0, r3
 8007a40:	bd70      	pop	{r4, r5, r6, pc}
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
 8007a42:	f7ff ff9f 	bl	8007984 <PI_Controller>
 8007a46:	4603      	mov	r3, r0
}
 8007a48:	b218      	sxth	r0, r3
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}

08007a4c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007a4c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8007a50:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007a52:	8b0c      	ldrh	r4, [r1, #24]
 8007a54:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007a56:	898a      	ldrh	r2, [r1, #12]
 8007a58:	8acb      	ldrh	r3, [r1, #22]
{
 8007a5a:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007a5c:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007a60:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8007a64:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007a68:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007a6c:	f7ff fcd2 	bl	8007414 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8007a70:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8007a74:	490f      	ldr	r1, [pc, #60]	; (8007ab4 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007a76:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8007a7a:	bfb8      	it	lt
 8007a7c:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007a80:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 8007a84:	bfb8      	it	lt
 8007a86:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007a88:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8007a8a:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007a8c:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8007a90:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007a94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007a98:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8007a9a:	fb81 2103 	smull	r2, r1, r1, r3
 8007a9e:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007aaa:	f7ff becf 	b.w	800784c <MPM_CalcElMotorPower>
 8007aae:	bf00      	nop
 8007ab0:	1b4e81b5 	.word	0x1b4e81b5
 8007ab4:	66666667 	.word	0x66666667

08007ab8 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8007ab8:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8007aba:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <startTimers+0x64>)
 8007abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007abe:	07d2      	lsls	r2, r2, #31
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	d415      	bmi.n	8007af0 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007acc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ace:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007ad2:	f002 0201 	and.w	r2, r2, #1
 8007ad6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007ad8:	9a01      	ldr	r2, [sp, #4]
 8007ada:	694a      	ldr	r2, [r1, #20]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8007ae2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8007aea:	b002      	add	sp, #8
 8007aec:	bc30      	pop	{r4, r5}
 8007aee:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8007af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007af4:	4c0a      	ldr	r4, [pc, #40]	; (8007b20 <startTimers+0x68>)
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	6859      	ldr	r1, [r3, #4]
 8007afa:	4d0a      	ldr	r5, [pc, #40]	; (8007b24 <startTimers+0x6c>)
 8007afc:	4021      	ands	r1, r4
 8007afe:	f041 0120 	orr.w	r1, r1, #32
 8007b02:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007b04:	6958      	ldr	r0, [r3, #20]
 8007b06:	f040 0001 	orr.w	r0, r0, #1
 8007b0a:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b0c:	6859      	ldr	r1, [r3, #4]
 8007b0e:	402a      	ands	r2, r5
 8007b10:	4021      	ands	r1, r4
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
}
 8007b16:	b002      	add	sp, #8
 8007b18:	bc30      	pop	{r4, r5}
 8007b1a:	4770      	bx	lr
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	fdffff8f 	.word	0xfdffff8f
 8007b24:	02000070 	.word	0x02000070

08007b28 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007b28:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8007b2a:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8007b2c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8007b30:	3201      	adds	r2, #1
 8007b32:	2c60      	cmp	r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8007b34:	bf18      	it	ne
 8007b36:	0852      	lsrne	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007b38:	f06f 0602 	mvn.w	r6, #2
 8007b3c:	0155      	lsls	r5, r2, #5
 8007b3e:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007b40:	2400      	movs	r4, #0
  while (*cnt < NB_CONVERSIONS)
 8007b42:	e002      	b.n	8007b4a <waitForPolarizationEnd+0x22>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007b44:	6902      	ldr	r2, [r0, #16]
 8007b46:	0792      	lsls	r2, r2, #30
 8007b48:	d404      	bmi.n	8007b54 <waitForPolarizationEnd+0x2c>
 8007b4a:	781a      	ldrb	r2, [r3, #0]
 8007b4c:	2a0f      	cmp	r2, #15
 8007b4e:	d9f9      	bls.n	8007b44 <waitForPolarizationEnd+0x1c>
          break;
        }
      }
    }
  }
}
 8007b50:	bc70      	pop	{r4, r5, r6}
 8007b52:	4770      	bx	lr
      hCalibrationPeriodCounter++;
 8007b54:	3401      	adds	r4, #1
 8007b56:	b2a4      	uxth	r4, r4
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007b58:	42a5      	cmp	r5, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007b5a:	6106      	str	r6, [r0, #16]
 8007b5c:	d8f5      	bhi.n	8007b4a <waitForPolarizationEnd+0x22>
        if (*cnt < NB_CONVERSIONS)
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	2a0f      	cmp	r2, #15
 8007b62:	d8f2      	bhi.n	8007b4a <waitForPolarizationEnd+0x22>
          *SWerror = 1u;
 8007b64:	2301      	movs	r3, #1
 8007b66:	800b      	strh	r3, [r1, #0]
          break;
 8007b68:	e7f2      	b.n	8007b50 <waitForPolarizationEnd+0x28>
 8007b6a:	bf00      	nop

08007b6c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8007b6c:	6843      	ldr	r3, [r0, #4]
 8007b6e:	4718      	bx	r3

08007b70 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8007b70:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007b72:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007b76:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007b78:	140c      	asrs	r4, r1, #16
{
 8007b7a:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007b7c:	fb02 f404 	mul.w	r4, r2, r4
{
 8007b80:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007b82:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007b86:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007b88:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007b8a:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007b8e:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007b90:	4421      	add	r1, r4
 8007b92:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007b96:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8007b9a:	106d      	asrs	r5, r5, #1
 8007b9c:	ea4f 0292 	mov.w	r2, r2, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007ba0:	ea4f 0666 	mov.w	r6, r6, asr #1
  if ( wY < 0 )
 8007ba4:	d46e      	bmi.n	8007c84 <PWMC_SetPhaseVoltage+0x114>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	db4c      	blt.n	8007c44 <PWMC_SetPhaseVoltage+0xd4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007baa:	1bad      	subs	r5, r5, r6
 8007bac:	bf44      	itt	mi
 8007bae:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007bb2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bfbc      	itt	lt
 8007bba:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8007bbe:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	bfb8      	it	lt
 8007bc6:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007bca:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007bce:	bfb8      	it	lt
 8007bd0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8007bd4:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8007bd6:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007bda:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 8007bde:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8007be2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8007be6:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007be8:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8007bea:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8007bee:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007bf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007bf6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	b289      	uxth	r1, r1
 8007c00:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8007c02:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8007c04:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8007c06:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8007c08:	d118      	bne.n	8007c3c <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8007c0a:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
 8007c0e:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8007c12:	2d00      	cmp	r5, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8007c14:	bfcc      	ite	gt
 8007c16:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8007c18:	1b12      	suble	r2, r2, r4
 8007c1a:	b292      	uxth	r2, r2
    }

    if ( pHandle->Ib > 0 )
 8007c1c:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
 8007c20:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8007c22:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8007c26:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8007c28:	bfcc      	ite	gt
 8007c2a:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007c2c:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8007c2e:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007c30:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8007c32:	bfcc      	ite	gt
 8007c34:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8007c36:	1b09      	suble	r1, r1, r4
 8007c38:	8683      	strh	r3, [r0, #52]	; 0x34
 8007c3a:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007c3c:	6983      	ldr	r3, [r0, #24]
}
 8007c3e:	b003      	add	sp, #12
 8007c40:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007c42:	4718      	bx	r3
      if ( wX <= 0 )
 8007c44:	2c00      	cmp	r4, #0
 8007c46:	dd3c      	ble.n	8007cc2 <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bfb8      	it	lt
 8007c4c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8007c50:	f04f 0100 	mov.w	r1, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8007c54:	bfb8      	it	lt
 8007c56:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007c5a:	1ba5      	subs	r5, r4, r6
        pHandle->Sector = SECTOR_1;
 8007c5c:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8007c60:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007c62:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007c66:	bfb8      	it	lt
 8007c68:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8007c6c:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007c70:	bfb8      	it	lt
 8007c72:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8007c76:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhC;
 8007c7a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8007c7e:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8007c80:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8007c82:	e7b2      	b.n	8007bea <PWMC_SetPhaseVoltage+0x7a>
    if ( wZ < 0 )
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	db5d      	blt.n	8007d44 <PWMC_SetPhaseVoltage+0x1d4>
      if ( wX <= 0 )
 8007c88:	2c00      	cmp	r4, #0
 8007c8a:	dd38      	ble.n	8007cfe <PWMC_SetPhaseVoltage+0x18e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007c8c:	1b2d      	subs	r5, r5, r4
 8007c8e:	bf44      	itt	mi
 8007c90:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007c94:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	bfb8      	it	lt
 8007c9c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007ca0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8007ca4:	bfb8      	it	lt
 8007ca6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_3;
 8007caa:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 8007cac:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_3;
 8007cb0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8007cb4:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8007cb8:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007cba:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8007cbc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007cc0:	e793      	b.n	8007bea <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	bfb8      	it	lt
 8007cc6:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8007cca:	f04f 0305 	mov.w	r3, #5
        wTimePhC = wTimePhA - wY / 131072;
 8007cce:	bfb8      	it	lt
 8007cd0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007cd4:	1b2d      	subs	r5, r5, r4
        pHandle->Sector = SECTOR_6;
 8007cd6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8007cda:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007cdc:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007ce0:	bfb8      	it	lt
 8007ce2:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8007ce6:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007cea:	bfb8      	it	lt
 8007cec:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8007cf0:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhB;
 8007cf4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8007cf8:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007cfa:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8007cfc:	e775      	b.n	8007bea <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007cfe:	1ba5      	subs	r5, r4, r6
 8007d00:	bf44      	itt	mi
 8007d02:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007d06:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bfb8      	it	lt
 8007d0e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8007d12:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8007d16:	bfb8      	it	lt
 8007d18:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8007d1c:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8007d20:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007d22:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007d26:	bfb8      	it	lt
 8007d28:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8007d2c:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007d30:	bfb8      	it	lt
 8007d32:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8007d36:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhC;
 8007d3a:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8007d3c:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8007d3e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007d42:	e752      	b.n	8007bea <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007d44:	1bad      	subs	r5, r5, r6
 8007d46:	bf44      	itt	mi
 8007d48:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007d4c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfbc      	itt	lt
 8007d54:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8007d58:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	bfb8      	it	lt
 8007d60:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007d64:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007d68:	bfb8      	it	lt
 8007d6a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8007d6e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8007d70:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007d74:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_5;
 8007d78:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8007d7c:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007d7e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8007d80:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8007d84:	e731      	b.n	8007bea <PWMC_SetPhaseVoltage+0x7a>
 8007d86:	bf00      	nop

08007d88 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8007d88:	6883      	ldr	r3, [r0, #8]
 8007d8a:	4718      	bx	r3

08007d8c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4604      	mov	r4, r0
 8007d90:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8007d92:	b1a1      	cbz	r1, 8007dbe <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8007d94:	2901      	cmp	r1, #1
 8007d96:	d002      	beq.n	8007d9e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8007d98:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8007d9a:	b002      	add	sp, #8
 8007d9c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8007d9e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007da2:	b1d3      	cbz	r3, 8007dda <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	9101      	str	r1, [sp, #4]
 8007daa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f2      	bne.n	8007d98 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8007db2:	6903      	ldr	r3, [r0, #16]
 8007db4:	4798      	blx	r3
        retVal = true;
 8007db6:	9901      	ldr	r1, [sp, #4]
 8007db8:	4608      	mov	r0, r1
}
 8007dba:	b002      	add	sp, #8
 8007dbc:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 8007dbe:	f7ff ffe3 	bl	8007d88 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8007dc2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007dc6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e4      	bne.n	8007d98 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8007dce:	4620      	mov	r0, r4
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	4798      	blx	r3
      retVal = true;
 8007dd4:	2001      	movs	r0, #1
}
 8007dd6:	b002      	add	sp, #8
 8007dd8:	bd10      	pop	{r4, pc}
      retVal = true;
 8007dda:	4608      	mov	r0, r1
}
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd10      	pop	{r4, pc}

08007de0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8007de0:	69c3      	ldr	r3, [r0, #28]
 8007de2:	4718      	bx	r3

08007de4 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007de4:	6883      	ldr	r3, [r0, #8]
 8007de6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007dea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007dee:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007df0:	6883      	ldr	r3, [r0, #8]
 8007df2:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8007df4:	b082      	sub	sp, #8
 8007df6:	d417      	bmi.n	8007e28 <R3_2_ADCxInit+0x44>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8007df8:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8007dfa:	6882      	ldr	r2, [r0, #8]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4924      	ldr	r1, [pc, #144]	; (8007e90 <R3_2_ADCxInit+0xac>)
 8007e00:	099b      	lsrs	r3, r3, #6
 8007e02:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8007e06:	fba1 1303 	umull	r1, r3, r1, r3
 8007e0a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007e0e:	099b      	lsrs	r3, r3, #6
 8007e10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e14:	6082      	str	r2, [r0, #8]
 8007e16:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	b12b      	cbz	r3, 8007e28 <R3_2_ADCxInit+0x44>
    {
      wait_loop_index--;
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f9      	bne.n	8007e1c <R3_2_ADCxInit+0x38>
  MODIFY_REG(ADCx->CR,
 8007e28:	6883      	ldr	r3, [r0, #8]
 8007e2a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007e2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007e38:	6883      	ldr	r3, [r0, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dbfc      	blt.n	8007e38 <R3_2_ADCxInit+0x54>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007e3e:	6803      	ldr	r3, [r0, #0]
 8007e40:	07da      	lsls	r2, r3, #31
 8007e42:	d408      	bmi.n	8007e56 <R3_2_ADCxInit+0x72>
  MODIFY_REG(ADCx->CR,
 8007e44:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <R3_2_ADCxInit+0xb0>)
 8007e46:	6883      	ldr	r3, [r0, #8]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	f043 0301 	orr.w	r3, r3, #1
 8007e4e:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007e50:	6803      	ldr	r3, [r0, #0]
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d5f7      	bpl.n	8007e46 <R3_2_ADCxInit+0x62>
  MODIFY_REG(ADCx->CR,
 8007e56:	6882      	ldr	r2, [r0, #8]
 8007e58:	490e      	ldr	r1, [pc, #56]	; (8007e94 <R3_2_ADCxInit+0xb0>)
 8007e5a:	400a      	ands	r2, r1
 8007e5c:	f042 0208 	orr.w	r2, r2, #8
 8007e60:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007e62:	6882      	ldr	r2, [r0, #8]
 8007e64:	400a      	ands	r2, r1
 8007e66:	f042 0220 	orr.w	r2, r2, #32
 8007e6a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007e6c:	68c3      	ldr	r3, [r0, #12]
 8007e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e7a:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8007e7c:	6883      	ldr	r3, [r0, #8]
 8007e7e:	400b      	ands	r3, r1
 8007e80:	f043 0304 	orr.w	r3, r3, #4
 8007e84:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8007e86:	b002      	add	sp, #8
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	20000618 	.word	0x20000618
 8007e90:	053e2d63 	.word	0x053e2d63
 8007e94:	7fffffc0 	.word	0x7fffffc0

08007e98 <R3_2_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8007e98:	b4f0      	push	{r4, r5, r6, r7}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007e9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8007e9c:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007ea0:	689d      	ldr	r5, [r3, #8]
 8007ea2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007ea6:	2c05      	cmp	r4, #5
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8007ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8007eaa:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8007eac:	6813      	ldr	r3, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8007eae:	6836      	ldr	r6, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007eb0:	686a      	ldr	r2, [r5, #4]
 8007eb2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007eb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007eba:	606a      	str	r2, [r5, #4]
 8007ebc:	d821      	bhi.n	8007f02 <R3_2_GetPhaseCurrents+0x6a>
 8007ebe:	2501      	movs	r5, #1
 8007ec0:	fa05 f404 	lsl.w	r4, r5, r4
 8007ec4:	f014 0f21 	tst.w	r4, #33	; 0x21
 8007ec8:	d12c      	bne.n	8007f24 <R3_2_GetPhaseCurrents+0x8c>
 8007eca:	f014 0f06 	tst.w	r4, #6
 8007ece:	d044      	beq.n	8007f5a <R3_2_GetPhaseCurrents+0xc2>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007ed0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8007ed2:	4d53      	ldr	r5, [pc, #332]	; (8008020 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007ed4:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 8007ed6:	42ac      	cmp	r4, r5
 8007ed8:	da75      	bge.n	8007fc6 <R3_2_GetPhaseCurrents+0x12e>
 8007eda:	462c      	mov	r4, r5
      {
        Iab->a = -INT16_MAX;
 8007edc:	800d      	strh	r5, [r1, #0]
 8007ede:	462f      	mov	r7, r5
 8007ee0:	f248 0301 	movw	r3, #32769	; 0x8001
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8007ee4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007ee6:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8007ee8:	1b12      	subs	r2, r2, r4

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 8007eea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007eee:	da74      	bge.n	8007fda <R3_2_GetPhaseCurrents+0x142>
      {
        Iab->b = INT16_MAX;
      }
      else  if ( Aux < -INT16_MAX )
 8007ef0:	4c4b      	ldr	r4, [pc, #300]	; (8008020 <R3_2_GetPhaseCurrents+0x188>)
 8007ef2:	42a2      	cmp	r2, r4
 8007ef4:	db7d      	blt.n	8007ff2 <R3_2_GetPhaseCurrents+0x15a>
      {
        Iab->b = -INT16_MAX;
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 8007ef6:	fa0f fc82 	sxth.w	ip, r2
 8007efa:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007efe:	b292      	uxth	r2, r2
 8007f00:	e006      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
 8007f02:	f9b1 7000 	ldrsh.w	r7, [r1]
 8007f06:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8007f0a:	b2bb      	uxth	r3, r7
 8007f0c:	fa1f f28c 	uxth.w	r2, ip
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007f10:	4413      	add	r3, r2
 8007f12:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8007f14:	f8a0 7048 	strh.w	r7, [r0, #72]	; 0x48
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007f18:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 8007f1c:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
}
 8007f20:	bcf0      	pop	{r4, r5, r6, r7}
 8007f22:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007f24:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8007f26:	4d3e      	ldr	r5, [pc, #248]	; (8008020 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007f28:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 8007f2a:	42ac      	cmp	r4, r5
 8007f2c:	db35      	blt.n	8007f9a <R3_2_GetPhaseCurrents+0x102>
      else  if ( Aux > INT16_MAX )
 8007f2e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007f32:	db42      	blt.n	8007fba <R3_2_GetPhaseCurrents+0x122>
        Iab->b = INT16_MAX;
 8007f34:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007f38:	461a      	mov	r2, r3
 8007f3a:	804b      	strh	r3, [r1, #2]
 8007f3c:	461c      	mov	r4, r3
 8007f3e:	469c      	mov	ip, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8007f40:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8007f42:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8007f44:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8007f46:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007f4a:	da2c      	bge.n	8007fa6 <R3_2_GetPhaseCurrents+0x10e>
      else  if ( Aux < -INT16_MAX )
 8007f4c:	4f34      	ldr	r7, [pc, #208]	; (8008020 <R3_2_GetPhaseCurrents+0x188>)
 8007f4e:	42bc      	cmp	r4, r7
 8007f50:	da2f      	bge.n	8007fb2 <R3_2_GetPhaseCurrents+0x11a>
        Iab->a = -INT16_MAX;
 8007f52:	800f      	strh	r7, [r1, #0]
 8007f54:	f248 0301 	movw	r3, #32769	; 0x8001
 8007f58:	e7da      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
 8007f5a:	f014 0f18 	tst.w	r4, #24
 8007f5e:	d0d0      	beq.n	8007f02 <R3_2_GetPhaseCurrents+0x6a>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007f60:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8007f62:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007f64:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 8007f66:	4294      	cmp	r4, r2
 8007f68:	db41      	blt.n	8007fee <R3_2_GetPhaseCurrents+0x156>
      else  if ( Aux > INT16_MAX )
 8007f6a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
        Iab->a = INT16_MAX;
 8007f6e:	bfa6      	itte	ge
 8007f70:	f647 73ff 	movwge	r3, #32767	; 0x7fff
 8007f74:	800b      	strhge	r3, [r1, #0]
        Iab->a = ( int16_t )Aux;
 8007f76:	800c      	strhlt	r4, [r1, #0]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8007f78:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8007f7a:	4b29      	ldr	r3, [pc, #164]	; (8008020 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8007f7c:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	db3c      	blt.n	8007ffc <R3_2_GetPhaseCurrents+0x164>
      else  if ( Aux > INT16_MAX )
 8007f82:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007f86:	db41      	blt.n	800800c <R3_2_GetPhaseCurrents+0x174>
 8007f88:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = INT16_MAX;
 8007f8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007f90:	804b      	strh	r3, [r1, #2]
 8007f92:	461a      	mov	r2, r3
 8007f94:	469c      	mov	ip, r3
 8007f96:	b2bb      	uxth	r3, r7
 8007f98:	e7ba      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
 8007f9a:	462c      	mov	r4, r5
        Iab->b = -INT16_MAX;
 8007f9c:	804d      	strh	r5, [r1, #2]
 8007f9e:	46ac      	mov	ip, r5
 8007fa0:	f248 0201 	movw	r2, #32769	; 0x8001
 8007fa4:	e7cc      	b.n	8007f40 <R3_2_GetPhaseCurrents+0xa8>
        Iab->a = INT16_MAX;
 8007fa6:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007faa:	4623      	mov	r3, r4
 8007fac:	800c      	strh	r4, [r1, #0]
 8007fae:	4627      	mov	r7, r4
 8007fb0:	e7ae      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 8007fb2:	b227      	sxth	r7, r4
 8007fb4:	800f      	strh	r7, [r1, #0]
 8007fb6:	b2a3      	uxth	r3, r4
 8007fb8:	e7aa      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
        Iab->b = ( int16_t )Aux;
 8007fba:	fa0f fc84 	sxth.w	ip, r4
 8007fbe:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007fc2:	b2a2      	uxth	r2, r4
 8007fc4:	e7bc      	b.n	8007f40 <R3_2_GetPhaseCurrents+0xa8>
      else  if ( Aux > INT16_MAX )
 8007fc6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007fca:	db0c      	blt.n	8007fe6 <R3_2_GetPhaseCurrents+0x14e>
        Iab->a = INT16_MAX;
 8007fcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	800a      	strh	r2, [r1, #0]
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	4617      	mov	r7, r2
 8007fd8:	e784      	b.n	8007ee4 <R3_2_GetPhaseCurrents+0x4c>
        Iab->b = INT16_MAX;
 8007fda:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007fde:	4622      	mov	r2, r4
 8007fe0:	804c      	strh	r4, [r1, #2]
 8007fe2:	46a4      	mov	ip, r4
 8007fe4:	e794      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 8007fe6:	b227      	sxth	r7, r4
 8007fe8:	800f      	strh	r7, [r1, #0]
 8007fea:	b2a3      	uxth	r3, r4
 8007fec:	e77a      	b.n	8007ee4 <R3_2_GetPhaseCurrents+0x4c>
        Iab->a = -INT16_MAX;
 8007fee:	800a      	strh	r2, [r1, #0]
 8007ff0:	e7c2      	b.n	8007f78 <R3_2_GetPhaseCurrents+0xe0>
        Iab->b = -INT16_MAX;
 8007ff2:	804c      	strh	r4, [r1, #2]
 8007ff4:	46a4      	mov	ip, r4
 8007ff6:	f248 0201 	movw	r2, #32769	; 0x8001
 8007ffa:	e789      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
 8007ffc:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = -INT16_MAX;
 8008000:	804b      	strh	r3, [r1, #2]
 8008002:	469c      	mov	ip, r3
 8008004:	f248 0201 	movw	r2, #32769	; 0x8001
 8008008:	b2bb      	uxth	r3, r7
 800800a:	e781      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
 800800c:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = ( int16_t )Aux;
 8008010:	fa0f fc82 	sxth.w	ip, r2
 8008014:	b2bb      	uxth	r3, r7
 8008016:	f8a1 c002 	strh.w	ip, [r1, #2]
 800801a:	b292      	uxth	r2, r2
 800801c:	e778      	b.n	8007f10 <R3_2_GetPhaseCurrents+0x78>
 800801e:	bf00      	nop
 8008020:	ffff8001 	.word	0xffff8001

08008024 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8008024:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008026:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008028:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800802c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008030:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008034:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8008036:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008038:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800803a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800803c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800803e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008040:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008042:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008044:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008046:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008048:	4904      	ldr	r1, [pc, #16]	; (800805c <R3_2_SetADCSampPointPolarization+0x38>)
 800804a:	685b      	ldr	r3, [r3, #4]
}
 800804c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008050:	420b      	tst	r3, r1
}
 8008052:	bf14      	ite	ne
 8008054:	2001      	movne	r0, #1
 8008056:	2000      	moveq	r0, #0
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	02000070 	.word	0x02000070

08008060 <R3_2_SetADCSampPointSectX>:
{
 8008060:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8008062:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8008066:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8008068:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800806a:	1aca      	subs	r2, r1, r3
 800806c:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8008070:	b292      	uxth	r2, r2
 8008072:	42b2      	cmp	r2, r6
 8008074:	d914      	bls.n	80080a0 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8008076:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8008078:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800807a:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 800807c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008080:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8008082:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8008084:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8008086:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008088:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800808a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800808c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800808e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008090:	6852      	ldr	r2, [r2, #4]
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <R3_2_SetADCSampPointSectX+0x70>)
 8008094:	421a      	tst	r2, r3
}
 8008096:	bf14      	ite	ne
 8008098:	2001      	movne	r0, #1
 800809a:	2000      	moveq	r0, #0
 800809c:	bc70      	pop	{r4, r5, r6}
 800809e:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 80080a0:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 80080a2:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 80080a4:	b2ad      	uxth	r5, r5
 80080a6:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 80080aa:	d904      	bls.n	80080b6 <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80080ac:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	e7e4      	b.n	8008080 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80080b6:	4433      	add	r3, r6
 80080b8:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 80080ba:	4299      	cmp	r1, r3
 80080bc:	d8e0      	bhi.n	8008080 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80080be:	43db      	mvns	r3, r3
 80080c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80080c4:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80080c8:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80080ca:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 80080ce:	e7d7      	b.n	8008080 <R3_2_SetADCSampPointSectX+0x20>
 80080d0:	02000070 	.word	0x02000070

080080d4 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80080d4:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80080d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80080d8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80080e2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80080e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80080e6:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80080e8:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80080ea:	6853      	ldr	r3, [r2, #4]
 80080ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f4:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80080f6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 80080fa:	2b0f      	cmp	r3, #15
 80080fc:	d80b      	bhi.n	8008116 <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 80080fe:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8008102:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 8008106:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 8008108:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800810a:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 800810c:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 800811a:	bc70      	pop	{r4, r5, r6}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008120:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8008122:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008124:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008128:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800812a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800812e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008130:	681c      	ldr	r4, [r3, #0]
 8008132:	6853      	ldr	r3, [r2, #4]
 8008134:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813c:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800813e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8008142:	2b0f      	cmp	r3, #15
 8008144:	d808      	bhi.n	8008158 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8008146:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800814a:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800814c:	3301      	adds	r3, #1
 800814e:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8008150:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8008152:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8008156:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 800815c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop

08008164 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008164:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008166:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008168:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800816a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800816e:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008170:	f06f 0001 	mvn.w	r0, #1
 8008174:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008176:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008178:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800817a:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	07d2      	lsls	r2, r2, #31
 8008180:	d5fc      	bpl.n	800817c <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008184:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
 8008188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800818c:	2802      	cmp	r0, #2
 800818e:	645a      	str	r2, [r3, #68]	; 0x44
 8008190:	d000      	beq.n	8008194 <R3_2_TurnOnLowSides+0x30>
 8008192:	4770      	bx	lr
{
 8008194:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008196:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800819a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800819c:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80081a0:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80081a4:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80081a8:	61ae      	str	r6, [r5, #24]
 80081aa:	6184      	str	r4, [r0, #24]
 80081ac:	619a      	str	r2, [r3, #24]
  }
  return;
}
 80081ae:	bc70      	pop	{r4, r5, r6}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop

080081b4 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80081b4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80081b6:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80081ba:	688b      	ldr	r3, [r1, #8]
{
 80081bc:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked=true; 
 80081be:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 80081c0:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 80081c2:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 80081c6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80081ca:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081ce:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80081d2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80081d4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80081d6:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80081d8:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80081da:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081dc:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	07d2      	lsls	r2, r2, #31
 80081e2:	d5fc      	bpl.n	80081de <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081e4:	f06f 0201 	mvn.w	r2, #1
 80081e8:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80081ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80081ec:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80081f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80081f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80081f8:	2802      	cmp	r0, #2
 80081fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081fe:	645a      	str	r2, [r3, #68]	; 0x44
 8008200:	d008      	beq.n	8008214 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008202:	f06f 0201 	mvn.w	r2, #1
 8008206:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8008210:	bcf0      	pop	{r4, r5, r6, r7}
 8008212:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008214:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8008218:	6a0d      	ldr	r5, [r1, #32]
 800821a:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
 800821e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008220:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8008224:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008226:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800822a:	f240 5755 	movw	r7, #1365	; 0x555
 800822e:	ea1c 0f07 	tst.w	ip, r7
 8008232:	d103      	bne.n	800823c <R3_2_SwitchOnPWM+0x88>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008234:	62ae      	str	r6, [r5, #40]	; 0x28
 8008236:	6284      	str	r4, [r0, #40]	; 0x28
 8008238:	6291      	str	r1, [r2, #40]	; 0x28
 800823a:	e7e2      	b.n	8008202 <R3_2_SwitchOnPWM+0x4e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800823c:	61ae      	str	r6, [r5, #24]
 800823e:	6184      	str	r4, [r0, #24]
 8008240:	6191      	str	r1, [r2, #24]
 8008242:	e7de      	b.n	8008202 <R3_2_SwitchOnPWM+0x4e>

08008244 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008244:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008246:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	f022 0201 	bic.w	r2, r2, #1
{
 800824e:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8008250:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 8008254:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008258:	2500      	movs	r5, #0
 800825a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800825e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8008262:	645a      	str	r2, [r3, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8008264:	b91c      	cbnz	r4, 800826e <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008266:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800826a:	2a02      	cmp	r2, #2
 800826c:	d00d      	beq.n	800828a <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800826e:	f06f 0201 	mvn.w	r2, #1
 8008272:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	07d2      	lsls	r2, r2, #31
 8008278:	d5fc      	bpl.n	8008274 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800827a:	f06f 0101 	mvn.w	r1, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800827e:	2200      	movs	r2, #0
 8008280:	6119      	str	r1, [r3, #16]
}
 8008282:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 8008284:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
}
 8008288:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800828a:	e9d1 2408 	ldrd	r2, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800828e:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8008292:	6295      	str	r5, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008294:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008296:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800829a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800829e:	62a5      	str	r5, [r4, #40]	; 0x28
 80082a0:	6291      	str	r1, [r2, #40]	; 0x28
 80082a2:	e7e4      	b.n	800826e <R3_2_SwitchOffPWM+0x2a>

080082a4 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 80082a4:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80082a6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80082a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80082aa:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80082ac:	686a      	ldr	r2, [r5, #4]
 80082ae:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80082b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80082b6:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80082b8:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80082bc:	4a0d      	ldr	r2, [pc, #52]	; (80082f4 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80082be:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80082c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80082c4:	6800      	ldr	r0, [r0, #0]
 80082c6:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 80082c8:	4293      	cmp	r3, r2
 80082ca:	db0e      	blt.n	80082ea <R3_2_RLGetPhaseCurrents+0x46>
  {
    if ( wAux < INT16_MAX )
 80082cc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80082d0:	4293      	cmp	r3, r2
 80082d2:	dd05      	ble.n	80082e0 <R3_2_RLGetPhaseCurrents+0x3c>
 80082d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80082d8:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 80082da:	804b      	strh	r3, [r1, #2]
}
 80082dc:	bc30      	pop	{r4, r5}
 80082de:	4770      	bx	lr
 80082e0:	b21b      	sxth	r3, r3
  pStator_Currents->a = (int16_t)wAux;
 80082e2:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 80082e4:	804b      	strh	r3, [r1, #2]
}
 80082e6:	bc30      	pop	{r4, r5}
 80082e8:	4770      	bx	lr
 80082ea:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->a = (int16_t)wAux;
 80082ec:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 80082ee:	804b      	strh	r3, [r1, #2]
}
 80082f0:	bc30      	pop	{r4, r5}
 80082f2:	4770      	bx	lr
 80082f4:	ffff8002 	.word	0xffff8002
 80082f8:	ffff8001 	.word	0xffff8001

080082fc <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80082fc:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 80082fe:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008300:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 8008302:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008306:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008308:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800830c:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800830e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008310:	6913      	ldr	r3, [r2, #16]
 8008312:	07db      	lsls	r3, r3, #31
 8008314:	d5fc      	bpl.n	8008310 <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008316:	6c53      	ldr	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008318:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	2802      	cmp	r0, #2
 8008322:	6453      	str	r3, [r2, #68]	; 0x44
 8008324:	d000      	beq.n	8008328 <R3_2_RLTurnOnLowSides+0x2c>
 8008326:	4770      	bx	lr
{
 8008328:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800832a:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800832e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008330:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008334:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008338:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 800833c:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800833e:	6284      	str	r4, [r0, #40]	; 0x28
 8008340:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8008342:	bc70      	pop	{r4, r5, r6}
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008348:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 800834a:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800834c:	688b      	ldr	r3, [r1, #8]
{
 800834e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008352:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8008356:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800835a:	f06f 0201 	mvn.w	r2, #1
 800835e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	07d6      	lsls	r6, r2, #31
 8008364:	d5fc      	bpl.n	8008360 <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8008366:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800836a:	f06f 0701 	mvn.w	r7, #1
 800836e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008370:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008372:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008374:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008376:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	07d2      	lsls	r2, r2, #31
 800837c:	d5fc      	bpl.n	8008378 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800837e:	68da      	ldr	r2, [r3, #12]
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008380:	f891 60ba 	ldrb.w	r6, [r1, #186]	; 0xba
 8008384:	f042 0201 	orr.w	r2, r2, #1
 8008388:	60da      	str	r2, [r3, #12]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800838a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008390:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008394:	2e02      	cmp	r6, #2
 8008396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800839a:	645a      	str	r2, [r3, #68]	; 0x44
 800839c:	d117      	bne.n	80083ce <R3_2_RLSwitchOnPWM+0x86>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800839e:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80083a2:	f8d1 c020 	ldr.w	ip, [r1, #32]
 80083a6:	f8b1 e0ac 	ldrh.w	lr, [r1, #172]	; 0xac
 80083aa:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80083ac:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
 80083b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80083b2:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80083b6:	f240 5155 	movw	r1, #1365	; 0x555
 80083ba:	ea18 0f01 	tst.w	r8, r1
  WRITE_REG(GPIOx->BSRR, PinMask);
 80083be:	bf15      	itete	ne
 80083c0:	f8cc e018 	strne.w	lr, [ip, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80083c4:	f8cc e028 	streq.w	lr, [ip, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80083c8:	61b7      	strne	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80083ca:	62b7      	streq	r7, [r6, #40]	; 0x28
 80083cc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 80083ce:	2303      	movs	r3, #3
 80083d0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 80083d4:	68aa      	ldr	r2, [r5, #8]
 80083d6:	4906      	ldr	r1, [pc, #24]	; (80083f0 <R3_2_RLSwitchOnPWM+0xa8>)
 80083d8:	400a      	ands	r2, r1
 80083da:	f042 0208 	orr.w	r2, r2, #8
 80083de:	60aa      	str	r2, [r5, #8]
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	400b      	ands	r3, r1
 80083e4:	f043 0308 	orr.w	r3, r3, #8
 80083e8:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80083ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ee:	bf00      	nop
 80083f0:	7fffffc0 	.word	0x7fffffc0

080083f4 <R3_2_Init>:
{
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4607      	mov	r7, r0
 80083fa:	b091      	sub	sp, #68	; 0x44
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80083fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 80083fe:	f8df b32c 	ldr.w	fp, [pc, #812]	; 800872c <R3_2_Init+0x338>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008402:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 8008404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008406:	686a      	ldr	r2, [r5, #4]
 8008408:	9101      	str	r1, [sp, #4]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800840a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800840c:	9102      	str	r1, [sp, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800840e:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008410:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008412:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008416:	9103      	str	r1, [sp, #12]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008418:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800841c:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008420:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008422:	9104      	str	r1, [sp, #16]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008424:	e9d3 9804 	ldrd	r9, r8, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008428:	e9d3 ec06 	ldrd	lr, ip, [r3, #24]
 800842c:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800842e:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008430:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008432:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008434:	f022 0220 	bic.w	r2, r2, #32
 8008438:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800843a:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800843c:	6872      	ldr	r2, [r6, #4]
 800843e:	f022 0204 	bic.w	r2, r2, #4
 8008442:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008444:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008446:	6872      	ldr	r2, [r6, #4]
 8008448:	f022 0220 	bic.w	r2, r2, #32
 800844c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800844e:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008450:	49b3      	ldr	r1, [pc, #716]	; (8008720 <R3_2_Init+0x32c>)
 8008452:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 8008454:	455c      	cmp	r4, fp
 8008456:	bf0c      	ite	eq
 8008458:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800845c:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8008460:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8008462:	f1ba 0f00 	cmp.w	sl, #0
 8008466:	d014      	beq.n	8008492 <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8008468:	f8da 2000 	ldr.w	r2, [sl]
 800846c:	b11a      	cbz	r2, 8008476 <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800846e:	6811      	ldr	r1, [r2, #0]
 8008470:	f041 0101 	orr.w	r1, r1, #1
 8008474:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8008476:	f8da 2004 	ldr.w	r2, [sl, #4]
 800847a:	b11a      	cbz	r2, 8008484 <R3_2_Init+0x90>
 800847c:	6811      	ldr	r1, [r2, #0]
 800847e:	f041 0101 	orr.w	r1, r1, #1
 8008482:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8008484:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008488:	b11a      	cbz	r2, 8008492 <R3_2_Init+0x9e>
 800848a:	6811      	ldr	r1, [r2, #0]
 800848c:	f041 0101 	orr.w	r1, r1, #1
 8008490:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	d051      	beq.n	800853c <R3_2_Init+0x148>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 8008498:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 800849c:	2a01      	cmp	r2, #1
 800849e:	d041      	beq.n	8008524 <R3_2_Init+0x130>
 80084a0:	9a01      	ldr	r2, [sp, #4]
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d03e      	beq.n	8008524 <R3_2_Init+0x130>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80084a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80084a8:	9005      	str	r0, [sp, #20]
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 80084aa:	f8b3 00b6 	ldrh.w	r0, [r3, #182]	; 0xb6
 80084ae:	4601      	mov	r1, r0
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 80084b0:	9805      	ldr	r0, [sp, #20]
 80084b2:	ea4f 4a90 	mov.w	sl, r0, lsr #18
 80084b6:	f00a 0a3c 	and.w	sl, sl, #60	; 0x3c
 80084ba:	f102 0008 	add.w	r0, r2, #8
  SET_BIT(DACx->SWTRIGR,
 80084be:	9a05      	ldr	r2, [sp, #20]
 80084c0:	f002 0b03 	and.w	fp, r2, #3

  MODIFY_REG(*preg,
 80084c4:	f85a 2000 	ldr.w	r2, [sl, r0]
 80084c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80084cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80084d0:	430a      	orrs	r2, r1
 80084d2:	f84a 2000 	str.w	r2, [sl, r0]
  SET_BIT(DACx->SWTRIGR,
 80084d6:	9801      	ldr	r0, [sp, #4]
 80084d8:	6842      	ldr	r2, [r0, #4]
 80084da:	ea4b 0202 	orr.w	r2, fp, r2
 80084de:	6042      	str	r2, [r0, #4]
  return ((READ_BIT(DACx->CR,
 80084e0:	9a05      	ldr	r2, [sp, #20]
 80084e2:	f002 0110 	and.w	r1, r2, #16
 80084e6:	9a01      	ldr	r2, [sp, #4]
 80084e8:	2001      	movs	r0, #1
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	fa00 f101 	lsl.w	r1, r0, r1
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80084f0:	ea31 0202 	bics.w	r2, r1, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80084f4:	4a8b      	ldr	r2, [pc, #556]	; (8008724 <R3_2_Init+0x330>)
 80084f6:	f000 81d5 	beq.w	80088a4 <R3_2_Init+0x4b0>
  SET_BIT(DACx->CR,
 80084fa:	9801      	ldr	r0, [sp, #4]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	f8df a228 	ldr.w	sl, [pc, #552]	; 8008728 <R3_2_Init+0x334>
 8008502:	6800      	ldr	r0, [r0, #0]
 8008504:	fbaa a202 	umull	sl, r2, sl, r2
 8008508:	4301      	orrs	r1, r0
 800850a:	0cd2      	lsrs	r2, r2, #19
 800850c:	9801      	ldr	r0, [sp, #4]
 800850e:	00d2      	lsls	r2, r2, #3
 8008510:	6001      	str	r1, [r0, #0]
 8008512:	9207      	str	r2, [sp, #28]
    while(wait_loop_index != 0UL)
 8008514:	9a07      	ldr	r2, [sp, #28]
 8008516:	b12a      	cbz	r2, 8008524 <R3_2_Init+0x130>
      wait_loop_index--;
 8008518:	9a07      	ldr	r2, [sp, #28]
 800851a:	3a01      	subs	r2, #1
 800851c:	9207      	str	r2, [sp, #28]
    while(wait_loop_index != 0UL)
 800851e:	9a07      	ldr	r2, [sp, #28]
 8008520:	2a00      	cmp	r2, #0
 8008522:	d1f9      	bne.n	8008518 <R3_2_Init+0x124>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008524:	f8d9 2000 	ldr.w	r2, [r9]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	f8c9 2000 	str.w	r2, [r9]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008530:	f8d9 2000 	ldr.w	r2, [r9]
 8008534:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008538:	f8c9 2000 	str.w	r2, [r9]
    if ( COMP_OCPBx != NULL )
 800853c:	f1b8 0f00 	cmp.w	r8, #0
 8008540:	d04c      	beq.n	80085dc <R3_2_Init+0x1e8>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8008542:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8008546:	2a01      	cmp	r2, #1
 8008548:	d03c      	beq.n	80085c4 <R3_2_Init+0x1d0>
 800854a:	9802      	ldr	r0, [sp, #8]
 800854c:	2800      	cmp	r0, #0
 800854e:	d039      	beq.n	80085c4 <R3_2_Init+0x1d0>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8008550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 8008552:	f8b3 b0b6 	ldrh.w	fp, [r3, #182]	; 0xb6
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8008556:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800855a:	3008      	adds	r0, #8
 800855c:	f009 093c 	and.w	r9, r9, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 8008560:	f002 0a03 	and.w	sl, r2, #3
  MODIFY_REG(*preg,
 8008564:	f859 1000 	ldr.w	r1, [r9, r0]
 8008568:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800856c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8008570:	ea4b 0101 	orr.w	r1, fp, r1
 8008574:	f849 1000 	str.w	r1, [r9, r0]
  SET_BIT(DACx->SWTRIGR,
 8008578:	9802      	ldr	r0, [sp, #8]
 800857a:	6841      	ldr	r1, [r0, #4]
 800857c:	ea4a 0101 	orr.w	r1, sl, r1
 8008580:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(DACx->CR,
 8008582:	9902      	ldr	r1, [sp, #8]
 8008584:	f002 0210 	and.w	r2, r2, #16
 8008588:	2001      	movs	r0, #1
 800858a:	6809      	ldr	r1, [r1, #0]
 800858c:	fa00 f202 	lsl.w	r2, r0, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008590:	ea32 0101 	bics.w	r1, r2, r1
 8008594:	f000 814a 	beq.w	800882c <R3_2_Init+0x438>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008598:	4962      	ldr	r1, [pc, #392]	; (8008724 <R3_2_Init+0x330>)
  SET_BIT(DACx->CR,
 800859a:	9802      	ldr	r0, [sp, #8]
 800859c:	6809      	ldr	r1, [r1, #0]
 800859e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8008728 <R3_2_Init+0x334>
 80085a2:	6800      	ldr	r0, [r0, #0]
 80085a4:	fba9 9101 	umull	r9, r1, r9, r1
 80085a8:	4302      	orrs	r2, r0
 80085aa:	0cc9      	lsrs	r1, r1, #19
 80085ac:	9802      	ldr	r0, [sp, #8]
 80085ae:	00c9      	lsls	r1, r1, #3
 80085b0:	6002      	str	r2, [r0, #0]
 80085b2:	9109      	str	r1, [sp, #36]	; 0x24
    while(wait_loop_index != 0UL)
 80085b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b6:	b12a      	cbz	r2, 80085c4 <R3_2_Init+0x1d0>
      wait_loop_index--;
 80085b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ba:	3a01      	subs	r2, #1
 80085bc:	9209      	str	r2, [sp, #36]	; 0x24
    while(wait_loop_index != 0UL)
 80085be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	d1f9      	bne.n	80085b8 <R3_2_Init+0x1c4>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80085c4:	f8d8 2000 	ldr.w	r2, [r8]
 80085c8:	f042 0201 	orr.w	r2, r2, #1
 80085cc:	f8c8 2000 	str.w	r2, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80085d0:	f8d8 2000 	ldr.w	r2, [r8]
 80085d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80085d8:	f8c8 2000 	str.w	r2, [r8]
    if ( COMP_OCPCx != NULL )
 80085dc:	f1be 0f00 	cmp.w	lr, #0
 80085e0:	d04c      	beq.n	800867c <R3_2_Init+0x288>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 80085e2:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 80085e6:	2a01      	cmp	r2, #1
 80085e8:	d03c      	beq.n	8008664 <R3_2_Init+0x270>
 80085ea:	9803      	ldr	r0, [sp, #12]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d039      	beq.n	8008664 <R3_2_Init+0x270>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80085f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 80085f2:	f8b3 a0b6 	ldrh.w	sl, [r3, #182]	; 0xb6
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 80085f6:	ea4f 4892 	mov.w	r8, r2, lsr #18
 80085fa:	3008      	adds	r0, #8
 80085fc:	f008 083c 	and.w	r8, r8, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 8008600:	f002 0903 	and.w	r9, r2, #3
  MODIFY_REG(*preg,
 8008604:	f858 1000 	ldr.w	r1, [r8, r0]
 8008608:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800860c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8008610:	ea4a 0101 	orr.w	r1, sl, r1
 8008614:	f848 1000 	str.w	r1, [r8, r0]
  SET_BIT(DACx->SWTRIGR,
 8008618:	9803      	ldr	r0, [sp, #12]
 800861a:	6841      	ldr	r1, [r0, #4]
 800861c:	ea49 0101 	orr.w	r1, r9, r1
 8008620:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(DACx->CR,
 8008622:	9903      	ldr	r1, [sp, #12]
 8008624:	f002 0210 	and.w	r2, r2, #16
 8008628:	2001      	movs	r0, #1
 800862a:	6809      	ldr	r1, [r1, #0]
 800862c:	fa00 f202 	lsl.w	r2, r0, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008630:	ea32 0101 	bics.w	r1, r2, r1
 8008634:	f000 810e 	beq.w	8008854 <R3_2_Init+0x460>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008638:	493a      	ldr	r1, [pc, #232]	; (8008724 <R3_2_Init+0x330>)
  SET_BIT(DACx->CR,
 800863a:	9803      	ldr	r0, [sp, #12]
 800863c:	6809      	ldr	r1, [r1, #0]
 800863e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008728 <R3_2_Init+0x334>
 8008642:	6800      	ldr	r0, [r0, #0]
 8008644:	fba8 8101 	umull	r8, r1, r8, r1
 8008648:	4302      	orrs	r2, r0
 800864a:	0cc9      	lsrs	r1, r1, #19
 800864c:	9803      	ldr	r0, [sp, #12]
 800864e:	00c9      	lsls	r1, r1, #3
 8008650:	6002      	str	r2, [r0, #0]
 8008652:	910b      	str	r1, [sp, #44]	; 0x2c
    while(wait_loop_index != 0UL)
 8008654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008656:	b12a      	cbz	r2, 8008664 <R3_2_Init+0x270>
      wait_loop_index--;
 8008658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800865a:	3a01      	subs	r2, #1
 800865c:	920b      	str	r2, [sp, #44]	; 0x2c
    while(wait_loop_index != 0UL)
 800865e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008660:	2a00      	cmp	r2, #0
 8008662:	d1f9      	bne.n	8008658 <R3_2_Init+0x264>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008664:	f8de 2000 	ldr.w	r2, [lr]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	f8ce 2000 	str.w	r2, [lr]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008670:	f8de 2000 	ldr.w	r2, [lr]
 8008674:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008678:	f8ce 2000 	str.w	r2, [lr]
    if ( COMP_OVPx != NULL )
 800867c:	f1bc 0f00 	cmp.w	ip, #0
 8008680:	d047      	beq.n	8008712 <R3_2_Init+0x31e>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8008682:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008686:	2a01      	cmp	r2, #1
 8008688:	d037      	beq.n	80086fa <R3_2_Init+0x306>
 800868a:	9904      	ldr	r1, [sp, #16]
 800868c:	2900      	cmp	r1, #0
 800868e:	d034      	beq.n	80086fa <R3_2_Init+0x306>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8008690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 8008692:	f8b3 80b8 	ldrh.w	r8, [r3, #184]	; 0xb8
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8008696:	0c90      	lsrs	r0, r2, #18
 8008698:	f000 003c 	and.w	r0, r0, #60	; 0x3c
 800869c:	3108      	adds	r1, #8
  SET_BIT(DACx->SWTRIGR,
 800869e:	f002 0e03 	and.w	lr, r2, #3
  MODIFY_REG(*preg,
 80086a2:	5843      	ldr	r3, [r0, r1]
 80086a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ac:	ea48 0303 	orr.w	r3, r8, r3
 80086b0:	5043      	str	r3, [r0, r1]
  SET_BIT(DACx->SWTRIGR,
 80086b2:	9804      	ldr	r0, [sp, #16]
 80086b4:	6843      	ldr	r3, [r0, #4]
 80086b6:	ea4e 0303 	orr.w	r3, lr, r3
 80086ba:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(DACx->CR,
 80086bc:	f002 0210 	and.w	r2, r2, #16
 80086c0:	2101      	movs	r1, #1
 80086c2:	6803      	ldr	r3, [r0, #0]
 80086c4:	fa01 f202 	lsl.w	r2, r1, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80086c8:	ea32 0303 	bics.w	r3, r2, r3
 80086cc:	f000 80d6 	beq.w	800887c <R3_2_Init+0x488>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <R3_2_Init+0x330>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4814      	ldr	r0, [pc, #80]	; (8008728 <R3_2_Init+0x334>)
  SET_BIT(DACx->CR,
 80086d8:	6809      	ldr	r1, [r1, #0]
 80086da:	fba0 0303 	umull	r0, r3, r0, r3
 80086de:	430a      	orrs	r2, r1
 80086e0:	0cdb      	lsrs	r3, r3, #19
 80086e2:	9904      	ldr	r1, [sp, #16]
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	600a      	str	r2, [r1, #0]
 80086e8:	930d      	str	r3, [sp, #52]	; 0x34
    while(wait_loop_index != 0UL)
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	b12b      	cbz	r3, 80086fa <R3_2_Init+0x306>
      wait_loop_index--;
 80086ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f0:	3b01      	subs	r3, #1
 80086f2:	930d      	str	r3, [sp, #52]	; 0x34
    while(wait_loop_index != 0UL)
 80086f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1f9      	bne.n	80086ee <R3_2_Init+0x2fa>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80086fa:	f8dc 3000 	ldr.w	r3, [ip]
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	f8cc 3000 	str.w	r3, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008706:	f8dc 3000 	ldr.w	r3, [ip]
 800870a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800870e:	f8cc 3000 	str.w	r3, [ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008712:	68ab      	ldr	r3, [r5, #8]
 8008714:	07d8      	lsls	r0, r3, #31
 8008716:	d571      	bpl.n	80087fc <R3_2_Init+0x408>
 8008718:	68b3      	ldr	r3, [r6, #8]
 800871a:	07d9      	lsls	r1, r3, #31
 800871c:	d57a      	bpl.n	8008814 <R3_2_Init+0x420>
 800871e:	e007      	b.n	8008730 <R3_2_Init+0x33c>
 8008720:	e0042000 	.word	0xe0042000
 8008724:	20000618 	.word	0x20000618
 8008728:	431bde83 	.word	0x431bde83
 800872c:	40012c00 	.word	0x40012c00
  volatile uint32_t Brk2Timeout = 1000;
 8008730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008734:	930f      	str	r3, [sp, #60]	; 0x3c
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008736:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8008738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008740:	6863      	ldr	r3, [r4, #4]
 8008742:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800874c:	69a3      	ldr	r3, [r4, #24]
 800874e:	f043 0308 	orr.w	r3, r3, #8
 8008752:	61a3      	str	r3, [r4, #24]
 8008754:	69a3      	ldr	r3, [r4, #24]
 8008756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800875a:	61a3      	str	r3, [r4, #24]
 800875c:	69e3      	ldr	r3, [r4, #28]
 800875e:	f043 0308 	orr.w	r3, r3, #8
 8008762:	61e3      	str	r3, [r4, #28]
 8008764:	69e3      	ldr	r3, [r4, #28]
 8008766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800876a:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800876c:	6963      	ldr	r3, [r4, #20]
 800876e:	f043 0301 	orr.w	r3, r3, #1
 8008772:	6163      	str	r3, [r4, #20]
 8008774:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8008778:	2b02      	cmp	r3, #2
 800877a:	d02c      	beq.n	80087d6 <R3_2_Init+0x3e2>
    if ( pHandle->_Super.Motor == M1 )
 800877c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008780:	b92b      	cbnz	r3, 800878e <R3_2_Init+0x39a>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8008782:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8008786:	2b01      	cmp	r3, #1
 8008788:	d033      	beq.n	80087f2 <R3_2_Init+0x3fe>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800878a:	2b03      	cmp	r3, #3
 800878c:	d046      	beq.n	800881c <R3_2_Init+0x428>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800878e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008792:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008794:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8008798:	b183      	cbz	r3, 80087bc <R3_2_Init+0x3c8>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	05da      	lsls	r2, r3, #23
 800879e:	d50d      	bpl.n	80087bc <R3_2_Init+0x3c8>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 80087a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a2:	b15b      	cbz	r3, 80087bc <R3_2_Init+0x3c8>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80087a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087a8:	e001      	b.n	80087ae <R3_2_Init+0x3ba>
 80087aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ac:	b133      	cbz	r3, 80087bc <R3_2_Init+0x3c8>
 80087ae:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 80087b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b2:	3b01      	subs	r3, #1
 80087b4:	930f      	str	r3, [sp, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	05db      	lsls	r3, r3, #23
 80087ba:	d4f6      	bmi.n	80087aa <R3_2_Init+0x3b6>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80087bc:	68e3      	ldr	r3, [r4, #12]
 80087be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c2:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80087c4:	6a23      	ldr	r3, [r4, #32]
 80087c6:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80087ca:	f043 0305 	orr.w	r3, r3, #5
 80087ce:	6223      	str	r3, [r4, #32]
}
 80087d0:	b011      	add	sp, #68	; 0x44
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80087d6:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d109      	bne.n	80087f2 <R3_2_Init+0x3fe>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80087de:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 80087e2:	2903      	cmp	r1, #3
 80087e4:	d105      	bne.n	80087f2 <R3_2_Init+0x3fe>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80087e6:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80087e8:	6963      	ldr	r3, [r4, #20]
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80087f0:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80087f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80087f6:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80087f8:	6263      	str	r3, [r4, #36]	; 0x24
 80087fa:	e7c8      	b.n	800878e <R3_2_Init+0x39a>
      R3_2_ADCxInit (ADCx_1);
 80087fc:	4628      	mov	r0, r5
 80087fe:	f7ff faf1 	bl	8007de4 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008802:	2340      	movs	r3, #64	; 0x40
 8008804:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008806:	686b      	ldr	r3, [r5, #4]
 8008808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800880c:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800880e:	68b3      	ldr	r3, [r6, #8]
 8008810:	07d9      	lsls	r1, r3, #31
 8008812:	d48d      	bmi.n	8008730 <R3_2_Init+0x33c>
      R3_2_ADCxInit (ADCx_2);
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff fae5 	bl	8007de4 <R3_2_ADCxInit>
 800881a:	e789      	b.n	8008730 <R3_2_Init+0x33c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800881c:	2101      	movs	r1, #1
 800881e:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008820:	6961      	ldr	r1, [r4, #20]
 8008822:	f041 0101 	orr.w	r1, r1, #1
 8008826:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008828:	6323      	str	r3, [r4, #48]	; 0x30
 800882a:	e7b0      	b.n	800878e <R3_2_Init+0x39a>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800882c:	4a27      	ldr	r2, [pc, #156]	; (80088cc <R3_2_Init+0x4d8>)
 800882e:	4928      	ldr	r1, [pc, #160]	; (80088d0 <R3_2_Init+0x4dc>)
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	fba1 1202 	umull	r1, r2, r1, r2
 8008836:	0cd2      	lsrs	r2, r2, #19
 8008838:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800883c:	920a      	str	r2, [sp, #40]	; 0x28
    while(wait_loop_index != 0UL)
 800883e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008840:	2a00      	cmp	r2, #0
 8008842:	f43f aebf 	beq.w	80085c4 <R3_2_Init+0x1d0>
      wait_loop_index--;
 8008846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008848:	3a01      	subs	r2, #1
 800884a:	920a      	str	r2, [sp, #40]	; 0x28
    while(wait_loop_index != 0UL)
 800884c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800884e:	2a00      	cmp	r2, #0
 8008850:	d1f9      	bne.n	8008846 <R3_2_Init+0x452>
 8008852:	e6b7      	b.n	80085c4 <R3_2_Init+0x1d0>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008854:	4a1d      	ldr	r2, [pc, #116]	; (80088cc <R3_2_Init+0x4d8>)
 8008856:	491e      	ldr	r1, [pc, #120]	; (80088d0 <R3_2_Init+0x4dc>)
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	fba1 1202 	umull	r1, r2, r1, r2
 800885e:	0cd2      	lsrs	r2, r2, #19
 8008860:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008864:	920c      	str	r2, [sp, #48]	; 0x30
    while(wait_loop_index != 0UL)
 8008866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008868:	2a00      	cmp	r2, #0
 800886a:	f43f aefb 	beq.w	8008664 <R3_2_Init+0x270>
      wait_loop_index--;
 800886e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008870:	3a01      	subs	r2, #1
 8008872:	920c      	str	r2, [sp, #48]	; 0x30
    while(wait_loop_index != 0UL)
 8008874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008876:	2a00      	cmp	r2, #0
 8008878:	d1f9      	bne.n	800886e <R3_2_Init+0x47a>
 800887a:	e6f3      	b.n	8008664 <R3_2_Init+0x270>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800887c:	4b13      	ldr	r3, [pc, #76]	; (80088cc <R3_2_Init+0x4d8>)
 800887e:	4a14      	ldr	r2, [pc, #80]	; (80088d0 <R3_2_Init+0x4dc>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	0cdb      	lsrs	r3, r3, #19
 8008888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800888c:	930e      	str	r3, [sp, #56]	; 0x38
    while(wait_loop_index != 0UL)
 800888e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008890:	2b00      	cmp	r3, #0
 8008892:	f43f af32 	beq.w	80086fa <R3_2_Init+0x306>
      wait_loop_index--;
 8008896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008898:	3b01      	subs	r3, #1
 800889a:	930e      	str	r3, [sp, #56]	; 0x38
    while(wait_loop_index != 0UL)
 800889c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f9      	bne.n	8008896 <R3_2_Init+0x4a2>
 80088a2:	e72a      	b.n	80086fa <R3_2_Init+0x306>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80088a4:	490a      	ldr	r1, [pc, #40]	; (80088d0 <R3_2_Init+0x4dc>)
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	fba1 1202 	umull	r1, r2, r1, r2
 80088ac:	0cd2      	lsrs	r2, r2, #19
 80088ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80088b2:	9208      	str	r2, [sp, #32]
    while(wait_loop_index != 0UL)
 80088b4:	9a08      	ldr	r2, [sp, #32]
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	f43f ae34 	beq.w	8008524 <R3_2_Init+0x130>
      wait_loop_index--;
 80088bc:	9a08      	ldr	r2, [sp, #32]
 80088be:	3a01      	subs	r2, #1
 80088c0:	9208      	str	r2, [sp, #32]
    while(wait_loop_index != 0UL)
 80088c2:	9a08      	ldr	r2, [sp, #32]
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	d1f9      	bne.n	80088bc <R3_2_Init+0x4c8>
 80088c8:	e62c      	b.n	8008524 <R3_2_Init+0x130>
 80088ca:	bf00      	nop
 80088cc:	20000618 	.word	0x20000618
 80088d0:	431bde83 	.word	0x431bde83

080088d4 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088d4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80088d6:	4946      	ldr	r1, [pc, #280]	; (80089f0 <R3_2_CurrentReadingPolarization+0x11c>)
{
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pHandle->PhaseAOffset = 0u;
 80088dc:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088de:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80088e0:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 80088e4:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 80088e8:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 80088ea:	65c2      	str	r2, [r0, #92]	; 0x5c
 80088ec:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80088f0:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 80088f4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80088f8:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80088fa:	4b3e      	ldr	r3, [pc, #248]	; (80089f4 <R3_2_CurrentReadingPolarization+0x120>)
 80088fc:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80088fe:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8008900:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008902:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008906:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 8008908:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 800890c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 8008910:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008912:	f7ff fc4f 	bl	80081b4 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8008916:	4a38      	ldr	r2, [pc, #224]	; (80089f8 <R3_2_CurrentReadingPolarization+0x124>)
 8008918:	686b      	ldr	r3, [r5, #4]
 800891a:	4013      	ands	r3, r2
 800891c:	2b70      	cmp	r3, #112	; 0x70
 800891e:	d1fb      	bne.n	8008918 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	4936      	ldr	r1, [pc, #216]	; (80089fc <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 8008924:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008926:	400a      	ands	r2, r1
 8008928:	f042 0208 	orr.w	r2, r2, #8
 800892c:	60ba      	str	r2, [r7, #8]
 800892e:	68b3      	ldr	r3, [r6, #8]
 8008930:	400b      	ands	r3, r1
 8008932:	f043 0308 	orr.w	r3, r3, #8
 8008936:	60b3      	str	r3, [r6, #8]
 8008938:	f104 0738 	add.w	r7, r4, #56	; 0x38
 800893c:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8008940:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 8008944:	4639      	mov	r1, r7
 8008946:	4643      	mov	r3, r8
 8008948:	4628      	mov	r0, r5
 800894a:	f7ff f8ed 	bl	8007b28 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fc78 	bl	8008244 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8008954:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008956:	4b2a      	ldr	r3, [pc, #168]	; (8008a00 <R3_2_CurrentReadingPolarization+0x12c>)
 8008958:	6063      	str	r3, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800895a:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800895c:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 8008960:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 8008964:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008968:	f7ff fc24 	bl	80081b4 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800896c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800896e:	4639      	mov	r1, r7
 8008970:	4643      	mov	r3, r8
 8008972:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008976:	4f23      	ldr	r7, [pc, #140]	; (8008a04 <R3_2_CurrentReadingPolarization+0x130>)
  waitForPolarizationEnd( TIMx,
 8008978:	4628      	mov	r0, r5
 800897a:	f7ff f8d5 	bl	8007b28 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800897e:	4620      	mov	r0, r4
 8008980:	f7ff fc60 	bl	8008244 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008984:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008988:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800898a:	481f      	ldr	r0, [pc, #124]	; (8008a08 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800898c:	6067      	str	r7, [r4, #4]
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800898e:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008990:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008992:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800899a:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800899c:	61a0      	str	r0, [r4, #24]
 800899e:	f023 0308 	bic.w	r3, r3, #8
 80089a2:	61ab      	str	r3, [r5, #24]
 80089a4:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80089a6:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80089aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089ae:	61aa      	str	r2, [r5, #24]
 80089b0:	69ea      	ldr	r2, [r5, #28]
 80089b2:	f022 0208 	bic.w	r2, r2, #8
 80089b6:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80089b8:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80089ba:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80089bc:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80089be:	69ab      	ldr	r3, [r5, #24]
 80089c0:	f043 0308 	orr.w	r3, r3, #8
 80089c4:	61ab      	str	r3, [r5, #24]
 80089c6:	69ab      	ldr	r3, [r5, #24]
 80089c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089cc:	61ab      	str	r3, [r5, #24]
 80089ce:	69eb      	ldr	r3, [r5, #28]
 80089d0:	f043 0308 	orr.w	r3, r3, #8
 80089d4:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 80089d6:	6a2b      	ldr	r3, [r5, #32]
 80089d8:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80089dc:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 80089e0:	2204      	movs	r2, #4
 80089e2:	622b      	str	r3, [r5, #32]
 80089e4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 80089e8:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
}
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	080080d5 	.word	0x080080d5
 80089f4:	08008025 	.word	0x08008025
 80089f8:	02000070 	.word	0x02000070
 80089fc:	7fffffc0 	.word	0x7fffffc0
 8008a00:	08008121 	.word	0x08008121
 8008a04:	08007e99 	.word	0x08007e99
 8008a08:	08008061 	.word	0x08008061

08008a0c <R3_2_TIMx_UP_IRQHandler>:
{
 8008a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008a10:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008a12:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
{
 8008a16:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008a18:	e9d2 6002 	ldrd	r6, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008a1c:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d03c      	beq.n	8008a9e <R3_2_TIMx_UP_IRQHandler+0x92>
    while (ADCx_1->JSQR != 0x0u)
 8008a24:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1fc      	bne.n	8008a24 <R3_2_TIMx_UP_IRQHandler+0x18>
 8008a2a:	b22d      	sxth	r5, r5
 8008a2c:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008a30:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    if (Opamp != NULL )
 8008a34:	f1bc 0f00 	cmp.w	ip, #0
 8008a38:	d007      	beq.n	8008a4a <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008a3a:	f8dc 0000 	ldr.w	r0, [ip]
 8008a3e:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8008a40:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8008a44:	4338      	orrs	r0, r7
 8008a46:	f8cc 0000 	str.w	r0, [ip]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008a4a:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8008a4e:	f1bc 0f00 	cmp.w	ip, #0
 8008a52:	d009      	beq.n	8008a68 <R3_2_TIMx_UP_IRQHandler+0x5c>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008a54:	f8dc 0000 	ldr.w	r0, [ip]
 8008a58:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8008a5c:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8008a60:	ea43 030e 	orr.w	r3, r3, lr
 8008a64:	f8cc 3000 	str.w	r3, [ip]
 8008a68:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008a70:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a72:	f8d2 5094 	ldr.w	r5, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a76:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a78:	432b      	orrs	r3, r5
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a7a:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a7c:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a80:	6873      	ldr	r3, [r6, #4]
 8008a82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008a8e:	2280      	movs	r2, #128	; 0x80
 8008a90:	6073      	str	r3, [r6, #4]
}
 8008a92:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008a96:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 8008a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9e:	b22d      	sxth	r5, r5
 8008aa0:	e7e2      	b.n	8008a68 <R3_2_TIMx_UP_IRQHandler+0x5c>
 8008aa2:	bf00      	nop

08008aa4 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8008aa4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8008aa8:	b923      	cbnz	r3, 8008ab4 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008aaa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008aac:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8008ab0:	2a02      	cmp	r2, #2
 8008ab2:	d004      	beq.n	8008abe <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008aba:	3046      	adds	r0, #70	; 0x46
 8008abc:	4770      	bx	lr
{
 8008abe:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008ac0:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008ac4:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aca:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008acc:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008ad0:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008ad4:	628c      	str	r4, [r1, #40]	; 0x28
 8008ad6:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008ade:	bc30      	pop	{r4, r5}
 8008ae0:	3046      	adds	r0, #70	; 0x46
 8008ae2:	4770      	bx	lr

08008ae4 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008ae4:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8008ae6:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008ae8:	6890      	ldr	r0, [r2, #8]
 8008aea:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8008aec:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008aee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008af2:	6442      	str	r2, [r0, #68]	; 0x44
}
 8008af4:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8008af8:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 8008afc:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <R3_2_IsOverCurrentOccurred>:
{
 8008b04:	4602      	mov	r2, r0
  if ( pHandle->OverVoltageFlag == true )
 8008b06:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 8008b0a:	b160      	cbz	r0, 8008b26 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
 8008b12:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8008b14:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8008b16:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 8008b1a:	b11b      	cbz	r3, 8008b24 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8008b1c:	2300      	movs	r3, #0
    retVal |= MC_BREAK_IN;
 8008b1e:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8008b20:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
}
 8008b24:	4770      	bx	lr
 8008b26:	2140      	movs	r1, #64	; 0x40
 8008b28:	e7f5      	b.n	8008b16 <R3_2_IsOverCurrentOccurred+0x12>
 8008b2a:	bf00      	nop

08008b2c <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8008b2c:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8008b30:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8008b32:	2900      	cmp	r1, #0
 8008b34:	d13c      	bne.n	8008bb0 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b36:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008b38:	6893      	ldr	r3, [r2, #8]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008b3a:	f892 50ba 	ldrb.w	r5, [r2, #186]	; 0xba
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b44:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008b48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008b4c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008b4e:	6a1a      	ldr	r2, [r3, #32]
 8008b50:	f042 0201 	orr.w	r2, r2, #1
 8008b54:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b56:	6a1a      	ldr	r2, [r3, #32]
 8008b58:	2d01      	cmp	r5, #1
 8008b5a:	f022 0204 	bic.w	r2, r2, #4
 8008b5e:	621a      	str	r2, [r3, #32]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008b60:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b64:	6359      	str	r1, [r3, #52]	; 0x34
 8008b66:	d030      	beq.n	8008bca <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008b68:	2d02      	cmp	r5, #2
 8008b6a:	d10f      	bne.n	8008b8c <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008b72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b7a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	f042 0210 	orr.w	r2, r2, #16
 8008b82:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b8a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008b8c:	6862      	ldr	r2, [r4, #4]
 8008b8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b92:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008b96:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8008b9a:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b9c:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008b9e:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8008ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ba4:	621a      	str	r2, [r3, #32]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bac:	621a      	str	r2, [r3, #32]
 8008bae:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008bb0:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008bb2:	490f      	ldr	r1, [pc, #60]	; (8008bf0 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008bb4:	4a0f      	ldr	r2, [pc, #60]	; (8008bf4 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008bb6:	4c10      	ldr	r4, [pc, #64]	; (8008bf8 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008bb8:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8008bba:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008bbc:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008bbe:	e9c0 2102 	strd	r2, r1, [r0, #8]
  pHandle->_Super.RLDetectionMode = true;
 8008bc2:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8008bc6:	bc30      	pop	{r4, r5}
 8008bc8:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008bd0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bd8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008bda:	6a1a      	ldr	r2, [r3, #32]
 8008bdc:	f022 0210 	bic.w	r2, r2, #16
 8008be0:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008be2:	6a1a      	ldr	r2, [r3, #32]
 8008be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be8:	621a      	str	r2, [r3, #32]
 8008bea:	e7cf      	b.n	8008b8c <R3_2_RLDetectionModeEnable+0x60>
 8008bec:	080082a5 	.word	0x080082a5
 8008bf0:	08008349 	.word	0x08008349
 8008bf4:	08008245 	.word	0x08008245
 8008bf8:	080082fd 	.word	0x080082fd

08008bfc <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8008bfc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d03b      	beq.n	8008c7c <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008c04:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008c06:	6893      	ldr	r3, [r2, #8]
{
 8008c08:	b470      	push	{r4, r5, r6}
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008c0a:	f892 50ba 	ldrb.w	r5, [r2, #186]	; 0xba
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c0e:	4c40      	ldr	r4, [pc, #256]	; (8008d10 <R3_2_RLDetectionModeDisable+0x114>)
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8008c16:	4022      	ands	r2, r4
 8008c18:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008c1c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008c1e:	6a19      	ldr	r1, [r3, #32]
 8008c20:	2d01      	cmp	r5, #1
 8008c22:	f041 0101 	orr.w	r1, r1, #1
 8008c26:	6219      	str	r1, [r3, #32]
 8008c28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c2c:	d027      	beq.n	8008c7e <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008c2e:	2d02      	cmp	r5, #2
 8008c30:	d049      	beq.n	8008cc6 <R3_2_RLDetectionModeDisable+0xca>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c32:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c34:	6999      	ldr	r1, [r3, #24]
 8008c36:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008c3a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008c3e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008c42:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008c44:	6a19      	ldr	r1, [r3, #32]
 8008c46:	f041 0110 	orr.w	r1, r1, #16
 8008c4a:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008c4c:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c4e:	69d9      	ldr	r1, [r3, #28]
 8008c50:	400c      	ands	r4, r1
 8008c52:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008c56:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008c58:	6a19      	ldr	r1, [r3, #32]
 8008c5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008c5e:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008c60:	492c      	ldr	r1, [pc, #176]	; (8008d14 <R3_2_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008c62:	4a2d      	ldr	r2, [pc, #180]	; (8008d18 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008c64:	63de      	str	r6, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008c66:	4d2d      	ldr	r5, [pc, #180]	; (8008d1c <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008c68:	4c2d      	ldr	r4, [pc, #180]	; (8008d20 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008c6a:	6045      	str	r5, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8008c6c:	2300      	movs	r3, #0
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008c6e:	6144      	str	r4, [r0, #20]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008c70:	e9c0 2102 	strd	r2, r1, [r0, #8]
    pHandle->_Super.RLDetectionMode = false;
 8008c74:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8008c78:	bc70      	pop	{r4, r5, r6}
 8008c7a:	4770      	bx	lr
 8008c7c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008c7e:	6a19      	ldr	r1, [r3, #32]
 8008c80:	f041 0104 	orr.w	r1, r1, #4
 8008c84:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c86:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c88:	6999      	ldr	r1, [r3, #24]
 8008c8a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008c8e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008c92:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008c96:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008c98:	6a19      	ldr	r1, [r3, #32]
 8008c9a:	f041 0110 	orr.w	r1, r1, #16
 8008c9e:	6219      	str	r1, [r3, #32]
 8008ca0:	6a19      	ldr	r1, [r3, #32]
 8008ca2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008ca6:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008ca8:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008caa:	69d9      	ldr	r1, [r3, #28]
 8008cac:	400c      	ands	r4, r1
 8008cae:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008cb2:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008cb4:	6a19      	ldr	r1, [r3, #32]
 8008cb6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008cba:	6219      	str	r1, [r3, #32]
 8008cbc:	6a19      	ldr	r1, [r3, #32]
 8008cbe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008cc2:	6219      	str	r1, [r3, #32]
 8008cc4:	e7cc      	b.n	8008c60 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008cc6:	6a19      	ldr	r1, [r3, #32]
 8008cc8:	f021 0104 	bic.w	r1, r1, #4
 8008ccc:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008cce:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008cd0:	6999      	ldr	r1, [r3, #24]
 8008cd2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008cd6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008cda:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008cde:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008ce0:	6a19      	ldr	r1, [r3, #32]
 8008ce2:	f041 0110 	orr.w	r1, r1, #16
 8008ce6:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008ce8:	6a19      	ldr	r1, [r3, #32]
 8008cea:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008cee:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008cf0:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008cf2:	69d9      	ldr	r1, [r3, #28]
 8008cf4:	400c      	ands	r4, r1
 8008cf6:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008cfa:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008cfc:	6a19      	ldr	r1, [r3, #32]
 8008cfe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008d02:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008d04:	6a19      	ldr	r1, [r3, #32]
 8008d06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008d0a:	6219      	str	r1, [r3, #32]
 8008d0c:	e7a8      	b.n	8008c60 <R3_2_RLDetectionModeDisable+0x64>
 8008d0e:	bf00      	nop
 8008d10:	fffeff8c 	.word	0xfffeff8c
 8008d14:	080081b5 	.word	0x080081b5
 8008d18:	08008245 	.word	0x08008245
 8008d1c:	08007e99 	.word	0x08007e99
 8008d20:	08008165 	.word	0x08008165

08008d24 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008d24:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008d26:	6892      	ldr	r2, [r2, #8]
{
 8008d28:	b470      	push	{r4, r5, r6}
 8008d2a:	4603      	mov	r3, r0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008d2c:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8008d30:	f8b0 5056 	ldrh.w	r5, [r0, #86]	; 0x56
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008d34:	69d0      	ldr	r0, [r2, #28]
 8008d36:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008d3a:	fb01 f104 	mul.w	r1, r1, r4
 8008d3e:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 8008d42:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8008d44:	1b64      	subs	r4, r4, r5
  pHandle->ADCRegularLocked=true;
 8008d46:	2601      	movs	r6, #1
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8008d48:	f8b3 5058 	ldrh.w	r5, [r3, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8008d4c:	8659      	strh	r1, [r3, #50]	; 0x32
 8008d4e:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
  pHandle->ADCRegularLocked=true;
 8008d52:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
 8008d56:	61d0      	str	r0, [r2, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008d58:	6414      	str	r4, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008d5a:	63d5      	str	r5, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008d5c:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d5e:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008d60:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8008d62:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8008d66:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008d6a:	f041 0170 	orr.w	r1, r1, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8008d6e:	2403      	movs	r4, #3
 8008d70:	6051      	str	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008d72:	42b0      	cmp	r0, r6
  pHdl->Sector = SECTOR_4;
 8008d74:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008d78:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008d7a:	d006      	beq.n	8008d8a <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <R3_2_RLDetectionModeSetDuty+0x70>)
 8008d7e:	421a      	tst	r2, r3
    hAux = MC_FOC_DURATION;
 8008d80:	bf14      	ite	ne
 8008d82:	4630      	movne	r0, r6
 8008d84:	2000      	moveq	r0, #0
}
 8008d86:	bc70      	pop	{r4, r5, r6}
 8008d88:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8008d8e:	bc70      	pop	{r4, r5, r6}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	02000070 	.word	0x02000070

08008d98 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008d98:	8b42      	ldrh	r2, [r0, #26]
 8008d9a:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008d9c:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008d9e:	440a      	add	r2, r1
 8008da0:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008da2:	b18b      	cbz	r3, 8008dc8 <RVBS_Clear+0x30>
{
 8008da4:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 8008da6:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008da8:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 8008daa:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008dae:	3301      	adds	r3, #1
 8008db0:	8b01      	ldrh	r1, [r0, #24]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d8f8      	bhi.n	8008daa <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8008db8:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8008dba:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8008dbc:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8008dbe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8008dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc6:	4770      	bx	lr
  pHandle->index = 0;
 8008dc8:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8008dca:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8008dcc:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8008dce:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8008dd2:	4770      	bx	lr

08008dd4 <RVBS_Init>:
{
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008dd8:	300c      	adds	r0, #12
 8008dda:	f7f9 fadd 	bl	8002398 <RCM_RegisterRegConv>
 8008dde:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7ff ffd8 	bl	8008d98 <RVBS_Clear>
}
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	bf00      	nop

08008dec <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8008dec:	88c3      	ldrh	r3, [r0, #6]
 8008dee:	8b42      	ldrh	r2, [r0, #26]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d305      	bcc.n	8008e00 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8008df4:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8008df6:	4298      	cmp	r0, r3
 8008df8:	bf8c      	ite	hi
 8008dfa:	2004      	movhi	r0, #4
 8008dfc:	2000      	movls	r0, #0
 8008dfe:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8008e00:	2002      	movs	r0, #2
  }
  return fault;
}
 8008e02:	4770      	bx	lr

08008e04 <RVBS_CalcAvVbus>:
{
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008e08:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008e0c:	f7f9 fb94 	bl	8002538 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8008e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e14:	4298      	cmp	r0, r3
 8008e16:	d01b      	beq.n	8008e50 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8008e18:	6a26      	ldr	r6, [r4, #32]
 8008e1a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8008e1e:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008e22:	8b25      	ldrh	r5, [r4, #24]
 8008e24:	b1cd      	cbz	r5, 8008e5a <RVBS_CalcAvVbus+0x56>
 8008e26:	2300      	movs	r3, #0
    wtemp = 0;
 8008e28:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8008e2a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008e2e:	3301      	adds	r3, #1
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 8008e34:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008e36:	d3f8      	bcc.n	8008e2a <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8008e38:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008e3c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008e40:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008e42:	3d01      	subs	r5, #1
 8008e44:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 8008e46:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008e48:	da09      	bge.n	8008e5e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff ffcb 	bl	8008dec <RVBS_CheckFaultState>
 8008e56:	8120      	strh	r0, [r4, #8]
}
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008e5a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8008e5c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff ffc1 	bl	8008dec <RVBS_CheckFaultState>
 8008e6a:	8120      	strh	r0, [r4, #8]
}
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
 8008e6e:	bf00      	nop

08008e70 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8008e70:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8008e72:	2201      	movs	r2, #1
 8008e74:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 8008e76:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8008e7a:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8008e7e:	4770      	bx	lr

08008e80 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008e80:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop

08008e88 <SPD_GetMecAngle>:
  * @retval int16_t rotor mechanical angle (s16degrees)
  */
__weak int32_t SPD_GetMecAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->wMecAngle );
}
 8008e88:	6880      	ldr	r0, [r0, #8]
 8008e8a:	4770      	bx	lr

08008e8c <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008e8c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop

08008e94 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008e94:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop

08008e9c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008e9c:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 8008ea0:	b430      	push	{r4, r5}
 8008ea2:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 8008ea4:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 8008ea6:	bfb8      	it	lt
 8008ea8:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008eaa:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008eac:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008eae:	7803      	ldrb	r3, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008eb0:	8a81      	ldrh	r1, [r0, #20]
    hAux = -( *pMecSpeedUnit );
 8008eb2:	bfb8      	it	lt
 8008eb4:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008eb6:	4295      	cmp	r5, r2
 8008eb8:	d819      	bhi.n	8008eee <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008eba:	4291      	cmp	r1, r2
 8008ebc:	bf2c      	ite	cs
 8008ebe:	2200      	movcs	r2, #0
 8008ec0:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8008ec2:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 8008ec6:	b2a9      	uxth	r1, r5
 8008ec8:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8008eca:	bfb8      	it	lt
 8008ecc:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008ece:	8b05      	ldrh	r5, [r0, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8008ed0:	bfb8      	it	lt
 8008ed2:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008ed4:	428d      	cmp	r5, r1
 8008ed6:	d300      	bcc.n	8008eda <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8008ed8:	b15a      	cbz	r2, 8008ef2 <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d901      	bls.n	8008ee2 <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008ee2:	7003      	strb	r3, [r0, #0]

  return ( SpeedSensorReliability );
}
 8008ee4:	1b18      	subs	r0, r3, r4
 8008ee6:	bf18      	it	ne
 8008ee8:	2001      	movne	r0, #1
 8008eea:	bc30      	pop	{r4, r5}
 8008eec:	4770      	bx	lr
    SpeedError = true;
 8008eee:	2201      	movs	r2, #1
 8008ef0:	e7e7      	b.n	8008ec2 <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	bf88      	it	hi
 8008ef6:	2300      	movhi	r3, #0
 8008ef8:	e7f3      	b.n	8008ee2 <SPD_IsMecSpeedReliable+0x46>
 8008efa:	bf00      	nop

08008efc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8008efc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008f00:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8008f04:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008f08:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8008f0c:	b200      	sxth	r0, r0
 8008f0e:	4770      	bx	lr

08008f10 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8008f10:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008f12:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008f16:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 8008f1a:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 8008f1c:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008f1e:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008f20:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 8008f22:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 8008f26:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008f28:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8008f2c:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 8008f2e:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8008f30:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008f32:	6183      	str	r3, [r0, #24]
}
 8008f34:	bc30      	pop	{r4, r5}
 8008f36:	4770      	bx	lr

08008f38 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8008f38:	6141      	str	r1, [r0, #20]
}
 8008f3a:	4770      	bx	lr

08008f3c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8008f3c:	6940      	ldr	r0, [r0, #20]
 8008f3e:	4770      	bx	lr

08008f40 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008f40:	7803      	ldrb	r3, [r0, #0]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d000      	beq.n	8008f48 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008f46:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008f48:	6900      	ldr	r0, [r0, #16]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f7fe bd0e 	b.w	800796c <PID_SetIntegralTerm>

08008f50 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008f50:	6840      	ldr	r0, [r0, #4]
 8008f52:	2800      	cmp	r0, #0
 8008f54:	bfbc      	itt	lt
 8008f56:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008f5a:	30ff      	addlt	r0, #255	; 0xff
}
 8008f5c:	1400      	asrs	r0, r0, #16
 8008f5e:	4770      	bx	lr

08008f60 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008f60:	6880      	ldr	r0, [r0, #8]
 8008f62:	2800      	cmp	r0, #0
 8008f64:	bfbc      	itt	lt
 8008f66:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008f6a:	30ff      	addlt	r0, #255	; 0xff
}
 8008f6c:	1400      	asrs	r0, r0, #16
 8008f6e:	4770      	bx	lr

08008f70 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008f70:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8008f72:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008f74:	60c3      	str	r3, [r0, #12]
}
 8008f76:	4770      	bx	lr

08008f78 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008f78:	7803      	ldrb	r3, [r0, #0]
{
 8008f7a:	b570      	push	{r4, r5, r6, lr}
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	460d      	mov	r5, r1
 8008f80:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008f82:	b313      	cbz	r3, 8008fca <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008f84:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008f86:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	bfbc      	itt	lt
 8008f8c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008f90:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008f92:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008f94:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008f98:	db1c      	blt.n	8008fd4 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8008f9a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008f9e:	428b      	cmp	r3, r1
 8008fa0:	dc18      	bgt.n	8008fd4 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8008fa2:	8c23      	ldrh	r3, [r4, #32]
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	dd03      	ble.n	8008fb0 <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8008fa8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008fac:	428b      	cmp	r3, r1
 8008fae:	db11      	blt.n	8008fd4 <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8008fb0:	b9c6      	cbnz	r6, 8008fe4 <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008fb2:	7823      	ldrb	r3, [r4, #0]
 8008fb4:	042d      	lsls	r5, r5, #16
 8008fb6:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 8008fb8:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008fbc:	bf0c      	ite	eq
 8008fbe:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8008fc0:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8008fc2:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8008fc4:	61a3      	str	r3, [r4, #24]
 8008fc6:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8008fc8:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8008fca:	f7ff ffc9 	bl	8008f60 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8008fce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008fd0:	42ab      	cmp	r3, r5
 8008fd2:	da01      	bge.n	8008fd8 <STC_ExecRamp+0x60>
      AllowedRange = false;
 8008fd4:	2000      	movs	r0, #0
}
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8008fd8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008fdc:	42ab      	cmp	r3, r5
 8008fde:	dcf9      	bgt.n	8008fd4 <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	d0e6      	beq.n	8008fb2 <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008fe4:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8008fe6:	4a08      	ldr	r2, [pc, #32]	; (8009008 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 8008fe8:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008fea:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8008fee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8008ff4:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8008ff6:	1a2d      	subs	r5, r5, r0
 8008ff8:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8008ffa:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8008ffc:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8009000:	2001      	movs	r0, #1
 8009002:	61a5      	str	r5, [r4, #24]
}
 8009004:	bd70      	pop	{r4, r5, r6, pc}
 8009006:	bf00      	nop
 8009008:	10624dd3 	.word	0x10624dd3

0800900c <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800900c:	2300      	movs	r3, #0
 800900e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009010:	6183      	str	r3, [r0, #24]
}
 8009012:	4770      	bx	lr

08009014 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009014:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8009016:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800901a:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800901c:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800901e:	2a00      	cmp	r2, #0
 8009020:	bf18      	it	ne
 8009022:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 8009024:	2b01      	cmp	r3, #1
 8009026:	d910      	bls.n	800904a <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8009028:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800902a:	3b01      	subs	r3, #1
 800902c:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 800902e:	440d      	add	r5, r1
 8009030:	2d00      	cmp	r5, #0
 8009032:	4629      	mov	r1, r5
 8009034:	bfbc      	itt	lt
 8009036:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 800903a:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800903c:	2a01      	cmp	r2, #1
 800903e:	ea4f 4621 	mov.w	r6, r1, asr #16
 8009042:	d009      	beq.n	8009058 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8009044:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8009046:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 8009048:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800904a:	d1f1      	bne.n	8009030 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800904c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8009050:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009052:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 8009054:	60c3      	str	r3, [r0, #12]
 8009056:	e7eb      	b.n	8009030 <STC_CalcTorqueReference+0x1c>
 8009058:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800905a:	6940      	ldr	r0, [r0, #20]
 800905c:	f7ff ff16 	bl	8008e8c <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8009060:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8009062:	b201      	sxth	r1, r0
 8009064:	6920      	ldr	r0, [r4, #16]
 8009066:	f7fe fc8d 	bl	8007984 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800906a:	0403      	lsls	r3, r0, #16
 800906c:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8009070:	bd70      	pop	{r4, r5, r6, pc}
 8009072:	bf00      	nop

08009074 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8009074:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop

0800907c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800907c:	8bc0      	ldrh	r0, [r0, #30]
 800907e:	4770      	bx	lr

08009080 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8009080:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop

08009088 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009088:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800908c:	2000      	movs	r0, #0
 800908e:	b29a      	uxth	r2, r3
 8009090:	f362 000f 	bfi	r0, r2, #0, #16
 8009094:	0c1b      	lsrs	r3, r3, #16
{
 8009096:	b082      	sub	sp, #8
  return IqdRefDefault;
 8009098:	f363 401f 	bfi	r0, r3, #16, #16
}
 800909c:	b002      	add	sp, #8
 800909e:	4770      	bx	lr

080090a0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80090a0:	b510      	push	{r4, lr}
 80090a2:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80090a4:	6940      	ldr	r0, [r0, #20]
 80090a6:	f7ff fef1 	bl	8008e8c <SPD_GetAvrgMecSpeedUnit>
 80090aa:	0400      	lsls	r0, r0, #16
 80090ac:	6060      	str	r0, [r4, #4]
}
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80090b4:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop

080090bc <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80090bc:	8843      	ldrh	r3, [r0, #2]
{
 80090be:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 80090c0:	8885      	ldrh	r5, [r0, #4]
{
 80090c2:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 80090c4:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80090c6:	430b      	orrs	r3, r1
 80090c8:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80090cc:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80090ce:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 80090d0:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80090d2:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 80090d4:	d006      	beq.n	80090e4 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80090d6:	b90a      	cbnz	r2, 80090dc <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80090d8:	bc30      	pop	{r4, r5}
 80090da:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80090dc:	200a      	movs	r0, #10
 80090de:	7020      	strb	r0, [r4, #0]
}
 80090e0:	bc30      	pop	{r4, r5}
 80090e2:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d1f7      	bne.n	80090d8 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 80090e8:	200b      	movs	r0, #11
 80090ea:	7020      	strb	r0, [r4, #0]
}
 80090ec:	bc30      	pop	{r4, r5}
 80090ee:	4770      	bx	lr

080090f0 <STM_NextState>:
{
 80090f0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80090f2:	7803      	ldrb	r3, [r0, #0]
 80090f4:	2b14      	cmp	r3, #20
 80090f6:	d819      	bhi.n	800912c <STM_NextState+0x3c>
 80090f8:	e8df f003 	tbb	[pc, r3]
 80090fc:	240d1257 	.word	0x240d1257
 8009100:	3c0d352e 	.word	0x3c0d352e
 8009104:	1818423f 	.word	0x1818423f
 8009108:	4a650b47 	.word	0x4a650b47
 800910c:	53505e4d 	.word	0x53505e4d
 8009110:	39          	.byte	0x39
 8009111:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009112:	290e      	cmp	r1, #14
 8009114:	d001      	beq.n	800911a <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 8009116:	2907      	cmp	r1, #7
 8009118:	d108      	bne.n	800912c <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 800911a:	7001      	strb	r1, [r0, #0]
 800911c:	2001      	movs	r0, #1
}
 800911e:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8009120:	2907      	cmp	r1, #7
 8009122:	d0fa      	beq.n	800911a <STM_NextState+0x2a>
 8009124:	f1a1 030d 	sub.w	r3, r1, #13
 8009128:	2b01      	cmp	r3, #1
 800912a:	d9f6      	bls.n	800911a <STM_NextState+0x2a>
 800912c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009130:	2b01      	cmp	r3, #1
 8009132:	d00f      	beq.n	8009154 <STM_NextState+0x64>
 8009134:	2907      	cmp	r1, #7
 8009136:	d00d      	beq.n	8009154 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8009138:	2200      	movs	r2, #0
 800913a:	2180      	movs	r1, #128	; 0x80
 800913c:	f7ff ffbe 	bl	80090bc <STM_FaultProcessing>
 8009140:	2000      	movs	r0, #0
}
 8009142:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8009144:	2911      	cmp	r1, #17
 8009146:	d8f7      	bhi.n	8009138 <STM_NextState+0x48>
 8009148:	4b21      	ldr	r3, [pc, #132]	; (80091d0 <STM_NextState+0xe0>)
 800914a:	40cb      	lsrs	r3, r1
 800914c:	07da      	lsls	r2, r3, #31
 800914e:	d4e4      	bmi.n	800911a <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009150:	2903      	cmp	r1, #3
 8009152:	d1f1      	bne.n	8009138 <STM_NextState+0x48>
 8009154:	2000      	movs	r0, #0
}
 8009156:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009158:	2913      	cmp	r1, #19
 800915a:	d0de      	beq.n	800911a <STM_NextState+0x2a>
 800915c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8009160:	2b05      	cmp	r3, #5
 8009162:	d1e5      	bne.n	8009130 <STM_NextState+0x40>
 8009164:	e7d9      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8009166:	1f8b      	subs	r3, r1, #6
 8009168:	2b01      	cmp	r3, #1
 800916a:	d8df      	bhi.n	800912c <STM_NextState+0x3c>
 800916c:	e7d5      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800916e:	2912      	cmp	r1, #18
 8009170:	d1d1      	bne.n	8009116 <STM_NextState+0x26>
 8009172:	e7d2      	b.n	800911a <STM_NextState+0x2a>
      if ( bState == STOP )
 8009174:	2908      	cmp	r1, #8
 8009176:	d1d9      	bne.n	800912c <STM_NextState+0x3c>
 8009178:	e7cf      	b.n	800911a <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 800917a:	2909      	cmp	r1, #9
 800917c:	d1d6      	bne.n	800912c <STM_NextState+0x3c>
 800917e:	e7cc      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8009180:	2900      	cmp	r1, #0
 8009182:	d0ca      	beq.n	800911a <STM_NextState+0x2a>
 8009184:	290c      	cmp	r1, #12
 8009186:	d1d1      	bne.n	800912c <STM_NextState+0x3c>
 8009188:	e7c7      	b.n	800911a <STM_NextState+0x2a>
      if ( bState == IDLE )
 800918a:	2900      	cmp	r1, #0
 800918c:	d1ce      	bne.n	800912c <STM_NextState+0x3c>
 800918e:	e7c4      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8009190:	2902      	cmp	r1, #2
 8009192:	d1c0      	bne.n	8009116 <STM_NextState+0x26>
 8009194:	e7c1      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009196:	2911      	cmp	r1, #17
 8009198:	d1bd      	bne.n	8009116 <STM_NextState+0x26>
 800919a:	e7be      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800919c:	2904      	cmp	r1, #4
 800919e:	d1ba      	bne.n	8009116 <STM_NextState+0x26>
 80091a0:	e7bb      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80091a2:	1f0b      	subs	r3, r1, #4
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d8b6      	bhi.n	8009116 <STM_NextState+0x26>
 80091a8:	e7b7      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80091aa:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d0b3      	beq.n	800911a <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 80091b2:	290c      	cmp	r1, #12
 80091b4:	d1be      	bne.n	8009134 <STM_NextState+0x44>
 80091b6:	e7b0      	b.n	800911a <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80091b8:	2914      	cmp	r1, #20
 80091ba:	d8b7      	bhi.n	800912c <STM_NextState+0x3c>
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <STM_NextState+0xe4>)
 80091be:	40cb      	lsrs	r3, r1
 80091c0:	07db      	lsls	r3, r3, #31
 80091c2:	d4aa      	bmi.n	800911a <STM_NextState+0x2a>
 80091c4:	e7b2      	b.n	800912c <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80091c6:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80091ca:	2b07      	cmp	r3, #7
 80091cc:	d1ae      	bne.n	800912c <STM_NextState+0x3c>
 80091ce:	e7a4      	b.n	800911a <STM_NextState+0x2a>
 80091d0:	00030092 	.word	0x00030092
 80091d4:	00140080 	.word	0x00140080

080091d8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80091d8:	7800      	ldrb	r0, [r0, #0]
 80091da:	4770      	bx	lr

080091dc <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80091dc:	7803      	ldrb	r3, [r0, #0]
 80091de:	2b0b      	cmp	r3, #11
 80091e0:	d001      	beq.n	80091e6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80091e2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80091e4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80091e6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80091e8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80091ea:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80091ec:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80091ee:	2001      	movs	r0, #1
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80091f4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80091f6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80091f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop

08009200 <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
  * @retval none
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t * pPIDPosReg, SpeednTorqCtrl_Handle_t * pSTC, ENCODER_Handle_t * pENC)
{
 8009200:	b410      	push	{r4}
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 8009202:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->MovementDuration = 0.0f;
 8009204:	2400      	movs	r4, #0
  pHandle->ReceivedTh = 0.0f;
 8009206:	2300      	movs	r3, #0
  pHandle->MovementDuration = 0.0f;
 8009208:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 800920a:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 800920c:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 800920e:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8009210:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 8009212:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 8009214:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 8009216:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 8009218:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->Jerk = 0.0f;
 800921a:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 800921c:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 800921e:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8009220:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 8009222:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 8009224:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 8009226:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->ElapseTime = 0.0f;
 8009228:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;
 800922a:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->ReceivedTh = 0.0f;
 800922e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->TcTick = 0;
 8009232:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->PositionControlRegulation = DISABLE;
 8009234:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009238:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  pHandle->MecAngleOffset = 0;
 800923c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8009240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop

08009248 <TC_MoveCommand>:
  * @param  movementDuration Duration to reach the final position.
  * @retval true  = Trajectory command programmed
  *         false = Not ready for a new trajectory configuration.
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8009248:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800924a:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 800924e:	2803      	cmp	r0, #3
 8009250:	d061      	beq.n	8009316 <TC_MoveCommand+0xce>
  {
	  // Back to Move command as the movement duration is different from 0
	  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 8009252:	b108      	cbz	r0, 8009258 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 8009254:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 8009256:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 8009258:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800925c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009260:	ddf9      	ble.n	8009256 <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8009262:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->StartingAngle = startingAngle;
 8009266:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800926a:	eeb2 4a02 	vmov.f32	s8, #34	; 0x41100000  9.0
 800926e:	ee67 7a04 	vmul.f32	s15, s14, s8
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009272:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009276:	ee81 7a27 	vdiv.f32	s14, s2, s15
    pHandle->ElapseTime = 0.0f;
 800927a:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 800927c:	2001      	movs	r0, #1
 800927e:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 8009282:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 8009286:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8009288:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 800928a:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800928c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009290:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009294:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009298:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800929c:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092a0:	ee27 7a27 	vmul.f32	s14, s14, s15
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80092a4:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80092a8:	eec7 7a04 	vdiv.f32	s15, s14, s8
    pHandle->FinalAngle = startingAngle + angleStep;
 80092ac:	ee30 3a20 	vadd.f32	s6, s0, s1
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80092b4:	ee77 3aa7 	vadd.f32	s7, s15, s15
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80092bc:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80092c4:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092c8:	ee80 4aa6 	vdiv.f32	s8, s1, s13
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80092cc:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80092d0:	ee74 6a04 	vadd.f32	s13, s8, s8
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80092d4:	ee27 6a86 	vmul.f32	s12, s15, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80092d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->AngleStep = angleStep;
 80092dc:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80092e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->Theta = startingAngle;
 80092e4:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 80092e8:	ed83 3a02 	vstr	s6, [r3, #8]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80092ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80092f0:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092f4:	ed83 7a00 	vstr	s14, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092f8:	ed83 4a0d 	vstr	s8, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80092fc:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8009300:	edc3 3a05 	vstr	s7, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009304:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009308:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800930c:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009310:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
 8009314:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8009316:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931e:	dca0      	bgt.n	8009262 <TC_MoveCommand+0x1a>
 8009320:	e798      	b.n	8009254 <TC_MoveCommand+0xc>
 8009322:	bf00      	nop

08009324 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;
  
  // Estimate speed
  if (pHandle->ReceivedTh > 0) 
 8009324:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8009328:	b353      	cbz	r3, 8009380 <TC_FollowCommand+0x5c>
  {
    // Calculate dt
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800932a:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 800932e:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 8009336:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8009338:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 800933c:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 800933e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009346:	dd27      	ble.n	8009398 <TC_FollowCommand+0x74>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8009348:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 800934c:	ee70 6a66 	vsub.f32	s13, s0, s13
    }
  }
  
  // Estimated acceleration
  if (pHandle->ReceivedTh > 1) {
 8009350:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8009352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1) {
 8009356:	d915      	bls.n	8009384 <TC_FollowCommand+0x60>
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 8009358:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 800935c:	ee37 6a46 	vsub.f32	s12, s14, s12
 8009360:	eec6 6a27 	vdiv.f32	s13, s12, s15
    }
  }
  
  // Update state variable
  pHandle->ThetaPrev  = Angle;
 8009364:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 8009368:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;
  
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800936c:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 800936e:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 8009372:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 8009376:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800937a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  
  return;
}
 800937e:	4770      	bx	lr
  float omega = 0, acceleration = 0, dt = 0;
 8009380:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80093a8 <TC_FollowCommand+0x84>
  pHandle->ThetaPrev  = Angle;
 8009384:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
    pHandle->ReceivedTh++;
 8009388:	3301      	adds	r3, #1
 800938a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 800938e:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    pHandle->ReceivedTh++;
 8009392:	eddf 6a05 	vldr	s13, [pc, #20]	; 80093a8 <TC_FollowCommand+0x84>
 8009396:	e7e9      	b.n	800936c <TC_FollowCommand+0x48>
  if (pHandle->ReceivedTh > 1) {
 8009398:	2b01      	cmp	r3, #1
 800939a:	d9f1      	bls.n	8009380 <TC_FollowCommand+0x5c>
  float omega = 0, acceleration = 0, dt = 0;
 800939c:	ed9f 7a02 	vldr	s14, [pc, #8]	; 80093a8 <TC_FollowCommand+0x84>
 80093a0:	eef0 6a47 	vmov.f32	s13, s14
 80093a4:	e7de      	b.n	8009364 <TC_FollowCommand+0x40>
 80093a6:	bf00      	nop
 80093a8:	00000000 	.word	0x00000000

080093ac <TC_PositionRegulation>:
  * @brief  It proceeds on the position control loop.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_PositionRegulation(PosCtrl_Handle_t *pHandle)
{
 80093ac:	b538      	push	{r3, r4, r5, lr}
  int32_t wMecAngleRef;
  int32_t wMecAngle;
  int32_t wError;
  int32_t hTorqueRef_Pos;

  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80093ae:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d039      	beq.n	800942a <TC_PositionRegulation+0x7e>
  {
    TC_MoveExecution(pHandle);
  }
  
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d003      	beq.n	80093c2 <TC_PositionRegulation+0x16>
  {
    TC_FollowExecution(pHandle);
  }
  
  if (pHandle->PositionControlRegulation == ENABLE)
 80093ba:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80093be:	b9a3      	cbnz	r3, 80093ea <TC_PositionRegulation+0x3e>

    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
  }

}
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_FollowExecution(PosCtrl_Handle_t *pHandle)
{
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80093c2:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 80093c6:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 80093ca:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80093ce:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80093d2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80093d6:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80093da:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80093de:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80093e2:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0ea      	beq.n	80093c0 <TC_PositionRegulation+0x14>
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80093ea:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8009534 <TC_PositionRegulation+0x188>
 80093ee:	edd0 7a12 	vldr	s15, [r0, #72]	; 0x48
 80093f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093f6:	4604      	mov	r4, r0
 80093f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80093fc:	6e80      	ldr	r0, [r0, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80093fe:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8009402:	f7ff fd9b 	bl	8008f3c <STC_GetSpeedSensor>
 8009406:	f7ff fd3f 	bl	8008e88 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800940a:	1a29      	subs	r1, r5, r0
 800940c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800940e:	f7fe fafd 	bl	8007a0c <PID_Controller>
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8009412:	2100      	movs	r1, #0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8009414:	4605      	mov	r5, r0
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8009416:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009418:	f7ff fdaa 	bl	8008f70 <STC_SetControlMode>
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800941c:	4629      	mov	r1, r5
 800941e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009420:	2200      	movs	r2, #0
}
 8009422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 8009426:	f7ff bda7 	b.w	8008f78 <STC_ExecRamp>
  if (pHandle->ElapseTime < pHandle->SubStep[0])              // 1st Sub-Step interval time of acceleration phase
 800942a:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800942e:	edd0 5a04 	vldr	s11, [r0, #16]
 8009432:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8009436:	edd0 6a00 	vldr	s13, [r0]
 800943a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800943e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009442:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009446:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800944a:	d527      	bpl.n	800949c <TC_PositionRegulation+0xf0>
    jerkApplied = pHandle->Jerk;
 800944c:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
 8009450:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 8009454:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8009458:	edd0 5a12 	vldr	s11, [r0, #72]	; 0x48
  pHandle->ElapseTime += pHandle->SamplingTime;
 800945c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8009460:	eea4 7aa7 	vfma.f32	s14, s9, s15
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8009464:	eeb4 6ac5 	vcmpe.f32	s12, s10
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8009468:	eee7 6a27 	vfma.f32	s13, s14, s15
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800946c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8009470:	eee6 5aa7 	vfma.f32	s11, s13, s15
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8009474:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8009478:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800947c:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8009480:	dd9b      	ble.n	80093ba <TC_PositionRegulation+0xe>
    if (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START) {
 8009482:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8009486:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 8009488:	bf04      	itt	eq
 800948a:	2305      	moveq	r3, #5
 800948c:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 8009490:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009492:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8009494:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009496:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800949a:	e78e      	b.n	80093ba <TC_PositionRegulation+0xe>
  else if (pHandle->ElapseTime < pHandle->SubStep[1])         // 2nd Sub-Step interval time of acceleration phase
 800949c:	edd0 5a05 	vldr	s11, [r0, #20]
 80094a0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80094a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a8:	d414      	bmi.n	80094d4 <TC_PositionRegulation+0x128>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])         // 3rd Sub-Step interval time of acceleration phase
 80094aa:	edd0 5a06 	vldr	s11, [r0, #24]
 80094ae:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80094b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b6:	d414      	bmi.n	80094e2 <TC_PositionRegulation+0x136>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])         // Speed Cruise phase (after acceleration and before deceleration phases)
 80094b8:	edd0 5a07 	vldr	s11, [r0, #28]
 80094bc:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d516      	bpl.n	80094f4 <TC_PositionRegulation+0x148>
    pHandle->Omega = pHandle->CruiseSpeed;
 80094c6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8009538 <TC_PositionRegulation+0x18c>
 80094ca:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
  float jerkApplied = 0;
 80094ce:	eef0 4a47 	vmov.f32	s9, s14
 80094d2:	e7c1      	b.n	8009458 <TC_PositionRegulation+0xac>
 80094d4:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 80094d8:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
 80094dc:	eddf 4a16 	vldr	s9, [pc, #88]	; 8009538 <TC_PositionRegulation+0x18c>
 80094e0:	e7ba      	b.n	8009458 <TC_PositionRegulation+0xac>
    jerkApplied = -(pHandle->Jerk);
 80094e2:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
 80094e6:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 80094ea:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
 80094ee:	eef1 4a64 	vneg.f32	s9, s9
 80094f2:	e7b1      	b.n	8009458 <TC_PositionRegulation+0xac>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])         // 1st Sub-Step interval time of deceleration phase
 80094f4:	edd0 5a08 	vldr	s11, [r0, #32]
 80094f8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80094fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009500:	d4ef      	bmi.n	80094e2 <TC_PositionRegulation+0x136>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
 8009502:	edd0 5a09 	vldr	s11, [r0, #36]	; 0x24
 8009506:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	d4e1      	bmi.n	80094d4 <TC_PositionRegulation+0x128>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 8009510:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009518:	d498      	bmi.n	800944c <TC_PositionRegulation+0xa0>
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800951a:	eeb4 6ac5 	vcmpe.f32	s12, s10
    pHandle->Theta = pHandle->FinalAngle;
 800951e:	6882      	ldr	r2, [r0, #8]
  pHandle->ElapseTime += pHandle->SamplingTime;
 8009520:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8009524:	2302      	movs	r3, #2
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Theta = pHandle->FinalAngle;
 800952a:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800952c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8009530:	dca7      	bgt.n	8009482 <TC_PositionRegulation+0xd6>
 8009532:	e742      	b.n	80093ba <TC_PositionRegulation+0xe>
 8009534:	4622f983 	.word	0x4622f983
 8009538:	00000000 	.word	0x00000000

0800953c <TC_EncAlignmentCommand>:
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 800953c:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8009540:	2b02      	cmp	r3, #2
 8009542:	d012      	beq.n	800956a <TC_EncAlignmentCommand+0x2e>
{
 8009544:	b510      	push	{r4, lr}
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 8009546:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800954a:	2b04      	cmp	r3, #4
{
 800954c:	b082      	sub	sp, #8
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800954e:	d010      	beq.n	8009572 <TC_EncAlignmentCommand+0x36>
      pHandle->pENC->_Super.wMecAngle = 0;
 8009550:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8009552:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8009554:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 8009556:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 8009558:	60a3      	str	r3, [r4, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800955a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800955e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 8009562:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
}
 8009566:	b002      	add	sp, #8
 8009568:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800956a:	2300      	movs	r3, #0
 800956c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8009570:	4770      	bx	lr
      pHandle->EncoderAbsoluteAligned = false;
 8009572:	2300      	movs	r3, #0
 8009574:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 8009578:	4604      	mov	r4, r0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800957a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800957c:	f7ff fcde 	bl	8008f3c <STC_GetSpeedSensor>
 8009580:	f7ff fc82 	bl	8008e88 <SPD_GetMecAngle>
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8009584:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8009588:	9001      	str	r0, [sp, #4]
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800958a:	2b03      	cmp	r3, #3
 800958c:	d005      	beq.n	800959a <TC_EncAlignmentCommand+0x5e>
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800958e:	b123      	cbz	r3, 800959a <TC_EncAlignmentCommand+0x5e>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 8009590:	2301      	movs	r3, #1
 8009592:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8009596:	b002      	add	sp, #8
 8009598:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800959a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800959e:	ed9f 4a32 	vldr	s8, [pc, #200]	; 8009668 <TC_EncAlignmentCommand+0x12c>
    pHandle->AngleStep = angleStep;
 80095a2:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800966c <TC_EncAlignmentCommand+0x130>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80095a6:	eef2 4a02 	vmov.f32	s9, #34	; 0x41100000  9.0
 80095aa:	ee67 5a24 	vmul.f32	s11, s14, s9
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095ae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80095b2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
    pHandle->ElapseTime = 0.0f;
 80095b6:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 80095b8:	2201      	movs	r2, #1
 80095ba:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80095be:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 80095c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80095c4:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80095c6:	63e3      	str	r3, [r4, #60]	; 0x3c
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80095c8:	eddd 7a01 	vldr	s15, [sp, #4]
    pHandle->AngleStep = angleStep;
 80095cc:	ed84 6a03 	vstr	s12, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80095d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80095dc:	ee87 5a84 	vdiv.f32	s10, s15, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095e0:	ee27 7a25 	vmul.f32	s14, s14, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80095e4:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80095e8:	eec7 7a24 	vdiv.f32	s15, s14, s9
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80095ec:	eef0 3a08 	vmov.f32	s7, #8	; 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80095f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80095f4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80095f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80095fc:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009600:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009604:	eef2 5a00 	vmov.f32	s11, #32	; 0x41000000  8.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009608:	ee86 3a26 	vdiv.f32	s6, s12, s13
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800960c:	ee77 2aa7 	vadd.f32	s5, s15, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009610:	ee73 6a03 	vadd.f32	s13, s6, s6
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009614:	ee67 3aa3 	vmul.f32	s7, s15, s7
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009618:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800961c:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009620:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009624:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009628:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->FinalAngle = startingAngle + angleStep;
 800962c:	ee35 6a06 	vadd.f32	s12, s10, s12
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8009630:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8009634:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009638:	ed84 7a00 	vstr	s14, [r4]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800963c:	ed84 3a0d 	vstr	s6, [r4, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009640:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8009644:	edc4 2a05 	vstr	s5, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009648:	edc4 3a06 	vstr	s7, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800964c:	ed84 4a07 	vstr	s8, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009650:	edc4 4a08 	vstr	s9, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009654:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
    pHandle->FinalAngle = startingAngle + angleStep;
 8009658:	ed84 6a02 	vstr	s12, [r4, #8]
    pHandle->StartingAngle = startingAngle;
 800965c:	ed84 5a01 	vstr	s10, [r4, #4]
    pHandle->Theta = startingAngle;
 8009660:	ed84 5a12 	vstr	s10, [r4, #72]	; 0x48
 8009664:	e794      	b.n	8009590 <TC_EncAlignmentCommand+0x54>
 8009666:	bf00      	nop
 8009668:	4622f983 	.word	0x4622f983
 800966c:	40c90fdb 	.word	0x40c90fdb

08009670 <TC_EncoderReset>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 8009670:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
 8009674:	b93a      	cbnz	r2, 8009686 <TC_EncoderReset+0x16>
{
 8009676:	b430      	push	{r4, r5}
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 8009678:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
 800967c:	2c01      	cmp	r4, #1
 800967e:	4603      	mov	r3, r0
 8009680:	d002      	beq.n	8009688 <TC_EncoderReset+0x18>
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
    pHandle->Theta = 0.0f;
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
  }
}
 8009682:	bc30      	pop	{r4, r5}
 8009684:	4770      	bx	lr
 8009686:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 8009688:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800968a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800968e:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->Theta = 0.0f;
 8009692:	2500      	movs	r5, #0
    pHandle->pENC->_Super.wMecAngle = 0;
 8009694:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 8009696:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800969a:	2402      	movs	r4, #2
    pHandle->Theta = 0.0f;
 800969c:	649d      	str	r5, [r3, #72]	; 0x48
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800969e:	f883 4062 	strb.w	r4, [r3, #98]	; 0x62
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80096a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80096a6:	bc30      	pop	{r4, r5}
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
 80096a8:	f7fe b876 	b.w	8007798 <ENC_SetMecAngle>

080096ac <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 80096ac:	b508      	push	{r3, lr}

  return ((float)( (SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16) );
 80096ae:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80096b0:	f7ff fc44 	bl	8008f3c <STC_GetSpeedSensor>
 80096b4:	f7ff fbe8 	bl	8008e88 <SPD_GetMecAngle>
 80096b8:	ee07 0a10 	vmov	s14, r0
 80096bc:	eddf 7a03 	vldr	s15, [pc, #12]	; 80096cc <TC_GetCurrentPosition+0x20>
 80096c0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 80096c4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80096c8:	bd08      	pop	{r3, pc}
 80096ca:	bf00      	nop
 80096cc:	4622f983 	.word	0x4622f983

080096d0 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 80096d0:	ed90 0a02 	vldr	s0, [r0, #8]
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop

080096d8 <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 80096d8:	ed90 0a00 	vldr	s0, [r0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop

080096e0 <TC_IncTick>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 80096e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80096e2:	3301      	adds	r3, #1
 80096e4:	6583      	str	r3, [r0, #88]	; 0x58
}
 80096e6:	4770      	bx	lr

080096e8 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80096e8:	f7fe b87a 	b.w	80077e0 <FCP_Init>

080096ec <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80096ec:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 80096f0:	b192      	cbz	r2, 8009718 <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80096f2:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 80096f6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80096fa:	4603      	mov	r3, r0
 80096fc:	b199      	cbz	r1, 8009726 <UFCP_TX_IRQ_Handler+0x3a>
 80096fe:	2901      	cmp	r1, #1
 8009700:	d00b      	beq.n	800971a <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009702:	7d40      	ldrb	r0, [r0, #21]
 8009704:	3001      	adds	r0, #1
 8009706:	4281      	cmp	r1, r0
 8009708:	dc0f      	bgt.n	800972a <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800970a:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 800970c:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800970e:	7d00      	ldrb	r0, [r0, #20]
 8009710:	6290      	str	r0, [r2, #40]	; 0x28
 8009712:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8009716:	4770      	bx	lr
 8009718:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800971a:	7d40      	ldrb	r0, [r0, #21]
 800971c:	6290      	str	r0, [r2, #40]	; 0x28
      pBaseHandle->TxFrameLevel++;
 800971e:	3101      	adds	r1, #1
 8009720:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 8009724:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8009726:	7d00      	ldrb	r0, [r0, #20]
        break;
 8009728:	e7f8      	b.n	800971c <UFCP_TX_IRQ_Handler+0x30>
{
 800972a:	b430      	push	{r4, r5}
 800972c:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 8009730:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009732:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009734:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8009738:	2500      	movs	r5, #0
 800973a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800973e:	6011      	str	r1, [r2, #0]
 8009740:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009744:	4623      	mov	r3, r4
}
 8009746:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009748:	4718      	bx	r3
 800974a:	bf00      	nop

0800974c <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800974c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8009750:	b10b      	cbz	r3, 8009756 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009752:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8009754:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8009756:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 800975a:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800975e:	6813      	ldr	r3, [r2, #0]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8009760:	2101      	movs	r1, #1
 8009762:	f043 0320 	orr.w	r3, r3, #32
 8009766:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800976a:	2002      	movs	r0, #2
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	4770      	bx	lr

08009770 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8009770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009774:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8009776:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800977a:	b110      	cbz	r0, 8009782 <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800977c:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800977e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 8009782:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8009784:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8009786:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8009788:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800978a:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 800978e:	2b00      	cmp	r3, #0
 8009790:	d05d      	beq.n	800984e <UFCP_Send+0xde>
 8009792:	1d10      	adds	r0, r2, #4
 8009794:	f104 051a 	add.w	r5, r4, #26
 8009798:	4295      	cmp	r5, r2
 800979a:	bf88      	it	hi
 800979c:	42b8      	cmphi	r0, r7
 800979e:	d86b      	bhi.n	8009878 <UFCP_Send+0x108>
 80097a0:	2b0b      	cmp	r3, #11
 80097a2:	d969      	bls.n	8009878 <UFCP_Send+0x108>
 80097a4:	4250      	negs	r0, r2
 80097a6:	f000 0003 	and.w	r0, r0, #3
 80097aa:	1cc5      	adds	r5, r0, #3
 80097ac:	42a9      	cmp	r1, r5
 80097ae:	d339      	bcc.n	8009824 <UFCP_Send+0xb4>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d06c      	beq.n	800988e <UFCP_Send+0x11e>
 80097b4:	7811      	ldrb	r1, [r2, #0]
 80097b6:	75a1      	strb	r1, [r4, #22]
 80097b8:	2801      	cmp	r0, #1
 80097ba:	f1a3 0102 	sub.w	r1, r3, #2
 80097be:	b2c9      	uxtb	r1, r1
 80097c0:	f102 0c01 	add.w	ip, r2, #1
 80097c4:	f104 0717 	add.w	r7, r4, #23
 80097c8:	d012      	beq.n	80097f0 <UFCP_Send+0x80>
 80097ca:	7851      	ldrb	r1, [r2, #1]
 80097cc:	75e1      	strb	r1, [r4, #23]
 80097ce:	2803      	cmp	r0, #3
 80097d0:	f1a3 0103 	sub.w	r1, r3, #3
 80097d4:	b2c9      	uxtb	r1, r1
 80097d6:	f102 0c02 	add.w	ip, r2, #2
 80097da:	f104 0718 	add.w	r7, r4, #24
 80097de:	d107      	bne.n	80097f0 <UFCP_Send+0x80>
 80097e0:	7891      	ldrb	r1, [r2, #2]
 80097e2:	7621      	strb	r1, [r4, #24]
 80097e4:	1f19      	subs	r1, r3, #4
 80097e6:	b2c9      	uxtb	r1, r1
 80097e8:	f102 0c03 	add.w	ip, r2, #3
 80097ec:	f104 0719 	add.w	r7, r4, #25
 80097f0:	1a1b      	subs	r3, r3, r0
 80097f2:	b2dd      	uxtb	r5, r3
 80097f4:	f100 0316 	add.w	r3, r0, #22
 80097f8:	4402      	add	r2, r0
 80097fa:	ea4f 0895 	mov.w	r8, r5, lsr #2
 80097fe:	18e0      	adds	r0, r4, r3
 8009800:	2300      	movs	r3, #0
 8009802:	3301      	adds	r3, #1
 8009804:	b2de      	uxtb	r6, r3
 8009806:	f852 eb04 	ldr.w	lr, [r2], #4
 800980a:	f840 eb04 	str.w	lr, [r0], #4
 800980e:	45b0      	cmp	r8, r6
 8009810:	d8f7      	bhi.n	8009802 <UFCP_Send+0x92>
 8009812:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 8009816:	1ac9      	subs	r1, r1, r3
 8009818:	429d      	cmp	r5, r3
 800981a:	b2c9      	uxtb	r1, r1
 800981c:	eb0c 0203 	add.w	r2, ip, r3
 8009820:	441f      	add	r7, r3
 8009822:	d014      	beq.n	800984e <UFCP_Send+0xde>
 8009824:	7813      	ldrb	r3, [r2, #0]
 8009826:	703b      	strb	r3, [r7, #0]
 8009828:	b189      	cbz	r1, 800984e <UFCP_Send+0xde>
 800982a:	7853      	ldrb	r3, [r2, #1]
 800982c:	707b      	strb	r3, [r7, #1]
 800982e:	2901      	cmp	r1, #1
 8009830:	d00d      	beq.n	800984e <UFCP_Send+0xde>
 8009832:	7893      	ldrb	r3, [r2, #2]
 8009834:	70bb      	strb	r3, [r7, #2]
 8009836:	2902      	cmp	r1, #2
 8009838:	d009      	beq.n	800984e <UFCP_Send+0xde>
 800983a:	78d3      	ldrb	r3, [r2, #3]
 800983c:	70fb      	strb	r3, [r7, #3]
 800983e:	2903      	cmp	r1, #3
 8009840:	d005      	beq.n	800984e <UFCP_Send+0xde>
 8009842:	7913      	ldrb	r3, [r2, #4]
 8009844:	713b      	strb	r3, [r7, #4]
 8009846:	2904      	cmp	r1, #4
 8009848:	d001      	beq.n	800984e <UFCP_Send+0xde>
 800984a:	7953      	ldrb	r3, [r2, #5]
 800984c:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800984e:	f104 0014 	add.w	r0, r4, #20
 8009852:	f7fd ffdb 	bl	800780c <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8009856:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800985a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009864:	6813      	ldr	r3, [r2, #0]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8009866:	2101      	movs	r1, #1
 8009868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986c:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8009870:	2002      	movs	r0, #2
 8009872:	6013      	str	r3, [r2, #0]
}
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	3101      	adds	r1, #1
 800987a:	4411      	add	r1, r2
 800987c:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8009880:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009884:	f803 0f01 	strb.w	r0, [r3, #1]!
 8009888:	428a      	cmp	r2, r1
 800988a:	d1f9      	bne.n	8009880 <UFCP_Send+0x110>
 800988c:	e7df      	b.n	800984e <UFCP_Send+0xde>
 800988e:	4694      	mov	ip, r2
 8009890:	e7ae      	b.n	80097f0 <UFCP_Send+0x80>
 8009892:	bf00      	nop

08009894 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8009894:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8009898:	b1b3      	cbz	r3, 80098c8 <UFCP_RX_IRQ_Handler+0x34>
{
 800989a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800989c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 80098a0:	4604      	mov	r4, r0
{
 80098a2:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 80098a4:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 80098a6:	b1e3      	cbz	r3, 80098e2 <UFCP_RX_IRQ_Handler+0x4e>
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d00f      	beq.n	80098cc <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 80098ac:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 80098b0:	3101      	adds	r1, #1
 80098b2:	428b      	cmp	r3, r1
 80098b4:	dc1f      	bgt.n	80098f6 <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80098b6:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 80098b8:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80098ba:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80098be:	4823      	ldr	r0, [pc, #140]	; (800994c <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 80098c0:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80098c4:	b003      	add	sp, #12
 80098c6:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80098c8:	4820      	ldr	r0, [pc, #128]	; (800994c <UFCP_RX_IRQ_Handler+0xb8>)
}
 80098ca:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80098cc:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 80098ce:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80098d2:	481e      	ldr	r0, [pc, #120]	; (800994c <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 80098d4:	bf54      	ite	pl
 80098d6:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80098d8:	2300      	movmi	r3, #0
 80098da:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80098de:	b003      	add	sp, #12
 80098e0:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80098e2:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80098e4:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80098e8:	4819      	ldr	r0, [pc, #100]	; (8009950 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80098ea:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80098ec:	2301      	movs	r3, #1
 80098ee:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80098f2:	b003      	add	sp, #12
 80098f4:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80098f6:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80098fa:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098fe:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 8009900:	2200      	movs	r2, #0
 8009902:	f023 0320 	bic.w	r3, r3, #32
 8009906:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009908:	f104 0099 	add.w	r0, r4, #153	; 0x99
 800990c:	600b      	str	r3, [r1, #0]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800990e:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009912:	f7fd ff7b 	bl	800780c <FCP_CalcCRC>
 8009916:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800991a:	4283      	cmp	r3, r0
 800991c:	d10a      	bne.n	8009934 <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800991e:	6820      	ldr	r0, [r4, #0]
 8009920:	68a5      	ldr	r5, [r4, #8]
 8009922:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8009926:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800992a:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 800992e:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009930:	4808      	ldr	r0, [pc, #32]	; (8009954 <UFCP_RX_IRQ_Handler+0xc0>)
 8009932:	e7c7      	b.n	80098c4 <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 8009934:	aa02      	add	r2, sp, #8
 8009936:	230a      	movs	r3, #10
 8009938:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800993c:	4620      	mov	r0, r4
 800993e:	2301      	movs	r3, #1
 8009940:	21ff      	movs	r1, #255	; 0xff
 8009942:	f7ff ff15 	bl	8009770 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009946:	4803      	ldr	r0, [pc, #12]	; (8009954 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8009948:	e7bc      	b.n	80098c4 <UFCP_RX_IRQ_Handler+0x30>
 800994a:	bf00      	nop
 800994c:	08009d94 	.word	0x08009d94
 8009950:	08009d96 	.word	0x08009d96
 8009954:	08009d98 	.word	0x08009d98

08009958 <UFCP_OVR_IRQ_Handler>:
{
 8009958:	b500      	push	{lr}
 800995a:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 800995c:	aa02      	add	r2, sp, #8
 800995e:	2308      	movs	r3, #8
 8009960:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009964:	21ff      	movs	r1, #255	; 0xff
 8009966:	2301      	movs	r3, #1
 8009968:	f7ff ff02 	bl	8009770 <UFCP_Send>
}
 800996c:	b003      	add	sp, #12
 800996e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009972:	bf00      	nop

08009974 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009974:	2300      	movs	r3, #0
 8009976:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800997a:	4770      	bx	lr

0800997c <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800997c:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800997e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8009980:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8009982:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8009984:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8009986:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8009988:	8243      	strh	r3, [r0, #18]
  pHandle->wElSpeedDpp32 = 0;
 800998a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->hRemainingStep = 0u;
 800998e:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 8009990:	8603      	strh	r3, [r0, #48]	; 0x30
  pHandle->bTransitionStarted = false;
 8009992:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 8009996:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->bTransitionLocked = false;
 800999a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800999e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 80099a2:	4770      	bx	lr

080099a4 <VSS_Init>:
{
 80099a4:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 80099a6:	f7ff ffe9 	bl	800997c <VSS_Clear>
}
 80099aa:	bd08      	pop	{r3, pc}

080099ac <VSS_SetMecAngle>:
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 80099ac:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 80099ae:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80099b0:	7843      	ldrb	r3, [r0, #1]
 80099b2:	fb91 f1f3 	sdiv	r1, r1, r3
 80099b6:	80c1      	strh	r1, [r0, #6]
}
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop

080099bc <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 80099bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80099c0:	bb73      	cbnz	r3, 8009a20 <VSS_SetMecAcceleration+0x64>
{
 80099c2:	b470      	push	{r4, r5, r6}
 80099c4:	8b45      	ldrh	r5, [r0, #26]
 80099c6:	69c3      	ldr	r3, [r0, #28]
 80099c8:	7844      	ldrb	r4, [r0, #1]
 80099ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80099ce:	006d      	lsls	r5, r5, #1
 80099d0:	fb03 f301 	mul.w	r3, r3, r1
 80099d4:	fb93 f3f5 	sdiv	r3, r3, r5
  {
    if ( hDurationms == 0u )
 80099d8:	b1d2      	cbz	r2, 8009a10 <VSS_SetMecAcceleration+0x54>
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80099da:	8e86      	ldrh	r6, [r0, #52]	; 0x34
 80099dc:	4d11      	ldr	r5, [pc, #68]	; (8009a24 <VSS_SetMecAcceleration+0x68>)
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80099de:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80099e0:	fb02 f206 	mul.w	r2, r2, r6
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80099e4:	fba5 1202 	umull	r1, r2, r5, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80099e8:	f3c2 128f 	ubfx	r2, r2, #6, #16
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80099ec:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80099f0:	fb91 f5f4 	sdiv	r5, r1, r4
      hNbrStep++;
 80099f4:	3201      	adds	r2, #1
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80099f6:	1b5b      	subs	r3, r3, r5
      hNbrStep++;
 80099f8:	b292      	uxth	r2, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80099fa:	041b      	lsls	r3, r3, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 80099fc:	0409      	lsls	r1, r1, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80099fe:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a02:	fb04 f303 	mul.w	r3, r4, r3
      pHandle->hRemainingStep = hNbrStep;
 8009a06:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009a08:	e9c0 3108 	strd	r3, r1, [r0, #32]
    }
  }
}
 8009a0c:	bc70      	pop	{r4, r5, r6}
 8009a0e:	4770      	bx	lr
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009a10:	fb13 f304 	smulbb	r3, r3, r4
 8009a14:	81c3      	strh	r3, [r0, #14]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009a16:	8181      	strh	r1, [r0, #12]
      pHandle->hRemainingStep = 0u;
 8009a18:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009a1a:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 8009a1c:	bc70      	pop	{r4, r5, r6}
 8009a1e:	4770      	bx	lr
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	10624dd3 	.word	0x10624dd3

08009a28 <RUC_SetPhaseDurationms>:
 8009a28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009a2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a30:	818a      	strh	r2, [r1, #12]
 8009a32:	4770      	bx	lr

08009a34 <RUC_SetPhaseFinalMecSpeedUnit>:
 8009a34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009a38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a3c:	81ca      	strh	r2, [r1, #14]
 8009a3e:	4770      	bx	lr

08009a40 <RUC_SetPhaseFinalTorque>:
 8009a40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009a44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a48:	820a      	strh	r2, [r1, #16]
 8009a4a:	4770      	bx	lr

08009a4c <RUC_GetPhaseDurationms>:
 8009a4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009a50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a54:	8988      	ldrh	r0, [r1, #12]
 8009a56:	4770      	bx	lr

08009a58 <RUC_GetPhaseFinalMecSpeedUnit>:
 8009a58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009a5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a60:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop

08009a68 <RUC_GetPhaseFinalTorque>:
 8009a68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009a6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a70:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop

08009a78 <RUC_GetNumberOfPhases>:
 8009a78:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop

08009a80 <__libc_init_array>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	4e0d      	ldr	r6, [pc, #52]	; (8009ab8 <__libc_init_array+0x38>)
 8009a84:	4c0d      	ldr	r4, [pc, #52]	; (8009abc <__libc_init_array+0x3c>)
 8009a86:	1ba4      	subs	r4, r4, r6
 8009a88:	10a4      	asrs	r4, r4, #2
 8009a8a:	2500      	movs	r5, #0
 8009a8c:	42a5      	cmp	r5, r4
 8009a8e:	d109      	bne.n	8009aa4 <__libc_init_array+0x24>
 8009a90:	4e0b      	ldr	r6, [pc, #44]	; (8009ac0 <__libc_init_array+0x40>)
 8009a92:	4c0c      	ldr	r4, [pc, #48]	; (8009ac4 <__libc_init_array+0x44>)
 8009a94:	f000 f820 	bl	8009ad8 <_init>
 8009a98:	1ba4      	subs	r4, r4, r6
 8009a9a:	10a4      	asrs	r4, r4, #2
 8009a9c:	2500      	movs	r5, #0
 8009a9e:	42a5      	cmp	r5, r4
 8009aa0:	d105      	bne.n	8009aae <__libc_init_array+0x2e>
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aa8:	4798      	blx	r3
 8009aaa:	3501      	adds	r5, #1
 8009aac:	e7ee      	b.n	8009a8c <__libc_init_array+0xc>
 8009aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ab2:	4798      	blx	r3
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	e7f2      	b.n	8009a9e <__libc_init_array+0x1e>
 8009ab8:	08009da4 	.word	0x08009da4
 8009abc:	08009da4 	.word	0x08009da4
 8009ac0:	08009da4 	.word	0x08009da4
 8009ac4:	08009da8 	.word	0x08009da8

08009ac8 <memset>:
 8009ac8:	4402      	add	r2, r0
 8009aca:	4603      	mov	r3, r0
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d100      	bne.n	8009ad2 <memset+0xa>
 8009ad0:	4770      	bx	lr
 8009ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad6:	e7f9      	b.n	8009acc <memset+0x4>

08009ad8 <_init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr

08009ae4 <_fini>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr
